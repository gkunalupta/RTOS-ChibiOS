
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08000e81 	.word	0x08000e81
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	08002301 	.word	0x08002301
 8000070:	080022d1 	.word	0x080022d1
 8000074:	080022a1 	.word	0x080022a1
 8000078:	08002271 	.word	0x08002271
 800007c:	08002241 	.word	0x08002241
 8000080:	08002211 	.word	0x08002211
 8000084:	080021e1 	.word	0x080021e1
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08001f61 	.word	0x08001f61
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08001f41 	.word	0x08001f41
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080021b1 	.word	0x080021b1
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	08001f21 	.word	0x08001f21
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	08002181 	.word	0x08002181
 8000124:	08002151 	.word	0x08002151
 8000128:	08002121 	.word	0x08002121
 800012c:	080020f1 	.word	0x080020f1
 8000130:	080020c1 	.word	0x080020c1
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	08002091 	.word	0x08002091
 8000154:	08002061 	.word	0x08002061
 8000158:	08002031 	.word	0x08002031
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f002 f8dc 	bl	80023c0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f001 fdd2 	bl	8001db0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f002 f86e 	bl	8002330 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f002 f8ac 	bl	80023b0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f000 ff5a 	bl	8001120 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f002 b890 	b.w	80023a0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	080026c8 	.word	0x080026c8
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002a0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002a4:	200014c8 	.word	0x200014c8
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002d0:	f000 fde6 	bl	8000ea0 <_stats_stop_measure_crit_thd>
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002da:	4628      	mov	r0, r5
                blx     r4
 80002dc:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002de:	2000      	movs	r0, #0
                bl      chThdExit
 80002e0:	f001 fb36 	bl	8001950 <chThdExit>

080002e4 <_zombies>:
_zombies:       b       _zombies
 80002e4:	e7fe      	b.n	80002e4 <_zombies>

080002e6 <_port_switch_from_isr>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch_from_isr
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
 80002e6:	f000 fde3 	bl	8000eb0 <_stats_start_measure_crit_thd>
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002ea:	f001 fb59 	bl	80019a0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002ee:	f000 fdd7 	bl	8000ea0 <_stats_stop_measure_crit_thd>

080002f2 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002f2:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002f4:	e7fe      	b.n	80002f4 <_port_exit_from_isr+0x2>
	...

080002f8 <memcpy>:
 80002f8:	4684      	mov	ip, r0
 80002fa:	ea41 0300 	orr.w	r3, r1, r0
 80002fe:	f013 0303 	ands.w	r3, r3, #3
 8000302:	d16d      	bne.n	80003e0 <memcpy+0xe8>
 8000304:	3a40      	subs	r2, #64	; 0x40
 8000306:	d341      	bcc.n	800038c <memcpy+0x94>
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	3a40      	subs	r2, #64	; 0x40
 800038a:	d2bd      	bcs.n	8000308 <memcpy+0x10>
 800038c:	3230      	adds	r2, #48	; 0x30
 800038e:	d311      	bcc.n	80003b4 <memcpy+0xbc>
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	3a10      	subs	r2, #16
 80003b2:	d2ed      	bcs.n	8000390 <memcpy+0x98>
 80003b4:	320c      	adds	r2, #12
 80003b6:	d305      	bcc.n	80003c4 <memcpy+0xcc>
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	3a04      	subs	r2, #4
 80003c2:	d2f9      	bcs.n	80003b8 <memcpy+0xc0>
 80003c4:	3204      	adds	r2, #4
 80003c6:	d008      	beq.n	80003da <memcpy+0xe2>
 80003c8:	07d2      	lsls	r2, r2, #31
 80003ca:	bf1c      	itt	ne
 80003cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003d4:	d301      	bcc.n	80003da <memcpy+0xe2>
 80003d6:	880b      	ldrh	r3, [r1, #0]
 80003d8:	8003      	strh	r3, [r0, #0]
 80003da:	4660      	mov	r0, ip
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2a08      	cmp	r2, #8
 80003e2:	d313      	bcc.n	800040c <memcpy+0x114>
 80003e4:	078b      	lsls	r3, r1, #30
 80003e6:	d08d      	beq.n	8000304 <memcpy+0xc>
 80003e8:	f010 0303 	ands.w	r3, r0, #3
 80003ec:	d08a      	beq.n	8000304 <memcpy+0xc>
 80003ee:	f1c3 0304 	rsb	r3, r3, #4
 80003f2:	1ad2      	subs	r2, r2, r3
 80003f4:	07db      	lsls	r3, r3, #31
 80003f6:	bf1c      	itt	ne
 80003f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000400:	d380      	bcc.n	8000304 <memcpy+0xc>
 8000402:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000406:	f820 3b02 	strh.w	r3, [r0], #2
 800040a:	e77b      	b.n	8000304 <memcpy+0xc>
 800040c:	3a04      	subs	r2, #4
 800040e:	d3d9      	bcc.n	80003c4 <memcpy+0xcc>
 8000410:	3a01      	subs	r2, #1
 8000412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000416:	f800 3b01 	strb.w	r3, [r0], #1
 800041a:	d2f9      	bcs.n	8000410 <memcpy+0x118>
 800041c:	780b      	ldrb	r3, [r1, #0]
 800041e:	7003      	strb	r3, [r0, #0]
 8000420:	784b      	ldrb	r3, [r1, #1]
 8000422:	7043      	strb	r3, [r0, #1]
 8000424:	788b      	ldrb	r3, [r1, #2]
 8000426:	7083      	strb	r3, [r0, #2]
 8000428:	4660      	mov	r0, ip
 800042a:	4770      	bx	lr
 800042c:	0000      	movs	r0, r0
	...

08000430 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify)
 8000430:	b4f0      	push	{r4, r5, r6, r7}
{

  sdp->vmt = &vmt;
 8000432:	4603      	mov	r3, r0
 8000434:	4a12      	ldr	r2, [pc, #72]	; (8000480 <sdObjectInit.constprop.0+0x50>)
 8000436:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800043a:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800043c:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800043e:	2710      	movs	r7, #16
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000440:	f100 0674 	add.w	r6, r0, #116	; 0x74
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000444:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000448:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 800044a:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;   // q_top is pointer which points to frst location after buffer, so bp(which is address pointer to
 800044c:	f100 0364 	add.w	r3, r0, #100	; 0x64
  sdp->state = SD_STOP;
 8000450:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000452:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000456:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 800045a:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 800045c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8000460:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8000462:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8000464:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8000466:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 800046a:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 800046c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8000470:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8000474:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8000476:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;// q_buffer will always store the pointer to buffer which will store input data
 8000478:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;   // q_top is pointer which points to frst location after buffer, so bp(which is address pointer to
 800047a:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 800047c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800047e:	4770      	bx	lr
 8000480:	080026a0 	.word	0x080026a0
	...

08000490 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000490:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8000492:	4c27      	ldr	r4, [pc, #156]	; (8000530 <dmaStreamAllocI.part.0.constprop.0+0xa0>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000494:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 8000496:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000498:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 800049a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 800049c:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 800049e:	bf18      	it	ne
 80004a0:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 80004a2:	d001      	beq.n	80004a8 <dmaStreamAllocI.part.0.constprop.0+0x18>
}
 80004a4:	bcf0      	pop	{r4, r5, r6, r7}
 80004a6:	4770      	bx	lr
        rccEnableDMA1(true);
 80004a8:	4d22      	ldr	r5, [pc, #136]	; (8000534 <dmaStreamAllocI.part.0.constprop.0+0xa4>)
      dma.allocated_mask  |= mask;
 80004aa:	4302      	orrs	r2, r0
 80004ac:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 80004ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
      dma.streams[i].param = param;
 80004b0:	4821      	ldr	r0, [pc, #132]	; (8000538 <dmaStreamAllocI.part.0.constprop.0+0xa8>)
      dma.streams[i].func  = func;
 80004b2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
        rccEnableDMA1(true);
 80004b6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dma.streams[i].param = param;
 80004ba:	e9c4 1001 	strd	r1, r0, [r4, #4]
        rccEnableDMA1(true);
 80004be:	632a      	str	r2, [r5, #48]	; 0x30
 80004c0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004c2:	491e      	ldr	r1, [pc, #120]	; (800053c <dmaStreamAllocI.part.0.constprop.0+0xac>)
 80004c4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
        rccEnableDMA1(true);
 80004c8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dmaStreamDisable(dmastp);
 80004cc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
        rccEnableDMA1(true);
 80004d0:	652a      	str	r2, [r5, #80]	; 0x50
 80004d2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80004d4:	6832      	ldr	r2, [r6, #0]
 80004d6:	f022 021f 	bic.w	r2, r2, #31
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004da:	eb01 0080 	add.w	r0, r1, r0, lsl #2
      dmaStreamDisable(dmastp);
 80004de:	6032      	str	r2, [r6, #0]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004e0:	005c      	lsls	r4, r3, #1
      dmaStreamDisable(dmastp);
 80004e2:	6832      	ldr	r2, [r6, #0]
 80004e4:	f012 0201 	ands.w	r2, r2, #1
 80004e8:	d1fb      	bne.n	80004e2 <dmaStreamAllocI.part.0.constprop.0+0x52>
 80004ea:	4423      	add	r3, r4
 80004ec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80004f0:	243d      	movs	r4, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 80004f2:	7ad9      	ldrb	r1, [r3, #11]
      dmaStreamDisable(dmastp);
 80004f4:	7a5d      	ldrb	r5, [r3, #9]
 80004f6:	685f      	ldr	r7, [r3, #4]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80004f8:	094b      	lsrs	r3, r1, #5
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	40ac      	lsls	r4, r5
 80004fe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000502:	f101 4560 	add.w	r5, r1, #3758096384	; 0xe0000000
 8000506:	603c      	str	r4, [r7, #0]
 8000508:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800050c:	2401      	movs	r4, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800050e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000512:	f001 011f 	and.w	r1, r1, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8000516:	6032      	str	r2, [r6, #0]
 8000518:	fa04 f101 	lsl.w	r1, r4, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800051c:	22a0      	movs	r2, #160	; 0xa0
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800051e:	2421      	movs	r4, #33	; 0x21
 8000520:	6174      	str	r4, [r6, #20]
 8000522:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000526:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800052a:	6019      	str	r1, [r3, #0]
 800052c:	e7ba      	b.n	80004a4 <dmaStreamAllocI.part.0.constprop.0+0x14>
 800052e:	bf00      	nop
 8000530:	20000b5c 	.word	0x20000b5c
 8000534:	40023800 	.word	0x40023800
 8000538:	200008f8 	.word	0x200008f8
 800053c:	08002534 	.word	0x08002534

08000540 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000540:	4a02      	ldr	r2, [pc, #8]	; (800054c <notify2+0xc>)
 8000542:	68d3      	ldr	r3, [r2, #12]
 8000544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000548:	60d3      	str	r3, [r2, #12]
}
 800054a:	4770      	bx	lr
 800054c:	40004400 	.word	0x40004400

08000550 <notify4>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000550:	4a02      	ldr	r2, [pc, #8]	; (800055c <notify4+0xc>)
 8000552:	68d3      	ldr	r3, [r2, #12]
 8000554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000558:	60d3      	str	r3, [r2, #12]
}
 800055a:	4770      	bx	lr
 800055c:	40004c00 	.word	0x40004c00

08000560 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000560:	2320      	movs	r3, #32
 8000562:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <_port_irq_epilogue+0x3c>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800056e:	d102      	bne.n	8000576 <_port_irq_epilogue+0x16>
 8000570:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000574:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000576:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 800057a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800057c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000580:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000582:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <_port_irq_epilogue+0x40>)
 8000588:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800058a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800058c:	6889      	ldr	r1, [r1, #8]
 800058e:	6892      	ldr	r2, [r2, #8]
 8000590:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000592:	bf8c      	ite	hi
 8000594:	4a03      	ldrhi	r2, [pc, #12]	; (80005a4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000596:	4a04      	ldrls	r2, [pc, #16]	; (80005a8 <_port_irq_epilogue+0x48>)
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	20000928 	.word	0x20000928
 80005a4:	080002e7 	.word	0x080002e7
 80005a8:	080002f2 	.word	0x080002f2
 80005ac:	00000000 	.word	0x00000000

080005b0 <chCoreAllocAlignedI>:
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80005b2:	b410      	push	{r4}
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80005b4:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80005b8:	4249      	negs	r1, r1
 80005ba:	1a20      	subs	r0, r4, r0
 80005bc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80005be:	4298      	cmp	r0, r3
 80005c0:	d304      	bcc.n	80005cc <chCoreAllocAlignedI+0x1c>
 80005c2:	4284      	cmp	r4, r0
 80005c4:	d302      	bcc.n	80005cc <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80005c6:	bc10      	pop	{r4}
    return NULL;
  }

  ch_memcore.topmem = prev;
 80005c8:	6050      	str	r0, [r2, #4]
 80005ca:	4770      	bx	lr
    return NULL;
 80005cc:	2000      	movs	r0, #0
 80005ce:	bc10      	pop	{r4}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000b38 	.word	0x20000b38
	...

080005e0 <_stats_increase_irq>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80005e0:	2320      	movs	r3, #32
 80005e2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <_stats_increase_irq+0x1c>)
 80005e8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80005ec:	3301      	adds	r3, #1
 80005ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80005f2:	2300      	movs	r3, #0
 80005f4:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000928 	.word	0x20000928

08000600 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <chTMChainMeasurementToX+0x38>)
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000602:	6842      	ldr	r2, [r0, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8000606:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8000608:	608b      	str	r3, [r1, #8]
  tmp->n++;
 800060a:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800060e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000612:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000614:	18e4      	adds	r4, r4, r3
 8000616:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800061a:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 800061c:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 800061e:	bf88      	it	hi
 8000620:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000622:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000624:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000626:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800062a:	e9c0 3102 	strd	r3, r1, [r0, #8]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 800062e:	bc70      	pop	{r4, r5, r6}
    tmp->best = tmp->last;
 8000630:	bf38      	it	cc
 8000632:	6003      	strcc	r3, [r0, #0]
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e0001000 	.word	0xe0001000
 800063c:	00000000 	.word	0x00000000

08000640 <chTMStopMeasurementX>:
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <chTMStopMeasurementX+0x3c>)
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <chTMStopMeasurementX+0x40>)
 8000644:	6852      	ldr	r2, [r2, #4]
 8000646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  tmp->last = (now - tmp->last) - offset;
 800064a:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800064c:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800064e:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000650:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000654:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000656:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000658:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 800065a:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800065c:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800065e:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000660:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000662:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000664:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000668:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 800066a:	bf88      	it	hi
 800066c:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800066e:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000670:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000674:	bf38      	it	cc
 8000676:	6003      	strcc	r3, [r0, #0]
}
 8000678:	bc30      	pop	{r4, r5}
 800067a:	4770      	bx	lr
 800067c:	e0001000 	.word	0xe0001000
 8000680:	20000928 	.word	0x20000928
	...

08000690 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000690:	4801      	ldr	r0, [pc, #4]	; (8000698 <_stats_stop_measure_crit_isr+0x8>)
 8000692:	f7ff bfd5 	b.w	8000640 <chTMStopMeasurementX>
 8000696:	bf00      	nop
 8000698:	200009e0 	.word	0x200009e0
 800069c:	00000000 	.word	0x00000000

080006a0 <chTMStartMeasurementX>:
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <chTMStartMeasurementX+0x8>)
 80006a2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80006a4:	6083      	str	r3, [r0, #8]
}
 80006a6:	4770      	bx	lr
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	00000000 	.word	0x00000000

080006b0 <_stats_start_measure_crit_isr>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 80006b0:	4801      	ldr	r0, [pc, #4]	; (80006b8 <_stats_start_measure_crit_isr+0x8>)
 80006b2:	f7ff bff5 	b.w	80006a0 <chTMStartMeasurementX>
 80006b6:	bf00      	nop
 80006b8:	200009e0 	.word	0x200009e0
 80006bc:	00000000 	.word	0x00000000

080006c0 <wakeup>:
static void wakeup(void *p) {
 80006c0:	b510      	push	{r4, lr}
 80006c2:	4601      	mov	r1, r0
 80006c4:	2320      	movs	r3, #32
 80006c6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80006ca:	f7ff fff1 	bl	80006b0 <_stats_start_measure_crit_isr>
  switch (tp->state) {
 80006ce:	f891 3020 	ldrb.w	r3, [r1, #32]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	d80d      	bhi.n	80006f2 <wakeup+0x32>
 80006d6:	e8df f003 	tbb	[pc, r3]
 80006da:	0c1d      	.short	0x0c1d
 80006dc:	0408230c 	.word	0x0408230c
 80006e0:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 80006e2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80006e4:	6893      	ldr	r3, [r2, #8]
 80006e6:	3301      	adds	r3, #1
 80006e8:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80006ea:	e9d1 3200 	ldrd	r3, r2, [r1]
 80006ee:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80006f0:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 80006f2:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 80006f6:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80006f8:	6888      	ldr	r0, [r1, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80006fc:	624c      	str	r4, [r1, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80006fe:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8000702:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	4282      	cmp	r2, r0
 8000708:	d2fb      	bcs.n	8000702 <wakeup+0x42>
  tp->queue.prev             = cp->queue.prev;
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8000710:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8000712:	6059      	str	r1, [r3, #4]
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
 8000714:	f7ff ffbc 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000718:	2300      	movs	r3, #0
 800071a:	f383 8811 	msr	BASEPRI, r3
}
 800071e:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 8000720:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
    break;
 8000726:	e7e4      	b.n	80006f2 <wakeup+0x32>
 8000728:	20000928 	.word	0x20000928
 800072c:	00000000 	.word	0x00000000

08000730 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000730:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000732:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8000736:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800073a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	428a      	cmp	r2, r1
 8000740:	d2fb      	bcs.n	800073a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000748:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800074a:	6058      	str	r0, [r3, #4]
}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000928 	.word	0x20000928
	...

08000760 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000762:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000764:	42a0      	cmp	r0, r4
 8000766:	d021      	beq.n	80007ac <chEvtBroadcastFlagsI+0x4c>
 8000768:	4607      	mov	r7, r0
 800076a:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800076c:	2600      	movs	r6, #0
 800076e:	e004      	b.n	800077a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000770:	2a0b      	cmp	r2, #11
 8000772:	d01c      	beq.n	80007ae <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8000774:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000776:	42a7      	cmp	r7, r4
 8000778:	d018      	beq.n	80007ac <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 800077a:	68e3      	ldr	r3, [r4, #12]
 800077c:	432b      	orrs	r3, r5
 800077e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000780:	b115      	cbz	r5, 8000788 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000782:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000784:	421d      	tst	r5, r3
 8000786:	d0f5      	beq.n	8000774 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8000788:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800078c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800078e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000792:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000794:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000796:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000798:	d1ea      	bne.n	8000770 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800079a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800079c:	4213      	tst	r3, r2
 800079e:	d0e9      	beq.n	8000774 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 80007a0:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80007a2:	f7ff ffc5 	bl	8000730 <chSchReadyI>
    elp = elp->next;
 80007a6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80007a8:	42a7      	cmp	r7, r4
 80007aa:	d1e6      	bne.n	800077a <chEvtBroadcastFlagsI+0x1a>
}
 80007ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80007ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80007b0:	ea32 0303 	bics.w	r3, r2, r3
 80007b4:	d1de      	bne.n	8000774 <chEvtBroadcastFlagsI+0x14>
 80007b6:	e7f3      	b.n	80007a0 <chEvtBroadcastFlagsI+0x40>
	...

080007c0 <_idle_thread>:
}
 80007c0:	e7fe      	b.n	80007c0 <_idle_thread>
 80007c2:	bf00      	nop
	...

080007d0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80007d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 80007d4:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80007d6:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80007da:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80007dc:	05da      	lsls	r2, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 80007de:	4604      	mov	r4, r0
  uint16_t sr = u->SR;
 80007e0:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80007e2:	d479      	bmi.n	80008d8 <serve_interrupt+0x108>
 80007e4:	2320      	movs	r3, #32
 80007e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80007ea:	f7ff ff61 	bl	80006b0 <_stats_start_measure_crit_isr>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80007ee:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80007f2:	d04f      	beq.n	8000894 <serve_interrupt+0xc4>
  chnAddFlagsI(sdp, sts);
 80007f4:	1d27      	adds	r7, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80007f6:	f104 080c 	add.w	r8, r4, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80007fa:	f04f 0a00 	mov.w	sl, #0
 80007fe:	e008      	b.n	8000812 <serve_interrupt+0x42>
    if (sr & USART_SR_RXNE)
 8000800:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000802:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000806:	d41e      	bmi.n	8000846 <serve_interrupt+0x76>
    sr = u->SR;
 8000808:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800080a:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800080e:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000810:	d040      	beq.n	8000894 <serve_interrupt+0xc4>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000812:	072b      	lsls	r3, r5, #28
 8000814:	d0f4      	beq.n	8000800 <serve_interrupt+0x30>
    sts |= SD_OVERRUN_ERROR;
 8000816:	f015 0f08 	tst.w	r5, #8
 800081a:	bf0c      	ite	eq
 800081c:	2100      	moveq	r1, #0
 800081e:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000820:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8000822:	bf48      	it	mi
 8000824:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000828:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 800082a:	bf48      	it	mi
 800082c:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000830:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 8000832:	bf48      	it	mi
 8000834:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000838:	4638      	mov	r0, r7
 800083a:	f7ff ff91 	bl	8000760 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800083e:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000840:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000844:	d5e0      	bpl.n	8000808 <serve_interrupt+0x38>
  if (iqIsEmptyI(&sdp->iqueue))
 8000846:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000848:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800084c:	b39b      	cbz	r3, 80008b6 <serve_interrupt+0xe6>
  if (!iqIsFullI(iqp)) {
 800084e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000852:	4293      	cmp	r3, r2
 8000854:	d037      	beq.n	80008c6 <serve_interrupt+0xf6>
    iqp->q_counter++;
 8000856:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8000858:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800085a:	3201      	adds	r2, #1
 800085c:	ea05 0b0b 	and.w	fp, r5, fp
 8000860:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8000862:	6221      	str	r1, [r4, #32]
 8000864:	f883 b000 	strb.w	fp, [r3]
    if (iqp->q_wrptr >= iqp->q_top) // if buffer has become full.
 8000868:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800086c:	429a      	cmp	r2, r3
 800086e:	d301      	bcc.n	8000874 <serve_interrupt+0xa4>
      iqp->q_wrptr = iqp->q_buffer;
 8000870:	69a3      	ldr	r3, [r4, #24]
 8000872:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000874:	68e0      	ldr	r0, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000876:	4580      	cmp	r8, r0
 8000878:	d0c6      	beq.n	8000808 <serve_interrupt+0x38>
  tqp->next             = tp->queue.next;
 800087a:	6803      	ldr	r3, [r0, #0]
 800087c:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 800087e:	f8c3 8004 	str.w	r8, [r3, #4]
 8000882:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000886:	f7ff ff53 	bl	8000730 <chSchReadyI>
    sr = u->SR;
 800088a:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800088c:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8000890:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000892:	d1be      	bne.n	8000812 <serve_interrupt+0x42>
  _stats_stop_measure_crit_isr();
 8000894:	f7ff fefc 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000898:	2300      	movs	r3, #0
 800089a:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800089e:	f019 0f80 	tst.w	r9, #128	; 0x80
 80008a2:	d001      	beq.n	80008a8 <serve_interrupt+0xd8>
 80008a4:	062a      	lsls	r2, r5, #24
 80008a6:	d43a      	bmi.n	800091e <serve_interrupt+0x14e>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80008a8:	f019 0f40 	tst.w	r9, #64	; 0x40
 80008ac:	d001      	beq.n	80008b2 <serve_interrupt+0xe2>
 80008ae:	066b      	lsls	r3, r5, #25
 80008b0:	d425      	bmi.n	80008fe <serve_interrupt+0x12e>
}
 80008b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008b6:	2104      	movs	r1, #4
 80008b8:	4638      	mov	r0, r7
 80008ba:	f7ff ff51 	bl	8000760 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80008be:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d1c7      	bne.n	8000856 <serve_interrupt+0x86>
 80008c6:	6962      	ldr	r2, [r4, #20]
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d0c4      	beq.n	8000856 <serve_interrupt+0x86>
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	4638      	mov	r0, r7
 80008d2:	f7ff ff45 	bl	8000760 <chEvtBroadcastFlagsI>
 80008d6:	e797      	b.n	8000808 <serve_interrupt+0x38>
 80008d8:	2320      	movs	r3, #32
 80008da:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80008de:	f7ff fee7 	bl	80006b0 <_stats_start_measure_crit_isr>
 80008e2:	1d20      	adds	r0, r4, #4
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	f7ff ff3a 	bl	8000760 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80008ec:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80008f0:	6033      	str	r3, [r6, #0]
  _stats_stop_measure_crit_isr();
 80008f2:	f7ff fecd 	bl	8000690 <_stats_stop_measure_crit_isr>
 80008f6:	2300      	movs	r3, #0
 80008f8:	f383 8811 	msr	BASEPRI, r3
 80008fc:	e772      	b.n	80007e4 <serve_interrupt+0x14>
 80008fe:	2320      	movs	r3, #32
 8000900:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000904:	f7ff fed4 	bl	80006b0 <_stats_start_measure_crit_isr>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000908:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800090c:	429a      	cmp	r2, r3
 800090e:	d02f      	beq.n	8000970 <serve_interrupt+0x1a0>
  _stats_stop_measure_crit_isr();
 8000910:	f7ff febe 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000914:	2300      	movs	r3, #0
 8000916:	f383 8811 	msr	BASEPRI, r3
}
 800091a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800091e:	2320      	movs	r3, #32
 8000920:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000924:	f7ff fec4 	bl	80006b0 <_stats_start_measure_crit_isr>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000928:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800092c:	429a      	cmp	r2, r3
    b = oqGetI(&sdp->oqueue);
 800092e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000932:	d02a      	beq.n	800098a <serve_interrupt+0x1ba>
    uint8_t b;

    oqp->q_counter++;
 8000934:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8000936:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8000938:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800093a:	3201      	adds	r2, #1
 800093c:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800093e:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8000940:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8000942:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000946:	d301      	bcc.n	800094c <serve_interrupt+0x17c>
      oqp->q_rdptr = oqp->q_buffer;
 8000948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800094a:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 800094c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800094e:	4287      	cmp	r7, r0
 8000950:	d006      	beq.n	8000960 <serve_interrupt+0x190>
  tqp->next             = tp->queue.next;
 8000952:	6803      	ldr	r3, [r0, #0]
 8000954:	6323      	str	r3, [r4, #48]	; 0x30
  tp->u.rdymsg = msg;
 8000956:	2200      	movs	r2, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000958:	605f      	str	r7, [r3, #4]
 800095a:	6242      	str	r2, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800095c:	f7ff fee8 	bl	8000730 <chSchReadyI>
      u->DR = b;
 8000960:	f8c6 8004 	str.w	r8, [r6, #4]
  _stats_stop_measure_crit_isr();
 8000964:	f7ff fe94 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000968:	2300      	movs	r3, #0
 800096a:	f383 8811 	msr	BASEPRI, r3
 800096e:	e79b      	b.n	80008a8 <serve_interrupt+0xd8>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0cc      	beq.n	8000910 <serve_interrupt+0x140>
 8000976:	1d20      	adds	r0, r4, #4
 8000978:	2110      	movs	r1, #16
 800097a:	f7ff fef1 	bl	8000760 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800097e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000982:	ea09 0303 	and.w	r3, r9, r3
 8000986:	60f3      	str	r3, [r6, #12]
 8000988:	e7c2      	b.n	8000910 <serve_interrupt+0x140>
  if (!oqIsEmptyI(oqp)) {
 800098a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800098c:	2a00      	cmp	r2, #0
 800098e:	d0d1      	beq.n	8000934 <serve_interrupt+0x164>
 8000990:	2108      	movs	r1, #8
 8000992:	1d20      	adds	r0, r4, #4
 8000994:	f7ff fee4 	bl	8000760 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8000998:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800099c:	ea09 0303 	and.w	r3, r9, r3
 80009a0:	60f3      	str	r3, [r6, #12]
 80009a2:	e7df      	b.n	8000964 <serve_interrupt+0x194>
	...

080009b0 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80009b0:	f011 0f0c 	tst.w	r1, #12
 80009b4:	d100      	bne.n	80009b8 <spi_lld_serve_tx_interrupt+0x8>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 80009b6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80009ba:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <spi_lld_serve_tx_interrupt+0x14>)
 80009bc:	4a02      	ldr	r2, [pc, #8]	; (80009c8 <spi_lld_serve_tx_interrupt+0x18>)
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c0:	e7fe      	b.n	80009c0 <spi_lld_serve_tx_interrupt+0x10>
 80009c2:	bf00      	nop
 80009c4:	20000928 	.word	0x20000928
 80009c8:	080023c4 	.word	0x080023c4
 80009cc:	00000000 	.word	0x00000000

080009d0 <spi_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80009d0:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80009d4:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80009d6:	d153      	bne.n	8000a80 <spi_lld_serve_rx_interrupt+0xb0>
  if (spip->config->circular) {
 80009d8:	460d      	mov	r5, r1
 80009da:	6841      	ldr	r1, [r0, #4]
 80009dc:	780b      	ldrb	r3, [r1, #0]
 80009de:	4604      	mov	r4, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d137      	bne.n	8000a54 <spi_lld_serve_rx_interrupt+0x84>
    dmaStreamDisable(spip->dmatx);
 80009e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80009e6:	682a      	ldr	r2, [r5, #0]
 80009e8:	6813      	ldr	r3, [r2, #0]
 80009ea:	f023 031f 	bic.w	r3, r3, #31
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	6813      	ldr	r3, [r2, #0]
 80009f2:	07d8      	lsls	r0, r3, #31
 80009f4:	d4fc      	bmi.n	80009f0 <spi_lld_serve_rx_interrupt+0x20>
 80009f6:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 80009f8:	6a20      	ldr	r0, [r4, #32]
    dmaStreamDisable(spip->dmatx);
 80009fa:	686d      	ldr	r5, [r5, #4]
 80009fc:	233d      	movs	r3, #61	; 0x3d
 80009fe:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 8000a00:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 8000a02:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f023 031f 	bic.w	r3, r3, #31
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	6813      	ldr	r3, [r2, #0]
 8000a0e:	07db      	lsls	r3, r3, #31
 8000a10:	d4fc      	bmi.n	8000a0c <spi_lld_serve_rx_interrupt+0x3c>
 8000a12:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 8000a14:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 8000a16:	6841      	ldr	r1, [r0, #4]
 8000a18:	233d      	movs	r3, #61	; 0x3d
 8000a1a:	40ab      	lsls	r3, r5
 8000a1c:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d033      	beq.n	8000a8a <spi_lld_serve_rx_interrupt+0xba>
 8000a22:	2304      	movs	r3, #4
 8000a24:	7023      	strb	r3, [r4, #0]
 8000a26:	4620      	mov	r0, r4
 8000a28:	4790      	blx	r2
 8000a2a:	7823      	ldrb	r3, [r4, #0]
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d02c      	beq.n	8000a8a <spi_lld_serve_rx_interrupt+0xba>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000a30:	2320      	movs	r3, #32
 8000a32:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000a36:	f7ff fe3b 	bl	80006b0 <_stats_start_measure_crit_isr>
  if (*trp != NULL) {
 8000a3a:	68a0      	ldr	r0, [r4, #8]
 8000a3c:	b120      	cbz	r0, 8000a48 <spi_lld_serve_rx_interrupt+0x78>
    *trp = NULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60a3      	str	r3, [r4, #8]
    tp->u.rdymsg = msg;
 8000a42:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000a44:	f7ff fe74 	bl	8000730 <chSchReadyI>
  _stats_stop_measure_crit_isr();
 8000a48:	f7ff fe22 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f383 8811 	msr	BASEPRI, r3
}
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8000a54:	06eb      	lsls	r3, r5, #27
 8000a56:	d503      	bpl.n	8000a60 <spi_lld_serve_rx_interrupt+0x90>
      _spi_isr_half_code(spip);
 8000a58:	684b      	ldr	r3, [r1, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f9      	beq.n	8000a52 <spi_lld_serve_rx_interrupt+0x82>
 8000a5e:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8000a60:	06ad      	lsls	r5, r5, #26
 8000a62:	d5f6      	bpl.n	8000a52 <spi_lld_serve_rx_interrupt+0x82>
      _spi_isr_full_code(spip);
 8000a64:	6863      	ldr	r3, [r4, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f2      	beq.n	8000a52 <spi_lld_serve_rx_interrupt+0x82>
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	7022      	strb	r2, [r4, #0]
 8000a70:	4620      	mov	r0, r4
 8000a72:	4798      	blx	r3
 8000a74:	7823      	ldrb	r3, [r4, #0]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d1eb      	bne.n	8000a52 <spi_lld_serve_rx_interrupt+0x82>
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	7023      	strb	r3, [r4, #0]
}
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <spi_lld_serve_rx_interrupt+0xc0>)
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <spi_lld_serve_rx_interrupt+0xc4>)
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a88:	e7fe      	b.n	8000a88 <spi_lld_serve_rx_interrupt+0xb8>
    _spi_isr_code(spip);
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	7023      	strb	r3, [r4, #0]
 8000a8e:	e7cf      	b.n	8000a30 <spi_lld_serve_rx_interrupt+0x60>
 8000a90:	20000928 	.word	0x20000928
 8000a94:	080023c4 	.word	0x080023c4
	...

08000aa0 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000aa0:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 8000aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000aa8:	4666      	mov	r6, ip
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000aaa:	f3c2 05c1 	ubfx	r5, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000aae:	09d7      	lsrs	r7, r2, #7
  uint32_t bit     = 0;
 8000ab0:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000ab2:	f04f 090f 	mov.w	r9, #15
      m1 = 1 << bit;
 8000ab6:	f04f 0801 	mov.w	r8, #1
      m2 = 3 << (bit * 2);
 8000aba:	f04f 0e03 	mov.w	lr, #3
 8000abe:	e012      	b.n	8000ae6 <_pal_lld_setgroupmode+0x46>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000ac0:	f8d0 b000 	ldr.w	fp, [r0]
 8000ac4:	ea03 030b 	and.w	r3, r3, fp
 8000ac8:	4333      	orrs	r3, r6
        if (bit < 8)
 8000aca:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000acc:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000ace:	d83d      	bhi.n	8000b4c <_pal_lld_setgroupmode+0xac>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000ad0:	6a03      	ldr	r3, [r0, #32]
 8000ad2:	ea23 0202 	bic.w	r2, r3, r2
 8000ad6:	ea42 020a 	orr.w	r2, r2, sl
 8000ada:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000adc:	0849      	lsrs	r1, r1, #1
 8000ade:	d033      	beq.n	8000b48 <_pal_lld_setgroupmode+0xa8>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
 8000ae0:	00ad      	lsls	r5, r5, #2
    pupdr <<= 2;
    moder <<= 2;
 8000ae2:	00b6      	lsls	r6, r6, #2
    bit++;
 8000ae4:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 8000ae6:	07cb      	lsls	r3, r1, #31
 8000ae8:	d5f8      	bpl.n	8000adc <_pal_lld_setgroupmode+0x3c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000aea:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000aec:	fa08 f204 	lsl.w	r2, r8, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000af0:	ea23 0302 	bic.w	r3, r3, r2
 8000af4:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000af6:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 8000af8:	0063      	lsls	r3, r4, #1
 8000afa:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000afe:	ea22 0203 	bic.w	r2, r2, r3
 8000b02:	432a      	orrs	r2, r5
 8000b04:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000b06:	f8d0 a00c 	ldr.w	sl, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000b0a:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000b0e:	ea2a 0a03 	bic.w	sl, sl, r3
      altrmask = altr << ((bit & 7) * 4);
 8000b12:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000b14:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000b18:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000b1c:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000b20:	fa07 fa02 	lsl.w	sl, r7, r2
      m4 = 15 << ((bit & 7) * 4);
 8000b24:	fa09 f202 	lsl.w	r2, r9, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000b28:	d1ca      	bne.n	8000ac0 <_pal_lld_setgroupmode+0x20>
        if (bit < 8)
 8000b2a:	2c07      	cmp	r4, #7
 8000b2c:	d815      	bhi.n	8000b5a <_pal_lld_setgroupmode+0xba>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000b2e:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8000b32:	ea2b 0202 	bic.w	r2, fp, r2
 8000b36:	ea42 020a 	orr.w	r2, r2, sl
 8000b3a:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000b3c:	6802      	ldr	r2, [r0, #0]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	4333      	orrs	r3, r6
    if (!mask)
 8000b42:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000b44:	6003      	str	r3, [r0, #0]
    if (!mask)
 8000b46:	d1cb      	bne.n	8000ae0 <_pal_lld_setgroupmode+0x40>
  }
}
 8000b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b4e:	ea23 0202 	bic.w	r2, r3, r2
 8000b52:	ea42 020a 	orr.w	r2, r2, sl
 8000b56:	6242      	str	r2, [r0, #36]	; 0x24
 8000b58:	e7c0      	b.n	8000adc <_pal_lld_setgroupmode+0x3c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000b5a:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8000b5e:	ea2b 0202 	bic.w	r2, fp, r2
 8000b62:	ea42 020a 	orr.w	r2, r2, sl
 8000b66:	6242      	str	r2, [r0, #36]	; 0x24
 8000b68:	e7e8      	b.n	8000b3c <_pal_lld_setgroupmode+0x9c>
 8000b6a:	bf00      	nop
 8000b6c:	0000      	movs	r0, r0
	...

08000b70 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b70:	4a34      	ldr	r2, [pc, #208]	; (8000c44 <stm32_clock_init+0xd4>)
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000b72:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <stm32_clock_init+0xd8>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8000b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b7c:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8000b7e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000b88:	6813      	ldr	r3, [r2, #0]
 8000b8a:	0799      	lsls	r1, r3, #30
 8000b8c:	d5fc      	bpl.n	8000b88 <stm32_clock_init+0x18>
  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
 // RCC->CFGR |= RCC_CFGR_SW_HSE;//HSE selected
//  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8000b8e:	6893      	ldr	r3, [r2, #8]
 while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8000b90:	492c      	ldr	r1, [pc, #176]	; (8000c44 <stm32_clock_init+0xd4>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8000b92:	f023 0303 	bic.w	r3, r3, #3
 8000b96:	6093      	str	r3, [r2, #8]
 while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8000b98:	688b      	ldr	r3, [r1, #8]
 8000b9a:	f013 030c 	ands.w	r3, r3, #12
 8000b9e:	d1fb      	bne.n	8000b98 <stm32_clock_init+0x28>
                                      /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000ba0:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000ba2:	4828      	ldr	r0, [pc, #160]	; (8000c44 <stm32_clock_init+0xd4>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000ba4:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 8000ba8:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000baa:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8000bac:	680b      	ldr	r3, [r1, #0]
 8000bae:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000bb2:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000bb4:	6803      	ldr	r3, [r0, #0]
 8000bb6:	039b      	lsls	r3, r3, #14
 8000bb8:	d5fc      	bpl.n	8000bb4 <stm32_clock_init+0x44>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000bba:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <stm32_clock_init+0xd4>)
  RCC->CSR |= RCC_CSR_LSION;
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000bc4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000bc6:	0799      	lsls	r1, r3, #30
 8000bc8:	d5fc      	bpl.n	8000bc4 <stm32_clock_init+0x54>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <stm32_clock_init+0xdc>)
 8000bcc:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000bce:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000bd0:	491d      	ldr	r1, [pc, #116]	; (8000c48 <stm32_clock_init+0xd8>)
  RCC->CR |= RCC_CR_PLLON;
 8000bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bd6:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000bd8:	684b      	ldr	r3, [r1, #4]
 8000bda:	045a      	lsls	r2, r3, #17
 8000bdc:	d5fc      	bpl.n	8000bd8 <stm32_clock_init+0x68>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000bde:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <stm32_clock_init+0xd4>)
 8000be0:	6813      	ldr	r3, [r2, #0]
 8000be2:	019b      	lsls	r3, r3, #6
 8000be4:	d5fc      	bpl.n	8000be0 <stm32_clock_init+0x70>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <stm32_clock_init+0xe0>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000be8:	491a      	ldr	r1, [pc, #104]	; (8000c54 <stm32_clock_init+0xe4>)
 8000bea:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <stm32_clock_init+0xe8>)
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d01d      	beq.n	8000c30 <stm32_clock_init+0xc0>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <stm32_clock_init+0xec>)
 8000bf6:	f240 7201 	movw	r2, #1793	; 0x701
 8000bfa:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8000bfc:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <stm32_clock_init+0xec>)
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d1fa      	bne.n	8000bfe <stm32_clock_init+0x8e>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <stm32_clock_init+0xd4>)
 8000c0a:	6893      	ldr	r3, [r2, #8]
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000c12:	6893      	ldr	r3, [r2, #8]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d1fa      	bne.n	8000c12 <stm32_clock_init+0xa2>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8000c1c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c22:	6453      	str	r3, [r2, #68]	; 0x44
 8000c24:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2a:	6653      	str	r3, [r2, #100]	; 0x64
 8000c2c:	6e53      	ldr	r3, [r2, #100]	; 0x64
}
 8000c2e:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <stm32_clock_init+0xf0>)
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <stm32_clock_init+0xf4>)
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d1dc      	bne.n	8000bf4 <stm32_clock_init+0x84>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <stm32_clock_init+0xec>)
 8000c3c:	f240 1201 	movw	r2, #257	; 0x101
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	e7db      	b.n	8000bfc <stm32_clock_init+0x8c>
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000
 8000c4c:	07412008 	.word	0x07412008
 8000c50:	e0042000 	.word	0xe0042000
 8000c54:	38880000 	.word	0x38880000
 8000c58:	20006411 	.word	0x20006411
 8000c5c:	40023c00 	.word	0x40023c00
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	410fc241 	.word	0x410fc241
	...

08000c70 <_ctl>:
}
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr
	...

08000c80 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 8000c80:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <chSchWakeupS.constprop.0+0x70>)
  if (ntp->prio <= otp->prio) {
 8000c82:	6881      	ldr	r1, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000c84:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000c86:	6995      	ldr	r5, [r2, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000c88:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 8000c8a:	68a8      	ldr	r0, [r5, #8]
  ntp->u.rdymsg = msg;
 8000c8c:	2300      	movs	r3, #0
  if (ntp->prio <= otp->prio) {
 8000c8e:	4281      	cmp	r1, r0
  ntp->u.rdymsg = msg;
 8000c90:	6263      	str	r3, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8000c92:	d80c      	bhi.n	8000cae <chSchWakeupS.constprop.0+0x2e>
  tp->state = CH_STATE_READY;
 8000c94:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000c98:	4613      	mov	r3, r2
    cp = cp->queue.next;
 8000c9a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d9fb      	bls.n	8000c9a <chSchWakeupS.constprop.0+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8000ca8:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000caa:	605c      	str	r4, [r3, #4]
}
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
  tp->state = CH_STATE_READY;
 8000cae:	f885 3020 	strb.w	r3, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000cb2:	4613      	mov	r3, r2
    cp = cp->queue.next;
 8000cb4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8000cb6:	6899      	ldr	r1, [r3, #8]
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	d3fb      	bcc.n	8000cb4 <chSchWakeupS.constprop.0+0x34>
  tp->queue.prev             = cp->queue.prev;
 8000cbc:	6859      	ldr	r1, [r3, #4]
 8000cbe:	6069      	str	r1, [r5, #4]
    ntp->state = CH_STATE_CURRENT;
 8000cc0:	2001      	movs	r0, #1
  tp->queue.next             = cp;
 8000cc2:	602b      	str	r3, [r5, #0]
  tp->queue.prev->queue.next = tp;
 8000cc4:	600d      	str	r5, [r1, #0]
  cp->queue.prev             = tp;
 8000cc6:	605d      	str	r5, [r3, #4]
    ntp->state = CH_STATE_CURRENT;
 8000cc8:	f884 0020 	strb.w	r0, [r4, #32]
  ch.kernel_stats.n_ctxswc++;
 8000ccc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    currp = ntp;
 8000cd0:	6194      	str	r4, [r2, #24]
 8000cd2:	4403      	add	r3, r0
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000cd4:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8000cd8:	f105 0048 	add.w	r0, r5, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 8000cdc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000ce0:	f7ff fc8e 	bl	8000600 <chTMChainMeasurementToX>
    chSysSwitch(ntp, otp);
 8000ce4:	4629      	mov	r1, r5
 8000ce6:	4620      	mov	r0, r4
}
 8000ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chSysSwitch(ntp, otp);
 8000cec:	f7ff bae8 	b.w	80002c0 <_port_switch>
 8000cf0:	20000928 	.word	0x20000928
	...

08000d00 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000d00:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000d02:	4c0e      	ldr	r4, [pc, #56]	; (8000d3c <chSchGoSleepS+0x3c>)
 8000d04:	69a5      	ldr	r5, [r4, #24]
  thread_t *tp = tqp->next;
 8000d06:	6821      	ldr	r1, [r4, #0]
  otp->state = newstate;
 8000d08:	f885 0020 	strb.w	r0, [r5, #32]
  tqp->next             = tp->queue.next;
 8000d0c:	680b      	ldr	r3, [r1, #0]
 8000d0e:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8000d10:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000d12:	605c      	str	r4, [r3, #4]
 8000d14:	f881 2020 	strb.w	r2, [r1, #32]
  ch.kernel_stats.n_ctxswc++;
 8000d18:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000d1c:	61a1      	str	r1, [r4, #24]
 8000d1e:	4413      	add	r3, r2
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000d20:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8000d24:	3148      	adds	r1, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 8000d26:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000d2a:	f7ff fc69 	bl	8000600 <chTMChainMeasurementToX>
  chSysSwitch(currp, otp);
 8000d2e:	69a0      	ldr	r0, [r4, #24]
 8000d30:	4629      	mov	r1, r5
}
 8000d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8000d36:	f7ff bac3 	b.w	80002c0 <_port_switch>
 8000d3a:	bf00      	nop
 8000d3c:	20000928 	.word	0x20000928

08000d40 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8000d42:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000d44:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8000d46:	d049      	beq.n	8000ddc <chSchGoSleepTimeoutS+0x9c>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000d48:	4c3f      	ldr	r4, [pc, #252]	; (8000e48 <chSchGoSleepTimeoutS+0x108>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8000d4a:	4f40      	ldr	r7, [pc, #256]	; (8000e4c <chSchGoSleepTimeoutS+0x10c>)
  vtp->par = par;
 8000d4c:	69a3      	ldr	r3, [r4, #24]
 8000d4e:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000d50:	4626      	mov	r6, r4
 8000d52:	2902      	cmp	r1, #2
 8000d54:	f856 3f1c 	ldr.w	r3, [r6, #28]!
 8000d58:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000d5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d5e:	bf38      	it	cc
 8000d60:	2102      	movcc	r1, #2
 8000d62:	42b3      	cmp	r3, r6
 8000d64:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8000d66:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000d68:	d05b      	beq.n	8000e22 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8000d6a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000d6c:	1bd2      	subs	r2, r2, r7
 8000d6e:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000d70:	d32e      	bcc.n	8000dd0 <chSchGoSleepTimeoutS+0x90>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000d72:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8000d78:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000d7a:	4291      	cmp	r1, r2
 8000d7c:	d904      	bls.n	8000d88 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8000d7e:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8000d80:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	428a      	cmp	r2, r1
 8000d86:	d3fa      	bcc.n	8000d7e <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8000d8c:	af01      	add	r7, sp, #4
  vtp->next = p;
 8000d8e:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8000d90:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8000d92:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8000d94:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000d9a:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 8000d9e:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000da0:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000da2:	4628      	mov	r0, r5
 8000da4:	f7ff ffac 	bl	8000d00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000da8:	9b04      	ldr	r3, [sp, #16]
 8000daa:	b16b      	cbz	r3, 8000dc8 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000dac:	69e3      	ldr	r3, [r4, #28]
 8000dae:	42bb      	cmp	r3, r7
 8000db0:	d01b      	beq.n	8000dea <chSchGoSleepTimeoutS+0xaa>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000db2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000db6:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000db8:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000dba:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8000dbc:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000dbe:	d003      	beq.n	8000dc8 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	9903      	ldr	r1, [sp, #12]
 8000dc4:	440a      	add	r2, r1
 8000dc6:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8000dc8:	69a3      	ldr	r3, [r4, #24]
}
 8000dca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000dcc:	b007      	add	sp, #28
 8000dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	4291      	cmp	r1, r2
 8000dd4:	d2d1      	bcs.n	8000d7a <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 8000dd6:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000dd8:	6347      	str	r7, [r0, #52]	; 0x34
 8000dda:	e7ce      	b.n	8000d7a <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 8000ddc:	4c1a      	ldr	r4, [pc, #104]	; (8000e48 <chSchGoSleepTimeoutS+0x108>)
 8000dde:	f7ff ff8f 	bl	8000d00 <chSchGoSleepS>
  return currp->u.rdymsg;
 8000de2:	69a3      	ldr	r3, [r4, #24]
}
 8000de4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000de6:	b007      	add	sp, #28
 8000de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000dea:	9b01      	ldr	r3, [sp, #4]
 8000dec:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8000dee:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000df0:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000df2:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8000df4:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000df6:	d022      	beq.n	8000e3e <chSchGoSleepTimeoutS+0xfe>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8000dfc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8000dfe:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8000e00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000e08:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000e0a:	4282      	cmp	r2, r0
 8000e0c:	d9dc      	bls.n	8000dc8 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000e0e:	1acb      	subs	r3, r1, r3
 8000e10:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000e12:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000e14:	bf98      	it	ls
 8000e16:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8000e1c:	440a      	add	r2, r1
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e20:	e7d2      	b.n	8000dc8 <chSchGoSleepTimeoutS+0x88>
 8000e22:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8000e24:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8000e26:	62a2      	str	r2, [r4, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000e28:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8000e2c:	e9c4 7707 	strd	r7, r7, [r4, #28]
      vtp->delta = delay;
 8000e30:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8000e32:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000e34:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000e36:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8000e38:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000e3a:	60c3      	str	r3, [r0, #12]
 8000e3c:	e7b1      	b.n	8000da2 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 8000e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e42:	60da      	str	r2, [r3, #12]
    return;
 8000e44:	e7c0      	b.n	8000dc8 <chSchGoSleepTimeoutS+0x88>
 8000e46:	bf00      	nop
 8000e48:	20000928 	.word	0x20000928
 8000e4c:	080006c1 	.word	0x080006c1

08000e50 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8000e50:	b161      	cbz	r1, 8000e6c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8000e54:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8000e56:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8000e58:	6844      	ldr	r4, [r0, #4]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000e60:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8000e62:	6022      	str	r2, [r4, #0]
}
 8000e64:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8000e66:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000e68:	f7ff bf6a 	b.w	8000d40 <chSchGoSleepTimeoutS>
}
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000928 	.word	0x20000928
	...

08000e80 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000e80:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8000e84:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000e86:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f383 8811 	msr	BASEPRI, r3
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
	...

08000ea0 <_stats_stop_measure_crit_thd>:
  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000ea0:	4801      	ldr	r0, [pc, #4]	; (8000ea8 <_stats_stop_measure_crit_thd+0x8>)
 8000ea2:	f7ff bbcd 	b.w	8000640 <chTMStopMeasurementX>
 8000ea6:	bf00      	nop
 8000ea8:	200009c8 	.word	0x200009c8
 8000eac:	00000000 	.word	0x00000000

08000eb0 <_stats_start_measure_crit_thd>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <_stats_start_measure_crit_thd+0x8>)
 8000eb2:	f7ff bbf5 	b.w	80006a0 <chTMStartMeasurementX>
 8000eb6:	bf00      	nop
 8000eb8:	200009c8 	.word	0x200009c8
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <spiSend.constprop.0>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	2320      	movs	r3, #32
 8000ec6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000eca:	f7ff fff1 	bl	8000eb0 <_stats_start_measure_crit_thd>
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartSendI(spip, n, txbuf);
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <spiSend.constprop.0+0x5c>)
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8000ed0:	4f13      	ldr	r7, [pc, #76]	; (8000f20 <spiSend.constprop.0+0x60>)
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000ed2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000ed4:	e9d3 4208 	ldrd	r4, r2, [r3, #32]
 8000ed8:	2003      	movs	r0, #3
 8000eda:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8000edc:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000ede:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8000ee0:	60e7      	str	r7, [r4, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000ee2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8000ee6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8000ee8:	6065      	str	r5, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8000eea:	6027      	str	r7, [r4, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000eec:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8000eee:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000ef0:	6016      	str	r6, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8000ef2:	6821      	ldr	r1, [r4, #0]
  return ch.rlist.current;
 8000ef4:	4d0b      	ldr	r5, [pc, #44]	; (8000f24 <spiSend.constprop.0+0x64>)
 8000ef6:	f041 0101 	orr.w	r1, r1, #1
 8000efa:	6021      	str	r1, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8000efc:	6811      	ldr	r1, [r2, #0]
 8000efe:	69ac      	ldr	r4, [r5, #24]
 8000f00:	f041 0101 	orr.w	r1, r1, #1
 8000f04:	6011      	str	r1, [r2, #0]
  *trp = tp;
 8000f06:	f843 4f08 	str.w	r4, [r3, #8]!
  tp->u.wttrp = trp;
 8000f0a:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000f0c:	f7ff fef8 	bl	8000d00 <chSchGoSleepS>
  _stats_stop_measure_crit_thd();
 8000f10:	f7ff ffc6 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8000f14:	2300      	movs	r3, #0
 8000f16:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8000f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f1c:	200008f8 	.word	0x200008f8
 8000f20:	20000be0 	.word	0x20000be0
 8000f24:	20000928 	.word	0x20000928
	...

08000f30 <spiReceive.constprop.0>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	4605      	mov	r5, r0
 8000f34:	2320      	movs	r3, #32
 8000f36:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000f3a:	f7ff ffb9 	bl	8000eb0 <_stats_start_measure_crit_thd>
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <spiReceive.constprop.0+0x5c>)

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8000f40:	4f13      	ldr	r7, [pc, #76]	; (8000f90 <spiReceive.constprop.0+0x60>)
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8000f42:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8000f44:	e9d3 4208 	ldrd	r4, r2, [r3, #32]
 8000f48:	2003      	movs	r0, #3
 8000f4a:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000f4c:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8000f4e:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000f50:	60e1      	str	r1, [r4, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8000f52:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8000f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8000f58:	6065      	str	r5, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8000f5a:	6026      	str	r6, [r4, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8000f5c:	60d7      	str	r7, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8000f5e:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8000f60:	6011      	str	r1, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8000f62:	6821      	ldr	r1, [r4, #0]
 8000f64:	4d0b      	ldr	r5, [pc, #44]	; (8000f94 <spiReceive.constprop.0+0x64>)
 8000f66:	f041 0101 	orr.w	r1, r1, #1
 8000f6a:	6021      	str	r1, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8000f6c:	6811      	ldr	r1, [r2, #0]
 8000f6e:	69ac      	ldr	r4, [r5, #24]
 8000f70:	f041 0101 	orr.w	r1, r1, #1
 8000f74:	6011      	str	r1, [r2, #0]
  *trp = tp;
 8000f76:	f843 4f08 	str.w	r4, [r3, #8]!
  tp->u.wttrp = trp;
 8000f7a:	6263      	str	r3, [r4, #36]	; 0x24
 8000f7c:	f7ff fec0 	bl	8000d00 <chSchGoSleepS>
  _stats_stop_measure_crit_thd();
 8000f80:	f7ff ff8e 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8000f84:	2300      	movs	r3, #0
 8000f86:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8000f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8c:	200008f8 	.word	0x200008f8
 8000f90:	0800260a 	.word	0x0800260a
 8000f94:	20000928 	.word	0x20000928
	...

08000fa0 <ReadSR>:
    SPI2_Send(tx_buf,2);
    cs_set();

}
uint8_t ReadSR(uint8_t SR_address)
{
 8000fa0:	b530      	push	{r4, r5, lr}
    uint8_t RSR[1] = {0};
    cs_reset();
 8000fa2:	4c0b      	ldr	r4, [pc, #44]	; (8000fd0 <ReadSR+0x30>)
    tx_buf[0] =  SR_address;
 8000fa4:	490b      	ldr	r1, [pc, #44]	; (8000fd4 <ReadSR+0x34>)
{
 8000fa6:	b083      	sub	sp, #12
    uint8_t RSR[1] = {0};
 8000fa8:	2200      	movs	r2, #0
    cs_reset();
 8000faa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
{
 8000fae:	4603      	mov	r3, r0
    uint8_t RSR[1] = {0};
 8000fb0:	f88d 2004 	strb.w	r2, [sp, #4]
  spiSend(&SPID2, cnt, dt);
 8000fb4:	2001      	movs	r0, #1
    cs_reset();
 8000fb6:	8365      	strh	r5, [r4, #26]
    tx_buf[0] =  SR_address;
 8000fb8:	700b      	strb	r3, [r1, #0]
  spiSend(&SPID2, cnt, dt);
 8000fba:	f7ff ff81 	bl	8000ec0 <spiSend.constprop.0>
  spiReceive(&SPID2, cnt, dt);
 8000fbe:	a901      	add	r1, sp, #4
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff ffb5 	bl	8000f30 <spiReceive.constprop.0>
    SPI2_Send(tx_buf,1);
    SPI2_Recv(RSR,1);
    cs_set();
 8000fc6:	8325      	strh	r5, [r4, #24]
    return RSR[0];
}
 8000fc8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000fcc:	b003      	add	sp, #12
 8000fce:	bd30      	pop	{r4, r5, pc}
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	200014b8 	.word	0x200014b8
	...

08000fe0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000fe0:	b568      	push	{r3, r5, r6, lr}
 8000fe2:	4605      	mov	r5, r0
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000fea:	f7ff ff61 	bl	8000eb0 <_stats_start_measure_crit_thd>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <chCoreAllocFromTop+0x44>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000ff0:	e9d0 3600 	ldrd	r3, r6, [r0]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000ff4:	4249      	negs	r1, r1
 8000ff6:	1b75      	subs	r5, r6, r5
 8000ff8:	400d      	ands	r5, r1
  prev = p - offset;
 8000ffa:	1aaa      	subs	r2, r5, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d309      	bcc.n	8001014 <chCoreAllocFromTop+0x34>
 8001000:	4296      	cmp	r6, r2
 8001002:	d307      	bcc.n	8001014 <chCoreAllocFromTop+0x34>
  ch_memcore.topmem = prev;
 8001004:	6042      	str	r2, [r0, #4]
  _stats_stop_measure_crit_thd();
 8001006:	f7ff ff4b 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 800100a:	2300      	movs	r3, #0
 800100c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8001010:	4628      	mov	r0, r5
 8001012:	bd68      	pop	{r3, r5, r6, pc}
 8001014:	f7ff ff44 	bl	8000ea0 <_stats_stop_measure_crit_thd>
    return NULL;
 8001018:	2500      	movs	r5, #0
 800101a:	2300      	movs	r3, #0
 800101c:	f383 8811 	msr	BASEPRI, r3
}
 8001020:	4628      	mov	r0, r5
 8001022:	bd68      	pop	{r3, r5, r6, pc}
 8001024:	20000b38 	.word	0x20000b38
	...

08001030 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001030:	b508      	push	{r3, lr}
 8001032:	4601      	mov	r1, r0
 8001034:	2320      	movs	r3, #32
 8001036:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800103a:	f7ff ff39 	bl	8000eb0 <_stats_start_measure_crit_thd>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800103e:	2008      	movs	r0, #8
 8001040:	f7ff fe7e 	bl	8000d40 <chSchGoSleepTimeoutS>
  _stats_stop_measure_crit_thd();
 8001044:	f7ff ff2c 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8001048:	2300      	movs	r3, #0
 800104a:	f383 8811 	msr	BASEPRI, r3
}
 800104e:	bd08      	pop	{r3, pc}

08001050 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001054:	b085      	sub	sp, #20
 8001056:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800105a:	69c7      	ldr	r7, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 800105c:	4604      	mov	r4, r0
 800105e:	f04f 0920 	mov.w	r9, #32
 8001062:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8001066:	f7ff ff23 	bl	8000eb0 <_stats_start_measure_crit_thd>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 800106a:	b38a      	cbz	r2, 80010d0 <oqWriteTimeout+0x80>
 800106c:	9d03      	ldr	r5, [sp, #12]
 800106e:	460e      	mov	r6, r1
 8001070:	f04f 0a00 	mov.w	sl, #0
 8001074:	4688      	mov	r8, r1
  if (n > oqGetEmptyI(oqp)) {
 8001076:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001078:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 800107c:	429d      	cmp	r5, r3
    n = oqGetEmptyI(oqp);
 800107e:	bf8c      	ite	hi
 8001080:	68a6      	ldrhi	r6, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8001082:	462e      	movls	r6, r5
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001084:	1a12      	subs	r2, r2, r0
  if (n < s1) {
 8001086:	42b2      	cmp	r2, r6
 8001088:	d840      	bhi.n	800110c <oqWriteTimeout+0xbc>
  else if (n > s1) {
 800108a:	d22b      	bcs.n	80010e4 <oqWriteTimeout+0x94>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800108c:	4641      	mov	r1, r8
    s2 = n - s1;
 800108e:	eba6 0b02 	sub.w	fp, r6, r2
 8001092:	9201      	str	r2, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001094:	f7ff f930 	bl	80002f8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001098:	9a01      	ldr	r2, [sp, #4]
 800109a:	68e0      	ldr	r0, [r4, #12]
 800109c:	eb08 0102 	add.w	r1, r8, r2
 80010a0:	465a      	mov	r2, fp
 80010a2:	f7ff f929 	bl	80002f8 <memcpy>
  oqp->q_counter -= n;
 80010a6:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 80010a8:	68e2      	ldr	r2, [r4, #12]
  oqp->q_counter -= n;
 80010aa:	1b9b      	subs	r3, r3, r6
    oqp->q_wrptr = oqp->q_buffer + s2;
 80010ac:	445a      	add	r2, fp
 80010ae:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80010b0:	60a3      	str	r3, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80010b2:	b10f      	cbz	r7, 80010b8 <oqWriteTimeout+0x68>
        nfy(oqp);
 80010b4:	4620      	mov	r0, r4
 80010b6:	47b8      	blx	r7
  _stats_stop_measure_crit_thd();
 80010b8:	f7ff fef2 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 80010bc:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80010c0:	1bad      	subs	r5, r5, r6
      bp += done;
 80010c2:	44b0      	add	r8, r6
 80010c4:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 80010c8:	f7ff fef2 	bl	8000eb0 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d1d2      	bne.n	8001076 <oqWriteTimeout+0x26>
  if (n > oqGetEmptyI(oqp)) {
 80010d0:	9d03      	ldr	r5, [sp, #12]
  _stats_stop_measure_crit_thd();
 80010d2:	f7ff fee5 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 80010d6:	2300      	movs	r3, #0
 80010d8:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80010dc:	4628      	mov	r0, r5
 80010de:	b005      	add	sp, #20
 80010e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80010e4:	4632      	mov	r2, r6
 80010e6:	4641      	mov	r1, r8
 80010e8:	f7ff f906 	bl	80002f8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80010ec:	68e3      	ldr	r3, [r4, #12]
 80010ee:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80010f0:	68a3      	ldr	r3, [r4, #8]
 80010f2:	1b9b      	subs	r3, r3, r6
 80010f4:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 80010f6:	2e00      	cmp	r6, #0
 80010f8:	d1db      	bne.n	80010b2 <oqWriteTimeout+0x62>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80010fa:	9902      	ldr	r1, [sp, #8]
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff fea7 	bl	8000e50 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001102:	2800      	cmp	r0, #0
 8001104:	d0b7      	beq.n	8001076 <oqWriteTimeout+0x26>
 8001106:	9b03      	ldr	r3, [sp, #12]
 8001108:	1b5d      	subs	r5, r3, r5
 800110a:	e7e2      	b.n	80010d2 <oqWriteTimeout+0x82>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800110c:	4632      	mov	r2, r6
 800110e:	4641      	mov	r1, r8
 8001110:	f7ff f8f2 	bl	80002f8 <memcpy>
    oqp->q_wrptr += n;
 8001114:	6963      	ldr	r3, [r4, #20]
 8001116:	4433      	add	r3, r6
 8001118:	6163      	str	r3, [r4, #20]
 800111a:	e7e9      	b.n	80010f0 <oqWriteTimeout+0xa0>
 800111c:	0000      	movs	r0, r0
	...

08001120 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <main+0x94>)
  PWR->CR |= PWR_CR_DBP;
 8001122:	4825      	ldr	r0, [pc, #148]	; (80011b8 <main+0x98>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800112a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
  }
}
/*
 * Application entry point.
 */
int main(void) {
 800112e:	b580      	push	{r7, lr}
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001138:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800113a:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800113e:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	615c      	str	r4, [r3, #20]
 8001144:	2200      	movs	r2, #0
 8001146:	6959      	ldr	r1, [r3, #20]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	6959      	ldr	r1, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800114c:	6a19      	ldr	r1, [r3, #32]
 800114e:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8001152:	6219      	str	r1, [r3, #32]
 8001154:	6a19      	ldr	r1, [r3, #32]
 8001156:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800115a:	6219      	str	r1, [r3, #32]
 800115c:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 800115e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001160:	625c      	str	r4, [r3, #36]	; 0x24
 8001162:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
 8001166:	6a59      	ldr	r1, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 8001168:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800116a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800116e:	6419      	str	r1, [r3, #64]	; 0x40
 8001170:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001172:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001176:	6619      	str	r1, [r3, #96]	; 0x60
 8001178:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800117a:	6801      	ldr	r1, [r0, #0]
 800117c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001180:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001182:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001184:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001188:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800118c:	b086      	sub	sp, #24
 800118e:	d003      	beq.n	8001198 <main+0x78>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001190:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001194:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001196:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <main+0x98>)
  dma.allocated_mask = 0U;
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <main+0x9c>)
 800119c:	6842      	ldr	r2, [r0, #4]
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <main+0xa0>)
 80011a0:	4c08      	ldr	r4, [pc, #32]	; (80011c4 <main+0xa4>)
 80011a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011a6:	2500      	movs	r5, #0
 80011a8:	6042      	str	r2, [r0, #4]
 80011aa:	460a      	mov	r2, r1
 80011ac:	600d      	str	r5, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80011ae:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 80011b2:	e00b      	b.n	80011cc <main+0xac>
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000
 80011bc:	20000b5c 	.word	0x20000b5c
 80011c0:	08002540 	.word	0x08002540
 80011c4:	40026010 	.word	0x40026010
 80011c8:	f853 4c0c 	ldr.w	r4, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80011cc:	6025      	str	r5, [r4, #0]
    dma.streams[i].func = NULL;
 80011ce:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80011d0:	4299      	cmp	r1, r3
    dma.streams[i].func = NULL;
 80011d2:	6055      	str	r5, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80011d4:	f102 0208 	add.w	r2, r2, #8
 80011d8:	d1f6      	bne.n	80011c8 <main+0xa8>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80011da:	4ec9      	ldr	r6, [pc, #804]	; (8001500 <main+0x3e0>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 80011dc:	48c9      	ldr	r0, [pc, #804]	; (8001504 <main+0x3e4>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 80011de:	4aca      	ldr	r2, [pc, #808]	; (8001508 <main+0x3e8>)
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1; //assigning USART pointer to address of USART port base register
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80011e0:	4fca      	ldr	r7, [pc, #808]	; (800150c <main+0x3ec>)
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 80011e2:	f8df a390 	ldr.w	sl, [pc, #912]	; 8001574 <main+0x454>
  tqp->next = (thread_t *)tqp;
 80011e6:	4cca      	ldr	r4, [pc, #808]	; (8001510 <main+0x3f0>)
 80011e8:	2360      	movs	r3, #96	; 0x60
  DMA1->LIFCR = 0xFFFFFFFFU;
 80011ea:	f04f 38ff 	mov.w	r8, #4294967295
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	f8c0 8008 	str.w	r8, [r0, #8]
 80011f4:	f04f 0980 	mov.w	r9, #128	; 0x80
  DMA1->HIFCR = 0xFFFFFFFFU;
 80011f8:	f8c0 800c 	str.w	r8, [r0, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80011fc:	f8c2 8008 	str.w	r8, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001200:	f8c2 800c 	str.w	r8, [r2, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001204:	f886 3306 	strb.w	r3, [r6, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120c:	f8c6 1180 	str.w	r1, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001210:	6031      	str	r1, [r6, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001212:	f44f 7100 	mov.w	r1, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001216:	f886 3307 	strb.w	r3, [r6, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800121a:	f8c6 9180 	str.w	r9, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800121e:	f8c6 9000 	str.w	r9, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001222:	f886 3308 	strb.w	r3, [r6, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001226:	f8c6 2180 	str.w	r2, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800122a:	6032      	str	r2, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800122c:	f886 3309 	strb.w	r3, [r6, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001230:	f8c6 1180 	str.w	r1, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001234:	6031      	str	r1, [r6, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001236:	f44f 6180 	mov.w	r1, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800123a:	f886 330a 	strb.w	r3, [r6, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800123e:	f8c6 1180 	str.w	r1, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001242:	6031      	str	r1, [r6, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001244:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001248:	f886 3317 	strb.w	r3, [r6, #791]	; 0x317
  sdObjectInit(&SD2, NULL, notify2);
 800124c:	4638      	mov	r0, r7
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800124e:	f8c6 1180 	str.w	r1, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001252:	6031      	str	r1, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001254:	f886 3328 	strb.w	r3, [r6, #808]	; 0x328
 8001258:	49ae      	ldr	r1, [pc, #696]	; (8001514 <main+0x3f4>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800125a:	f8c6 2184 	str.w	r2, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800125e:	6072      	str	r2, [r6, #4]
 8001260:	f7ff f8e6 	bl	8000430 <sdObjectInit.constprop.0>
  sdObjectInit(&SD4, NULL, notify4);
 8001264:	4650      	mov	r0, sl
  SD2.usart = USART2;
 8001266:	4bac      	ldr	r3, [pc, #688]	; (8001518 <main+0x3f8>)
  sdObjectInit(&SD4, NULL, notify4);
 8001268:	49ac      	ldr	r1, [pc, #688]	; (800151c <main+0x3fc>)
  SD2.usart = USART2;
 800126a:	677b      	str	r3, [r7, #116]	; 0x74
  sdObjectInit(&SD4, NULL, notify4);
 800126c:	f7ff f8e0 	bl	8000430 <sdObjectInit.constprop.0>
  spip->state = SPI_STOP;
 8001270:	4bab      	ldr	r3, [pc, #684]	; (8001520 <main+0x400>)
  SD4.usart = UART4;
 8001272:	4aac      	ldr	r2, [pc, #688]	; (8001524 <main+0x404>)
 8001274:	f8ca 2074 	str.w	r2, [sl, #116]	; 0x74
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8001278:	4aab      	ldr	r2, [pc, #684]	; (8001528 <main+0x408>)
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  SPID2.spi       = SPI2;
 800127c:	49ab      	ldr	r1, [pc, #684]	; (800152c <main+0x40c>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 800127e:	615d      	str	r5, [r3, #20]
 8001280:	f103 020c 	add.w	r2, r3, #12
 8001284:	f04f 0a01 	mov.w	sl, #1
  tqp->prev = (thread_t *)tqp;
 8001288:	e9c3 2203 	strd	r2, r2, [r3, #12]
 800128c:	61d9      	str	r1, [r3, #28]
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 800128e:	49a8      	ldr	r1, [pc, #672]	; (8001530 <main+0x410>)
 8001290:	62d9      	str	r1, [r3, #44]	; 0x2c
  spip->thread = NULL;
 8001292:	e9c3 5501 	strd	r5, r5, [r3, #4]
  SPID2.dmatx     = NULL;
 8001296:	e9c3 5508 	strd	r5, r5, [r3, #32]
  spip->state = SPI_STOP;
 800129a:	f883 a000 	strb.w	sl, [r3]
 * @note    You can add your board-specific code here.
 */
void boardInit(void)
{

  stm32_clock_init();
 800129e:	f7ff fc67 	bl	8000b70 <stm32_clock_init>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80012a2:	4ba4      	ldr	r3, [pc, #656]	; (8001534 <main+0x414>)
 80012a4:	6064      	str	r4, [r4, #4]
 80012a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  ch.rlist.prio = NOPRIO;
 80012a8:	60a5      	str	r5, [r4, #8]
 80012aa:	ea42 020a 	orr.w	r2, r2, sl
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
 80012b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80012b2:	49a1      	ldr	r1, [pc, #644]	; (8001538 <main+0x418>)
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80012b4:	6124      	str	r4, [r4, #16]
  ST_ENABLE_CLOCK();
 80012b6:	ea42 020a 	orr.w	r2, r2, sl
 80012ba:	661a      	str	r2, [r3, #96]	; 0x60
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 80012be:	688b      	ldr	r3, [r1, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80012c0:	4a9e      	ldr	r2, [pc, #632]	; (800153c <main+0x41c>)
  ch.rlist.older = (thread_t *)&ch.rlist;
 80012c2:	6164      	str	r4, [r4, #20]
 80012c4:	ea43 030a 	orr.w	r3, r3, sl
 80012c8:	608b      	str	r3, [r1, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80012ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ce:	f640 417f 	movw	r1, #3199	; 0xc7f
 80012d2:	6299      	str	r1, [r3, #40]	; 0x28
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80012d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80012d8:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  ch.vtlist.delta = (sysinterval_t)-1;
 80012dc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  STM32_ST_TIM->CCMR1  = 0;
 80012e0:	619d      	str	r5, [r3, #24]
  ch.vtlist.lasttime = (systime_t)0;
 80012e2:	62a5      	str	r5, [r4, #40]	; 0x28
  STM32_ST_TIM->CCR[0] = 0;
 80012e4:	635d      	str	r5, [r3, #52]	; 0x34
  H_NEXT(&default_heap.header) = NULL;
 80012e6:	6055      	str	r5, [r2, #4]
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 80012e8:	60dd      	str	r5, [r3, #12]
  H_PAGES(&default_heap.header) = 0;
 80012ea:	6095      	str	r5, [r2, #8]
  STM32_ST_TIM->CR2    = 0;
 80012ec:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80012ee:	f8c3 a014 	str.w	sl, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80012f2:	f8c3 a000 	str.w	sl, [r3]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80012f6:	f104 031c 	add.w	r3, r4, #28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80012fa:	f886 931c 	strb.w	r9, [r6, #796]	; 0x31c
  ch_memcore.basemem = __heap_base__;
 80012fe:	4990      	ldr	r1, [pc, #576]	; (8001540 <main+0x420>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001300:	f8c6 0180 	str.w	r0, [r6, #384]	; 0x180
 8001304:	61e3      	str	r3, [r4, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001306:	6030      	str	r0, [r6, #0]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001308:	488e      	ldr	r0, [pc, #568]	; (8001544 <main+0x424>)
 800130a:	6010      	str	r0, [r2, #0]
 800130c:	f8df c268 	ldr.w	ip, [pc, #616]	; 8001578 <main+0x458>
  ch_memcore.topmem  = __heap_end__;
 8001310:	488d      	ldr	r0, [pc, #564]	; (8001548 <main+0x428>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001312:	6223      	str	r3, [r4, #32]
  tqp->next = (thread_t *)tqp;
 8001314:	4b8d      	ldr	r3, [pc, #564]	; (800154c <main+0x42c>)
  ch_memcore.basemem = __heap_base__;
 8001316:	f8c1 c000 	str.w	ip, [r1]
 800131a:	f102 060c 	add.w	r6, r2, #12
  ch_memcore.topmem  = __heap_end__;
 800131e:	6048      	str	r0, [r1, #4]
  tmp->cumulative = (rttime_t)0;
 8001320:	2000      	movs	r0, #0
 8001322:	2100      	movs	r1, #0
 8001324:	6024      	str	r4, [r4, #0]
 8001326:	60d6      	str	r6, [r2, #12]
 8001328:	e9cd 0104 	strd	r0, r1, [sp, #16]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 800132c:	f103 0010 	add.w	r0, r3, #16
  tqp->prev = (thread_t *)tqp;
 8001330:	6116      	str	r6, [r2, #16]
 8001332:	6118      	str	r0, [r3, #16]
 8001334:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 8001338:	f103 0040 	add.w	r0, r3, #64	; 0x40
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 800133c:	2114      	movs	r1, #20
 800133e:	e9c3 3300 	strd	r3, r3, [r3]
 8001342:	e9c3 600f 	strd	r6, r0, [r3, #60]	; 0x3c
 8001346:	6155      	str	r5, [r2, #20]
  tmp->last       = (rtcnt_t)0;
 8001348:	e9cd 5501 	strd	r5, r5, [sp, #4]
  mp->align = align;
  mp->provider = provider;
 800134c:	4a80      	ldr	r2, [pc, #512]	; (8001550 <main+0x430>)
  tmp->best       = (rtcnt_t)-1;
 800134e:	f8cd 8000 	str.w	r8, [sp]
 8001352:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 8001356:	f103 0824 	add.w	r8, r3, #36	; 0x24
  mp->object_size = size;
 800135a:	f04f 0c1c 	mov.w	ip, #28
  ch.tm.offset = (rtcnt_t)0;
 800135e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  tmp->n          = (ucnt_t)0;
 8001362:	9503      	str	r5, [sp, #12]
 8001364:	609d      	str	r5, [r3, #8]
  mp->next = NULL;
 8001366:	615d      	str	r5, [r3, #20]
 8001368:	62dd      	str	r5, [r3, #44]	; 0x2c
  mp->object_size = size;
 800136a:	6199      	str	r1, [r3, #24]
  mp->align = align;
 800136c:	2504      	movs	r5, #4
 800136e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001372:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
 8001376:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  mp->object_size = size;
 800137a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800137e:	6459      	str	r1, [r3, #68]	; 0x44
  mp->align = align;
 8001380:	61dd      	str	r5, [r3, #28]
 8001382:	635d      	str	r5, [r3, #52]	; 0x34
  mp->provider = provider;
 8001384:	621a      	str	r2, [r3, #32]
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 8001388:	4668      	mov	r0, sp
 800138a:	f7ff f989 	bl	80006a0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800138e:	4668      	mov	r0, sp
 8001390:	f7ff f956 	bl	8000640 <chTMStopMeasurementX>
  } while (i > 0U);
 8001394:	3d01      	subs	r5, #1
 8001396:	d1f7      	bne.n	8001388 <main+0x268>
  REG_INSERT(tp);
 8001398:	4b6e      	ldr	r3, [pc, #440]	; (8001554 <main+0x434>)
  ch.tm.offset = tm.best;
 800139a:	9e00      	ldr	r6, [sp, #0]
 800139c:	f8d4 e014 	ldr.w	lr, [r4, #20]
 80013a0:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
  tp->name      = name;
 80013a4:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 800157c <main+0x45c>
 80013a8:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  tp->prio      = prio;
 80013ac:	2680      	movs	r6, #128	; 0x80
  tmp->best       = (rtcnt_t)-1;
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
  tmp->cumulative = (rttime_t)0;
 80013b2:	2000      	movs	r0, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	63a6      	str	r6, [r4, #56]	; 0x38
  tp->realprio  = prio;
 80013b8:	66e6      	str	r6, [r4, #108]	; 0x6c
  tp->refs      = (trefs_t)1;
 80013ba:	f04f 0c01 	mov.w	ip, #1
  tqp->next = (thread_t *)tqp;
 80013be:	f103 062c 	add.w	r6, r3, #44	; 0x2c
  tlp->next = (thread_t *)tlp;
 80013c2:	f103 0828 	add.w	r8, r3, #40	; 0x28
  tmp->last       = (rtcnt_t)0;
 80013c6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80013ca:	e9c4 552f 	strd	r5, r5, [r4, #188]	; 0xbc
  tp->epending  = (eventmask_t)0;
 80013ce:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
 80013d2:	e9c4 4e10 	strd	r4, lr, [r4, #64]	; 0x40
  tmp->cumulative = (rttime_t)0;
 80013d6:	e9c4 012c 	strd	r0, r1, [r4, #176]	; 0xb0
 80013da:	e9c4 0132 	strd	r0, r1, [r4, #200]	; 0xc8
  ch.kernel_stats.n_irq = (ucnt_t)0;
 80013de:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 80013e2:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
  tmp->n          = (ucnt_t)0;
 80013e6:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 80013ea:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
  tp->flags     = CH_FLAG_MODE_STATIC;
 80013ee:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  tmp->best       = (rtcnt_t)-1;
 80013f2:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 80013f6:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
  tp->refs      = (trefs_t)1;
 80013fa:	f884 c052 	strb.w	ip, [r4, #82]	; 0x52
  REG_INSERT(tp);
 80013fe:	f8ce 3010 	str.w	r3, [lr, #16]
  tqp->next = (thread_t *)tqp;
 8001402:	e9c4 8616 	strd	r8, r6, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 8001406:	6626      	str	r6, [r4, #96]	; 0x60
  tmp->worst      = (rtcnt_t)0;
 8001408:	e9c4 251e 	strd	r2, r5, [r4, #120]	; 0x78
 800140c:	6163      	str	r3, [r4, #20]
  tmp->last       = (rtcnt_t)0;
 800140e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8001412:	2620      	movs	r6, #32
  tmp->n          = (ucnt_t)0;
 8001414:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  tmp->cumulative = (rttime_t)0;
 8001418:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800141c:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 800141e:	f884 c050 	strb.w	ip, [r4, #80]	; 0x50
  currp->wabase = NULL;
 8001422:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001424:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 8001428:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142a:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <main+0x438>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800142c:	4a4b      	ldr	r2, [pc, #300]	; (800155c <main+0x43c>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142e:	68d9      	ldr	r1, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001430:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8001580 <main+0x460>
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001434:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8001584 <main+0x464>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001438:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 800143c:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 800143e:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001440:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001442:	f8de 200c 	ldr.w	r2, [lr, #12]
  chTMStartMeasurementX(&currp->stats);
 8001446:	69a0      	ldr	r0, [r4, #24]
 8001448:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800144c:	f8ce 200c 	str.w	r2, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001450:	f8dc 2000 	ldr.w	r2, [ip]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	2110      	movs	r1, #16
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	f8cc 2000 	str.w	r2, [ip]
 800145e:	3048      	adds	r0, #72	; 0x48
 8001460:	77d9      	strb	r1, [r3, #31]
 8001462:	f883 6022 	strb.w	r6, [r3, #34]	; 0x22
 8001466:	f7ff f91b 	bl	80006a0 <chTMStartMeasurementX>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800146a:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 800146e:	b662      	cpsie	i
 8001470:	4a3b      	ldr	r2, [pc, #236]	; (8001560 <main+0x440>)
    *startp++ = v;
 8001472:	2055      	movs	r0, #85	; 0x55
 8001474:	4613      	mov	r3, r2
 8001476:	f102 01f8 	add.w	r1, r2, #248	; 0xf8
 800147a:	f803 0b01 	strb.w	r0, [r3], #1
  while (startp < endp) {
 800147e:	428b      	cmp	r3, r1
 8001480:	d1fb      	bne.n	800147a <main+0x35a>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001482:	f04f 0a20 	mov.w	sl, #32
 8001486:	f38a 8811 	msr	BASEPRI, sl
  _stats_start_measure_crit_thd();
 800148a:	f7ff fd11 	bl	8000eb0 <_stats_start_measure_crit_thd>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <main+0x444>)
  REG_INSERT(tp);
 8001490:	f8d4 c014 	ldr.w	ip, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001494:	4d34      	ldr	r5, [pc, #208]	; (8001568 <main+0x448>)
  tp->name      = name;
 8001496:	4835      	ldr	r0, [pc, #212]	; (800156c <main+0x44c>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001498:	6755      	str	r5, [r2, #116]	; 0x74
  tp->state     = CH_STATE_WTSTART;
 800149a:	2102      	movs	r1, #2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800149c:	2500      	movs	r5, #0
  tp->state     = CH_STATE_WTSTART;
 800149e:	f8a2 10b8 	strh.w	r1, [r2, #184]	; 0xb8
  tp->name      = name;
 80014a2:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
  tp->prio      = prio;
 80014a6:	2101      	movs	r1, #1
  REG_INSERT(tp);
 80014a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80014ac:	4e30      	ldr	r6, [pc, #192]	; (8001570 <main+0x450>)
  REG_INSERT(tp);
 80014ae:	f8c2 c0ac 	str.w	ip, [r2, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80014b2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  tp->prio      = prio;
 80014b6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
  tp->realprio  = prio;
 80014ba:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  tp->refs      = (trefs_t)1;
 80014be:	f882 10ba 	strb.w	r1, [r2, #186]	; 0xba
  tp->epending  = (eventmask_t)0;
 80014c2:	e9c2 5533 	strd	r5, r5, [r2, #204]	; 0xcc
  tp->wabase = tdp->wbase;
 80014c6:	f8c2 20b4 	str.w	r2, [r2, #180]	; 0xb4
  REG_INSERT(tp);
 80014ca:	f8c2 40a8 	str.w	r4, [r2, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80014ce:	6795      	str	r5, [r2, #120]	; 0x78
 80014d0:	f8c2 6094 	str.w	r6, [r2, #148]	; 0x94
  tmp->best       = (rtcnt_t)-1;
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
  REG_INSERT(tp);
 80014d8:	f8cc 0010 	str.w	r0, [ip, #16]
  tmp->cumulative = (rttime_t)0;
 80014dc:	f04f 0800 	mov.w	r8, #0
  tlp->next = (thread_t *)tlp;
 80014e0:	f103 0c4c 	add.w	ip, r3, #76	; 0x4c
 80014e4:	f04f 0900 	mov.w	r9, #0
  tqp->next = (thread_t *)tqp;
 80014e8:	3350      	adds	r3, #80	; 0x50
  tmp->last       = (rtcnt_t)0;
 80014ea:	e9c2 5539 	strd	r5, r5, [r2, #228]	; 0xe4
 80014ee:	e9c2 c330 	strd	ip, r3, [r2, #192]	; 0xc0
  tmp->cumulative = (rttime_t)0;
 80014f2:	e9c2 893c 	strd	r8, r9, [r2, #240]	; 0xf0
  tmp->n          = (ucnt_t)0;
 80014f6:	f8c2 50ec 	str.w	r5, [r2, #236]	; 0xec
  tqp->prev = (thread_t *)tqp;
 80014fa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
 80014fe:	e043      	b.n	8001588 <main+0x468>
 8001500:	e000e100 	.word	0xe000e100
 8001504:	40026000 	.word	0x40026000
 8001508:	40026400 	.word	0x40026400
 800150c:	20000800 	.word	0x20000800
 8001510:	20000928 	.word	0x20000928
 8001514:	08000541 	.word	0x08000541
 8001518:	40004400 	.word	0x40004400
 800151c:	08000551 	.word	0x08000551
 8001520:	200008f8 	.word	0x200008f8
 8001524:	40004c00 	.word	0x40004c00
 8001528:	00010016 	.word	0x00010016
 800152c:	40003800 	.word	0x40003800
 8001530:	00010046 	.word	0x00010046
 8001534:	40023800 	.word	0x40023800
 8001538:	e0042000 	.word	0xe0042000
 800153c:	20000b40 	.word	0x20000b40
 8001540:	20000b38 	.word	0x20000b38
 8001544:	08000fe1 	.word	0x08000fe1
 8001548:	20020000 	.word	0x20020000
 800154c:	200009f8 	.word	0x200009f8
 8001550:	080005b1 	.word	0x080005b1
 8001554:	20000958 	.word	0x20000958
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	05fa0300 	.word	0x05fa0300
 8001560:	20000a40 	.word	0x20000a40
 8001564:	20000ab4 	.word	0x20000ab4
 8001568:	080007c1 	.word	0x080007c1
 800156c:	080023d0 	.word	0x080023d0
 8001570:	080002d1 	.word	0x080002d1
 8001574:	2000087c 	.word	0x2000087c
 8001578:	200014c8 	.word	0x200014c8
 800157c:	080025f4 	.word	0x080025f4
 8001580:	e000edf0 	.word	0xe000edf0
 8001584:	e0001000 	.word	0xe0001000
  tmp->best       = (rtcnt_t)-1;
 8001588:	f8c2 10e0 	str.w	r1, [r2, #224]	; 0xe0
 800158c:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 800158e:	f7ff fb77 	bl	8000c80 <chSchWakeupS.constprop.0>
  _stats_stop_measure_crit_thd();
 8001592:	f7ff fc85 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8001596:	f385 8811 	msr	BASEPRI, r5
 800159a:	f38a 8811 	msr	BASEPRI, sl
  _stats_start_measure_crit_thd();
 800159e:	f7ff fc87 	bl	8000eb0 <_stats_start_measure_crit_thd>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80015a2:	7a3b      	ldrb	r3, [r7, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d111      	bne.n	80015cc <main+0x4ac>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 80015a8:	4b56      	ldr	r3, [pc, #344]	; (8001704 <main+0x5e4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80015aa:	4a57      	ldr	r2, [pc, #348]	; (8001708 <main+0x5e8>)
 80015ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80015ae:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80015b2:	6419      	str	r1, [r3, #64]	; 0x40
 80015b4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80015b6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80015ba:	6619      	str	r1, [r3, #96]	; 0x60
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80015c0:	2340      	movs	r3, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80015c2:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80015c6:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80015ca:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 80015cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  u->BRR = fck;
 80015ce:	f240 1215 	movw	r2, #277	; 0x115
 80015d2:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80015d4:	2040      	movs	r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80015d6:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80015d8:	f242 122c 	movw	r2, #8492	; 0x212c
  u->SR = 0;
 80015dc:	2500      	movs	r5, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80015de:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80015e0:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80015e2:	60da      	str	r2, [r3, #12]
    sdp->rxmask = 0xFF;
 80015e4:	21ff      	movs	r1, #255	; 0xff
  u->SR = 0;
 80015e6:	601d      	str	r5, [r3, #0]
  sdp->state = SD_READY;
 80015e8:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 80015ea:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80015ec:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 80015ee:	f887 1078 	strb.w	r1, [r7, #120]	; 0x78
 80015f2:	723a      	strb	r2, [r7, #8]
  _stats_stop_measure_crit_thd();
 80015f4:	f7ff fc54 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 80015f8:	f385 8811 	msr	BASEPRI, r5
      /*
       * Activates the serial driver 2 using the driver default configuration.
       * PA2(TX) and PA3(RX) are routed to USART2.
       */
      sdStart(&SD2, &serial_terminal);
      palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 80015fc:	4843      	ldr	r0, [pc, #268]	; (800170c <main+0x5ec>)
                    PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);    /* New SCK */
      palSetPadMode(GPIOC,GPIOC_PIN2,
                    PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);    /* New MISO*/
      palSetPadMode(GPIOC, GPIOC_PIN3,
                    PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);    /* New MOSI*/
      palSetPadMode(GPIOB,GPIOB_PIN12,
 80015fe:	4d44      	ldr	r5, [pc, #272]	; (8001710 <main+0x5f0>)
      palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8001600:	f240 3282 	movw	r2, #898	; 0x382
 8001604:	2104      	movs	r1, #4
 8001606:	f7ff fa4b 	bl	8000aa0 <_pal_lld_setgroupmode>
      palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 800160a:	4840      	ldr	r0, [pc, #256]	; (800170c <main+0x5ec>)
 800160c:	f240 3282 	movw	r2, #898	; 0x382
 8001610:	2108      	movs	r1, #8
 8001612:	f7ff fa45 	bl	8000aa0 <_pal_lld_setgroupmode>
      sdWrite(&SD2, (unsigned char*)"Write a String\n", 15);
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	493e      	ldr	r1, [pc, #248]	; (8001714 <main+0x5f4>)
 800161c:	483e      	ldr	r0, [pc, #248]	; (8001718 <main+0x5f8>)
 800161e:	220f      	movs	r2, #15
 8001620:	f7ff fd16 	bl	8001050 <oqWriteTimeout>
      palSetPadMode(GPIOB, GPIOB_PIN10,
 8001624:	483d      	ldr	r0, [pc, #244]	; (800171c <main+0x5fc>)
 8001626:	f240 229a 	movw	r2, #666	; 0x29a
 800162a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162e:	f7ff fa37 	bl	8000aa0 <_pal_lld_setgroupmode>
      palSetPadMode(GPIOC,GPIOC_PIN2,
 8001632:	483b      	ldr	r0, [pc, #236]	; (8001720 <main+0x600>)
 8001634:	f240 229a 	movw	r2, #666	; 0x29a
 8001638:	2104      	movs	r1, #4
 800163a:	f7ff fa31 	bl	8000aa0 <_pal_lld_setgroupmode>
      palSetPadMode(GPIOC, GPIOC_PIN3,
 800163e:	4838      	ldr	r0, [pc, #224]	; (8001720 <main+0x600>)
 8001640:	f240 229a 	movw	r2, #666	; 0x29a
 8001644:	2108      	movs	r1, #8
 8001646:	f7ff fa2b 	bl	8000aa0 <_pal_lld_setgroupmode>
      palSetPadMode(GPIOB,GPIOB_PIN12,
 800164a:	2219      	movs	r2, #25
 800164c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001650:	4832      	ldr	r0, [pc, #200]	; (800171c <main+0x5fc>)
 8001652:	f7ff fa25 	bl	8000aa0 <_pal_lld_setgroupmode>
 8001656:	462b      	mov	r3, r5
 8001658:	f505 619a 	add.w	r1, r5, #1232	; 0x4d0
    *startp++ = v;
 800165c:	2255      	movs	r2, #85	; 0x55
 800165e:	f803 2b01 	strb.w	r2, [r3], #1
  while (startp < endp) {
 8001662:	428b      	cmp	r3, r1
 8001664:	d1fb      	bne.n	800165e <main+0x53e>
 8001666:	2320      	movs	r3, #32
 8001668:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800166c:	f7ff fc20 	bl	8000eb0 <_stats_start_measure_crit_thd>
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <main+0x604>)
 8001672:	492d      	ldr	r1, [pc, #180]	; (8001728 <main+0x608>)
  REG_INSERT(tp);
 8001674:	6962      	ldr	r2, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001676:	f8c5 646c 	str.w	r6, [r5, #1132]	; 0x46c
 800167a:	f8c5 144c 	str.w	r1, [r5, #1100]	; 0x44c
  tp->name      = name;
 800167e:	482b      	ldr	r0, [pc, #172]	; (800172c <main+0x60c>)
 8001680:	f8c5 0488 	str.w	r0, [r5, #1160]	; 0x488
  tp->state     = CH_STATE_WTSTART;
 8001684:	2602      	movs	r6, #2
  tp->refs      = (trefs_t)1;
 8001686:	2101      	movs	r1, #1
  REG_INSERT(tp);
 8001688:	f103 0024 	add.w	r0, r3, #36	; 0x24
  tp->state     = CH_STATE_WTSTART;
 800168c:	f8a5 6490 	strh.w	r6, [r5, #1168]	; 0x490
  tp->refs      = (trefs_t)1;
 8001690:	f885 1492 	strb.w	r1, [r5, #1170]	; 0x492
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001694:	2600      	movs	r6, #0
  tp->prio      = prio;
 8001696:	2181      	movs	r1, #129	; 0x81
  REG_INSERT(tp);
 8001698:	f8c5 2484 	str.w	r2, [r5, #1156]	; 0x484
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800169c:	f8c5 347c 	str.w	r3, [r5, #1148]	; 0x47c
  tp->prio      = prio;
 80016a0:	f8c5 1478 	str.w	r1, [r5, #1144]	; 0x478
  tp->realprio  = prio;
 80016a4:	f8c5 14ac 	str.w	r1, [r5, #1196]	; 0x4ac
  tlp->next = (thread_t *)tlp;
 80016a8:	f103 074c 	add.w	r7, r3, #76	; 0x4c
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
  tp->wabase = (stkalign_t *)wsp;
 80016b0:	f8c5 548c 	str.w	r5, [r5, #1164]	; 0x48c
  REG_INSERT(tp);
 80016b4:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80016b8:	f8c5 6450 	str.w	r6, [r5, #1104]	; 0x450
  tp->mtxlist   = NULL;
 80016bc:	f8c5 64a8 	str.w	r6, [r5, #1192]	; 0x4a8
  tp->epending  = (eventmask_t)0;
 80016c0:	f8c5 64a4 	str.w	r6, [r5, #1188]	; 0x4a4
  tmp->cumulative = (rttime_t)0;
 80016c4:	f04f 0800 	mov.w	r8, #0
  REG_INSERT(tp);
 80016c8:	6110      	str	r0, [r2, #16]
 80016ca:	f04f 0900 	mov.w	r9, #0
  tqp->next = (thread_t *)tqp;
 80016ce:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80016d2:	e9c3 891f 	strd	r8, r9, [r3, #124]	; 0x7c
  tmp->best       = (rtcnt_t)-1;
 80016d6:	f8c5 14b8 	str.w	r1, [r5, #1208]	; 0x4b8
 80016da:	f8c5 249c 	str.w	r2, [r5, #1180]	; 0x49c
  tqp->prev = (thread_t *)tqp;
 80016de:	f8c5 24a0 	str.w	r2, [r5, #1184]	; 0x4a0
  tmp->worst      = (rtcnt_t)0;
 80016e2:	f8c5 64bc 	str.w	r6, [r5, #1212]	; 0x4bc
  tmp->last       = (rtcnt_t)0;
 80016e6:	f8c5 64c0 	str.w	r6, [r5, #1216]	; 0x4c0
  tmp->n          = (ucnt_t)0;
 80016ea:	f8c5 64c4 	str.w	r6, [r5, #1220]	; 0x4c4
  tlp->next = (thread_t *)tlp;
 80016ee:	f8c5 7498 	str.w	r7, [r5, #1176]	; 0x498
 80016f2:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 80016f4:	f7ff fac4 	bl	8000c80 <chSchWakeupS.constprop.0>
  _stats_stop_measure_crit_thd();
 80016f8:	f7ff fbd2 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 80016fc:	f386 8811 	msr	BASEPRI, r6
 // chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true)
 8001700:	e7fe      	b.n	8001700 <main+0x5e0>
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	e000e100 	.word	0xe000e100
 800170c:	40020000 	.word	0x40020000
 8001710:	20000fe8 	.word	0x20000fe8
 8001714:	080023d8 	.word	0x080023d8
 8001718:	20000830 	.word	0x20000830
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	20001434 	.word	0x20001434
 8001728:	08001a01 	.word	0x08001a01
 800172c:	080023e8 	.word	0x080023e8

08001730 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001730:	3030      	adds	r0, #48	; 0x30
 8001732:	f7ff bc8d 	b.w	8001050 <oqWriteTimeout>
 8001736:	bf00      	nop
	...

08001740 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, TIME_INFINITE);
 8001740:	3030      	adds	r0, #48	; 0x30
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	f7ff bc83 	b.w	8001050 <oqWriteTimeout>
 800174a:	bf00      	nop
 800174c:	0000      	movs	r0, r0
	...

08001750 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001754:	2320      	movs	r3, #32
 8001756:	4605      	mov	r5, r0
 8001758:	4688      	mov	r8, r1
 800175a:	4617      	mov	r7, r2
 800175c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001760:	f7ff fba6 	bl	8000eb0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001764:	e003      	b.n	800176e <oqPutTimeout+0x1e>
 8001766:	f7ff fb73 	bl	8000e50 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800176a:	1e04      	subs	r4, r0, #0
 800176c:	db1e      	blt.n	80017ac <oqPutTimeout+0x5c>
  while (oqIsFullI(oqp)) {
 800176e:	68ae      	ldr	r6, [r5, #8]
 8001770:	4639      	mov	r1, r7
 8001772:	4628      	mov	r0, r5
 8001774:	2e00      	cmp	r6, #0
 8001776:	d0f6      	beq.n	8001766 <oqPutTimeout+0x16>
  *oqp->q_wrptr++ = b;
 8001778:	696a      	ldr	r2, [r5, #20]
  oqp->q_counter--;
 800177a:	68ab      	ldr	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 800177c:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800177e:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001780:	6169      	str	r1, [r5, #20]
  oqp->q_counter--;
 8001782:	60ab      	str	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 8001784:	f882 8000 	strb.w	r8, [r2]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001788:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 800178c:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800178e:	bf24      	itt	cs
 8001790:	68eb      	ldrcs	r3, [r5, #12]
 8001792:	616b      	strcs	r3, [r5, #20]
  if (oqp->q_notify != NULL) {
 8001794:	69eb      	ldr	r3, [r5, #28]
 8001796:	b103      	cbz	r3, 800179a <oqPutTimeout+0x4a>
    oqp->q_notify(oqp);
 8001798:	4798      	blx	r3
  _stats_stop_measure_crit_thd();
 800179a:	f7ff fb81 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 800179e:	2000      	movs	r0, #0
 80017a0:	f380 8811 	msr	BASEPRI, r0
 80017a4:	4604      	mov	r4, r0
}
 80017a6:	4620      	mov	r0, r4
 80017a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017ac:	f7ff fb78 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 80017b0:	f386 8811 	msr	BASEPRI, r6
 80017b4:	4620      	mov	r0, r4
 80017b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017ba:	bf00      	nop
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80017c0:	3030      	adds	r0, #48	; 0x30
 80017c2:	f7ff bfc5 	b.w	8001750 <oqPutTimeout>
 80017c6:	bf00      	nop
	...

080017d0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80017d0:	3030      	adds	r0, #48	; 0x30
 80017d2:	f04f 32ff 	mov.w	r2, #4294967295
 80017d6:	f7ff bfbb 	b.w	8001750 <oqPutTimeout>
 80017da:	bf00      	nop
 80017dc:	0000      	movs	r0, r0
	...

080017e0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80017e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e4:	b085      	sub	sp, #20
 80017e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 80017ea:	69c7      	ldr	r7, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 80017ec:	4604      	mov	r4, r0
 80017ee:	f04f 0920 	mov.w	r9, #32
 80017f2:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 80017f6:	f7ff fb5b 	bl	8000eb0 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d031      	beq.n	8001862 <iqReadTimeout+0x82>
 80017fe:	9d03      	ldr	r5, [sp, #12]
 8001800:	460e      	mov	r6, r1
 8001802:	f04f 0a00 	mov.w	sl, #0
 8001806:	4688      	mov	r8, r1
  if (n > iqGetFullI(iqp)) {
 8001808:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800180a:	69a1      	ldr	r1, [r4, #24]
 800180c:	6922      	ldr	r2, [r4, #16]
  if (n > iqGetFullI(iqp)) {
 800180e:	429d      	cmp	r5, r3
    n = iqGetFullI(iqp);
 8001810:	bf8c      	ite	hi
 8001812:	68a6      	ldrhi	r6, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8001814:	462e      	movls	r6, r5
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001816:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 8001818:	42b2      	cmp	r2, r6
 800181a:	d840      	bhi.n	800189e <iqReadTimeout+0xbe>
  else if (n > s1) {
 800181c:	d22b      	bcs.n	8001876 <iqReadTimeout+0x96>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800181e:	4640      	mov	r0, r8
    s2 = n - s1;
 8001820:	eba6 0b02 	sub.w	fp, r6, r2
 8001824:	9201      	str	r2, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001826:	f7fe fd67 	bl	80002f8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800182a:	9a01      	ldr	r2, [sp, #4]
 800182c:	68e1      	ldr	r1, [r4, #12]
 800182e:	eb08 0002 	add.w	r0, r8, r2
 8001832:	465a      	mov	r2, fp
 8001834:	f7fe fd60 	bl	80002f8 <memcpy>
  iqp->q_counter -= n;
 8001838:	68a3      	ldr	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 800183a:	68e2      	ldr	r2, [r4, #12]
  iqp->q_counter -= n;
 800183c:	1b9b      	subs	r3, r3, r6
    iqp->q_rdptr = iqp->q_buffer + s2;
 800183e:	445a      	add	r2, fp
 8001840:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8001842:	60a3      	str	r3, [r4, #8]
      if (nfy != NULL) {
 8001844:	b10f      	cbz	r7, 800184a <iqReadTimeout+0x6a>
        nfy(iqp);
 8001846:	4620      	mov	r0, r4
 8001848:	47b8      	blx	r7
  _stats_stop_measure_crit_thd();
 800184a:	f7ff fb29 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 800184e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8001852:	1bad      	subs	r5, r5, r6
      bp += done;
 8001854:	44b0      	add	r8, r6
 8001856:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 800185a:	f7ff fb29 	bl	8000eb0 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 800185e:	2d00      	cmp	r5, #0
 8001860:	d1d2      	bne.n	8001808 <iqReadTimeout+0x28>
  if (n > iqGetFullI(iqp)) {
 8001862:	9d03      	ldr	r5, [sp, #12]
  _stats_stop_measure_crit_thd();
 8001864:	f7ff fb1c 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8001868:	2300      	movs	r3, #0
 800186a:	f383 8811 	msr	BASEPRI, r3
}
 800186e:	4628      	mov	r0, r5
 8001870:	b005      	add	sp, #20
 8001872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001876:	4632      	mov	r2, r6
 8001878:	4640      	mov	r0, r8
 800187a:	f7fe fd3d 	bl	80002f8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800187e:	68e3      	ldr	r3, [r4, #12]
 8001880:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	1b9b      	subs	r3, r3, r6
 8001886:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8001888:	2e00      	cmp	r6, #0
 800188a:	d1db      	bne.n	8001844 <iqReadTimeout+0x64>
 800188c:	9902      	ldr	r1, [sp, #8]
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff fade 	bl	8000e50 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001894:	2800      	cmp	r0, #0
 8001896:	d0b7      	beq.n	8001808 <iqReadTimeout+0x28>
 8001898:	9b03      	ldr	r3, [sp, #12]
 800189a:	1b5d      	subs	r5, r3, r5
 800189c:	e7e2      	b.n	8001864 <iqReadTimeout+0x84>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800189e:	4632      	mov	r2, r6
 80018a0:	4640      	mov	r0, r8
 80018a2:	f7fe fd29 	bl	80002f8 <memcpy>
    iqp->q_rdptr += n;
 80018a6:	69a3      	ldr	r3, [r4, #24]
 80018a8:	4433      	add	r3, r6
 80018aa:	61a3      	str	r3, [r4, #24]
 80018ac:	e7e9      	b.n	8001882 <iqReadTimeout+0xa2>
 80018ae:	bf00      	nop

080018b0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80018b0:	300c      	adds	r0, #12
 80018b2:	f7ff bf95 	b.w	80017e0 <iqReadTimeout>
 80018b6:	bf00      	nop
	...

080018c0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, TIME_INFINITE);
 80018c0:	300c      	adds	r0, #12
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	f7ff bf8b 	b.w	80017e0 <iqReadTimeout>
 80018ca:	bf00      	nop
 80018cc:	0000      	movs	r0, r0
	...

080018d0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d2:	4605      	mov	r5, r0
 80018d4:	460f      	mov	r7, r1
 80018d6:	2320      	movs	r3, #32
 80018d8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80018dc:	f7ff fae8 	bl	8000eb0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80018e0:	e003      	b.n	80018ea <iqGetTimeout+0x1a>
 80018e2:	f7ff fab5 	bl	8000e50 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80018e6:	1e04      	subs	r4, r0, #0
 80018e8:	db1c      	blt.n	8001924 <iqGetTimeout+0x54>
  while (iqIsEmptyI(iqp)) {
 80018ea:	68ae      	ldr	r6, [r5, #8]
 80018ec:	4639      	mov	r1, r7
 80018ee:	4628      	mov	r0, r5
 80018f0:	2e00      	cmp	r6, #0
 80018f2:	d0f6      	beq.n	80018e2 <iqGetTimeout+0x12>
  b = *iqp->q_rdptr++;
 80018f4:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 80018f6:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80018f8:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 80018fa:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80018fc:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80018fe:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001900:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8001902:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001904:	bf28      	it	cs
 8001906:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001908:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800190a:	bf28      	it	cs
 800190c:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 800190e:	69eb      	ldr	r3, [r5, #28]
 8001910:	b10b      	cbz	r3, 8001916 <iqGetTimeout+0x46>
    iqp->q_notify(iqp);
 8001912:	4628      	mov	r0, r5
 8001914:	4798      	blx	r3
  _stats_stop_measure_crit_thd();
 8001916:	f7ff fac3 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 800191a:	2300      	movs	r3, #0
 800191c:	f383 8811 	msr	BASEPRI, r3
}
 8001920:	4620      	mov	r0, r4
 8001922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001924:	f7ff fabc 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8001928:	f386 8811 	msr	BASEPRI, r6
 800192c:	4620      	mov	r0, r4
 800192e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001930 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001930:	300c      	adds	r0, #12
 8001932:	f7ff bfcd 	b.w	80018d0 <iqGetTimeout>
 8001936:	bf00      	nop
	...

08001940 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001940:	300c      	adds	r0, #12
 8001942:	f04f 31ff 	mov.w	r1, #4294967295
 8001946:	f7ff bfc3 	b.w	80018d0 <iqGetTimeout>
 800194a:	bf00      	nop
 800194c:	0000      	movs	r0, r0
	...

08001950 <chThdExit>:
void chThdExit(msg_t msg) {
 8001950:	b538      	push	{r3, r4, r5, lr}
 8001952:	4602      	mov	r2, r0
 8001954:	2320      	movs	r3, #32
 8001956:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800195a:	f7ff faa9 	bl	8000eb0 <_stats_start_measure_crit_thd>
  thread_t *tp = currp;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <chThdExit+0x4c>)
 8001960:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001962:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001964:	6262      	str	r2, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001966:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800196a:	42a8      	cmp	r0, r5
 800196c:	d006      	beq.n	800197c <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 800196e:	6803      	ldr	r3, [r0, #0]
 8001970:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001972:	f7fe fedd 	bl	8000730 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001976:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001978:	42a8      	cmp	r0, r5
 800197a:	d1f8      	bne.n	800196e <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 800197c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001980:	b93b      	cbnz	r3, 8001992 <chThdExit+0x42>
 8001982:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001986:	079b      	lsls	r3, r3, #30
 8001988:	d103      	bne.n	8001992 <chThdExit+0x42>
    REG_REMOVE(tp);
 800198a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800198e:	6113      	str	r3, [r2, #16]
 8001990:	615a      	str	r2, [r3, #20]
}
 8001992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8001996:	200f      	movs	r0, #15
 8001998:	f7ff b9b2 	b.w	8000d00 <chSchGoSleepS>
 800199c:	20000928 	.word	0x20000928

080019a0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80019a0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 80019a2:	4c14      	ldr	r4, [pc, #80]	; (80019f4 <chSchDoReschedule+0x54>)
  thread_t *tp = tqp->next;
 80019a4:	6821      	ldr	r1, [r4, #0]
 80019a6:	69a5      	ldr	r5, [r4, #24]
  tqp->next             = tp->queue.next;
 80019a8:	680b      	ldr	r3, [r1, #0]
 80019aa:	6023      	str	r3, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80019ac:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80019ae:	605c      	str	r4, [r3, #4]
 80019b0:	f881 2020 	strb.w	r2, [r1, #32]
  tp->state = CH_STATE_READY;
 80019b4:	2200      	movs	r2, #0

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80019b6:	68a8      	ldr	r0, [r5, #8]
  tp->state = CH_STATE_READY;
 80019b8:	f885 2020 	strb.w	r2, [r5, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80019bc:	61a1      	str	r1, [r4, #24]
  cp = (thread_t *)&ch.rlist.queue;
 80019be:	e000      	b.n	80019c2 <chSchDoReschedule+0x22>
 80019c0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4290      	cmp	r0, r2
 80019c6:	d3fb      	bcc.n	80019c0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80019c8:	6858      	ldr	r0, [r3, #4]
  ch.kernel_stats.n_ctxswc++;
 80019ca:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80019ce:	6068      	str	r0, [r5, #4]
  tp->queue.next             = cp;
 80019d0:	602b      	str	r3, [r5, #0]
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 80019d2:	3148      	adds	r1, #72	; 0x48
  tp->queue.prev->queue.next = tp;
 80019d4:	6005      	str	r5, [r0, #0]
  ch.kernel_stats.n_ctxswc++;
 80019d6:	3201      	adds	r2, #1
  cp->queue.prev             = tp;
 80019d8:	605d      	str	r5, [r3, #4]
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 80019da:	f105 0048 	add.w	r0, r5, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 80019de:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 80019e2:	f7fe fe0d 	bl	8000600 <chTMChainMeasurementToX>

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80019e6:	69a0      	ldr	r0, [r4, #24]
 80019e8:	4629      	mov	r1, r5
}
 80019ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 80019ee:	f7fe bc67 	b.w	80002c0 <_port_switch>
 80019f2:	bf00      	nop
 80019f4:	20000928 	.word	0x20000928
	...

08001a00 <spi_thread_1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001a00:	f8df a344 	ldr.w	sl, [pc, #836]	; 8001d48 <spi_thread_1+0x348>
 8001a04:	4cc0      	ldr	r4, [pc, #768]	; (8001d08 <spi_thread_1+0x308>)
 8001a06:	4ac1      	ldr	r2, [pc, #772]	; (8001d0c <spi_thread_1+0x30c>)
 8001a08:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001d30 <spi_thread_1+0x330>
    cs_reset();
 8001a0c:	4ec0      	ldr	r6, [pc, #768]	; (8001d10 <spi_thread_1+0x310>)
static THD_FUNCTION(spi_thread_1, p) {
 8001a0e:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8001a12:	f8da 3018 	ldr.w	r3, [sl, #24]
    sdWrite(&SD2, (unsigned char*)"wq275", 5);
 8001a16:	4fbf      	ldr	r7, [pc, #764]	; (8001d14 <spi_thread_1+0x314>)
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	f104 090c 	add.w	r9, r4, #12
 8001a1e:	49be      	ldr	r1, [pc, #760]	; (8001d18 <spi_thread_1+0x318>)
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	2205      	movs	r2, #5
 8001a26:	4638      	mov	r0, r7
 8001a28:	f7ff fb12 	bl	8001050 <oqWriteTimeout>
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f7ff fa3d 	bl	8000eb0 <_stats_start_measure_crit_thd>

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8001a36:	6960      	ldr	r0, [r4, #20]
  thread_t *ctp = currp;
 8001a38:	f8da 5018 	ldr.w	r5, [sl, #24]
  if (mp->owner != NULL) {
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	f000 814a 	beq.w	8001cd6 <spi_thread_1+0x2d6>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8001a42:	68aa      	ldr	r2, [r5, #8]
 8001a44:	6883      	ldr	r3, [r0, #8]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90b      	bls.n	8001a62 <spi_thread_1+0x62>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8001a4a:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8001a4e:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8001a50:	2b06      	cmp	r3, #6
 8001a52:	f000 8187 	beq.w	8001d64 <spi_thread_1+0x364>
 8001a56:	2b07      	cmp	r3, #7
 8001a58:	f000 814d 	beq.w	8001cf6 <spi_thread_1+0x2f6>
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8143 	beq.w	8001ce8 <spi_thread_1+0x2e8>
  thread_t *cp = (thread_t *)tqp;
 8001a62:	4bae      	ldr	r3, [pc, #696]	; (8001d1c <spi_thread_1+0x31c>)
 8001a64:	e003      	b.n	8001a6e <spi_thread_1+0x6e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	68aa      	ldr	r2, [r5, #8]
 8001a6a:	4291      	cmp	r1, r2
 8001a6c:	d302      	bcc.n	8001a74 <spi_thread_1+0x74>
    cp = cp->queue.next;
 8001a6e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001a70:	454b      	cmp	r3, r9
 8001a72:	d1f8      	bne.n	8001a66 <spi_thread_1+0x66>
  tp->queue.prev             = cp->queue.prev;
 8001a74:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001a76:	2006      	movs	r0, #6
 8001a78:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8001a7c:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001a7e:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8001a80:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8001a84:	f7ff f93c 	bl	8000d00 <chSchGoSleepS>
  _stats_stop_measure_crit_thd();
 8001a88:	f7ff fa0a 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	2320      	movs	r3, #32
 8001a94:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001a98:	f7ff fa0a 	bl	8000eb0 <_stats_start_measure_crit_thd>
  if (spip->state == SPI_STOP) {
 8001a9c:	7823      	ldrb	r3, [r4, #0]
  spip->config = config;
 8001a9e:	4aa0      	ldr	r2, [pc, #640]	; (8001d20 <spi_thread_1+0x320>)
 8001aa0:	6062      	str	r2, [r4, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	f000 80e0 	beq.w	8001c68 <spi_thread_1+0x268>
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001aa8:	4d9d      	ldr	r5, [pc, #628]	; (8001d20 <spi_thread_1+0x320>)
  if (spip->state == SPI_STOP) {
 8001aaa:	f04f 0c07 	mov.w	ip, #7
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001aae:	f44f 7048 	mov.w	r0, #800	; 0x320
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001ab2:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8001ab6:	69e3      	ldr	r3, [r4, #28]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001ab8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001abc:	62e2      	str	r2, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001abe:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
  if (spip->config->circular) {
 8001ac2:	782d      	ldrb	r5, [r5, #0]
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	f000 80c8 	beq.w	8001c5a <spi_thread_1+0x25a>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8001aca:	f441 7184 	orr.w	r1, r1, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8001ace:	f442 7284 	orr.w	r2, r2, #264	; 0x108
 8001ad2:	e9c4 120a 	strd	r1, r2, [r4, #40]	; 0x28
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8001ad6:	681a      	ldr	r2, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8001ad8:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8001adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ae0:	601a      	str	r2, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8001ae2:	6018      	str	r0, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8001ae4:	f8c3 c004 	str.w	ip, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aee:	601a      	str	r2, [r3, #0]
  spip->state = SPI_READY;
 8001af0:	2302      	movs	r3, #2
 8001af2:	7023      	strb	r3, [r4, #0]
 8001af4:	f04f 0b00 	mov.w	fp, #0
  _stats_stop_measure_crit_thd();
 8001af8:	f7ff f9d2 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8001afc:	f38b 8811 	msr	BASEPRI, fp
    x = ReadSR(ReadSR1);
 8001b00:	2005      	movs	r0, #5
 8001b02:	f7ff fa4d 	bl	8000fa0 <ReadSR>
 8001b06:	4d87      	ldr	r5, [pc, #540]	; (8001d24 <spi_thread_1+0x324>)
 8001b08:	4603      	mov	r3, r0
    y = ReadSR(ReadSR2);
 8001b0a:	2035      	movs	r0, #53	; 0x35
    x = ReadSR(ReadSR1);
 8001b0c:	702b      	strb	r3, [r5, #0]
    y = ReadSR(ReadSR2);
 8001b0e:	f7ff fa47 	bl	8000fa0 <ReadSR>
 8001b12:	4a85      	ldr	r2, [pc, #532]	; (8001d28 <spi_thread_1+0x328>)
 8001b14:	4603      	mov	r3, r0
    z = ReadSR(ReadSR3);
 8001b16:	2015      	movs	r0, #21
    y = ReadSR(ReadSR2);
 8001b18:	7013      	strb	r3, [r2, #0]
    z = ReadSR(ReadSR3);
 8001b1a:	f7ff fa41 	bl	8000fa0 <ReadSR>
    sdPut(&SD2,(int)x);
 8001b1e:	7829      	ldrb	r1, [r5, #0]
    z = ReadSR(ReadSR3);
 8001b20:	4d82      	ldr	r5, [pc, #520]	; (8001d2c <spi_thread_1+0x32c>)
    sdPut(&SD2,(int)x);
 8001b22:	f04f 32ff 	mov.w	r2, #4294967295
    z = ReadSR(ReadSR3);
 8001b26:	7028      	strb	r0, [r5, #0]
    sdPut(&SD2,(int)x);
 8001b28:	4638      	mov	r0, r7
 8001b2a:	f7ff fe11 	bl	8001750 <oqPutTimeout>
    sdPut(&SD2,(int)y);
 8001b2e:	4a7e      	ldr	r2, [pc, #504]	; (8001d28 <spi_thread_1+0x328>)
 8001b30:	4638      	mov	r0, r7
 8001b32:	7811      	ldrb	r1, [r2, #0]
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	f7ff fe0a 	bl	8001750 <oqPutTimeout>
    sdPut(&SD2,(int)z);
 8001b3c:	7829      	ldrb	r1, [r5, #0]
 8001b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b42:	4638      	mov	r0, r7
    cs_reset();
 8001b44:	f44f 5580 	mov.w	r5, #4096	; 0x1000
    sdPut(&SD2,(int)z);
 8001b48:	f7ff fe02 	bl	8001750 <oqPutTimeout>
    chThdSleepMilliseconds(100);
 8001b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b50:	f7ff fa6e 	bl	8001030 <chThdSleep>
    tx_buf[0] = WriteEnable;
 8001b54:	2306      	movs	r3, #6
    cs_reset();
 8001b56:	8375      	strh	r5, [r6, #26]
  spiSend(&SPID2, cnt, dt);
 8001b58:	4975      	ldr	r1, [pc, #468]	; (8001d30 <spi_thread_1+0x330>)
    tx_buf[0] = WriteEnable;
 8001b5a:	f888 3000 	strb.w	r3, [r8]
  spiSend(&SPID2, cnt, dt);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff f9ae 	bl	8000ec0 <spiSend.constprop.0>
    tx_buf[0] = SectErase4KB;
 8001b64:	f44f 7248 	mov.w	r2, #800	; 0x320
    cs_set();
 8001b68:	8335      	strh	r5, [r6, #24]
  spiSend(&SPID2, cnt, dt);
 8001b6a:	4971      	ldr	r1, [pc, #452]	; (8001d30 <spi_thread_1+0x330>)
    cs_reset();
 8001b6c:	8375      	strh	r5, [r6, #26]
  spiSend(&SPID2, cnt, dt);
 8001b6e:	2004      	movs	r0, #4
    tx_buf[0] = SectErase4KB;
 8001b70:	f8c8 2000 	str.w	r2, [r8]
  spiSend(&SPID2, cnt, dt);
 8001b74:	f7ff f9a4 	bl	8000ec0 <spiSend.constprop.0>
    cs_set();
 8001b78:	8335      	strh	r5, [r6, #24]
    chThdSleepMilliseconds(100);
 8001b7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b7e:	f7ff fa57 	bl	8001030 <chThdSleep>
    cs_reset();
 8001b82:	8375      	strh	r5, [r6, #26]
    tx_buf[0] = WriteEnable;
 8001b84:	2306      	movs	r3, #6
  spiSend(&SPID2, cnt, dt);
 8001b86:	496a      	ldr	r1, [pc, #424]	; (8001d30 <spi_thread_1+0x330>)
    tx_buf[0] = WriteEnable;
 8001b88:	f888 3000 	strb.w	r3, [r8]
  spiSend(&SPID2, cnt, dt);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff f997 	bl	8000ec0 <spiSend.constprop.0>
  tx_buf[0] = WriteData;
 8001b92:	f240 3302 	movw	r3, #770	; 0x302
    cs_set();
 8001b96:	8335      	strh	r5, [r6, #24]
  spiSend(&SPID2, cnt, dt);
 8001b98:	4965      	ldr	r1, [pc, #404]	; (8001d30 <spi_thread_1+0x330>)
  cs_reset();
 8001b9a:	8375      	strh	r5, [r6, #26]
  spiSend(&SPID2, cnt, dt);
 8001b9c:	2004      	movs	r0, #4
  tx_buf[0] = WriteData;
 8001b9e:	f8c8 3000 	str.w	r3, [r8]
  spiSend(&SPID2, cnt, dt);
 8001ba2:	f7ff f98d 	bl	8000ec0 <spiSend.constprop.0>
 8001ba6:	4963      	ldr	r1, [pc, #396]	; (8001d34 <spi_thread_1+0x334>)
 8001ba8:	f240 102b 	movw	r0, #299	; 0x12b
 8001bac:	f7ff f988 	bl	8000ec0 <spiSend.constprop.0>
  cs_set();
 8001bb0:	8335      	strh	r5, [r6, #24]
    chThdSleepMilliseconds(100);
 8001bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb6:	f7ff fa3b 	bl	8001030 <chThdSleep>
  tx_buf[0] = ReadData;
 8001bba:	f240 3303 	movw	r3, #771	; 0x303
  cs_reset();
 8001bbe:	8375      	strh	r5, [r6, #26]
  spiSend(&SPID2, cnt, dt);
 8001bc0:	495b      	ldr	r1, [pc, #364]	; (8001d30 <spi_thread_1+0x330>)
  tx_buf[0] = ReadData;
 8001bc2:	f8c8 3000 	str.w	r3, [r8]
  spiSend(&SPID2, cnt, dt);
 8001bc6:	2004      	movs	r0, #4
 8001bc8:	f7ff f97a 	bl	8000ec0 <spiSend.constprop.0>
  spiReceive(&SPID2, cnt, dt);
 8001bcc:	495a      	ldr	r1, [pc, #360]	; (8001d38 <spi_thread_1+0x338>)
 8001bce:	f240 102b 	movw	r0, #299	; 0x12b
 8001bd2:	f7ff f9ad 	bl	8000f30 <spiReceive.constprop.0>
  cs_set();
 8001bd6:	8335      	strh	r5, [r6, #24]
    chThdSleepMilliseconds(100);
 8001bd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bdc:	f7ff fa28 	bl	8001030 <chThdSleep>
    sdWrite(&SD2, (unsigned char*)rx_buf, 35);
 8001be0:	4955      	ldr	r1, [pc, #340]	; (8001d38 <spi_thread_1+0x338>)
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	2223      	movs	r2, #35	; 0x23
 8001be8:	4638      	mov	r0, r7
 8001bea:	f7ff fa31 	bl	8001050 <oqWriteTimeout>
    chThdSleepMilliseconds(1000);
 8001bee:	f242 7010 	movw	r0, #10000	; 0x2710
 8001bf2:	f7ff fa1d 	bl	8001030 <chThdSleep>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001bf6:	f8da 2018 	ldr.w	r2, [sl, #24]
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001c00:	f7ff f956 	bl	8000eb0 <_stats_start_measure_crit_thd>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001c04:	68e0      	ldr	r0, [r4, #12]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8001c06:	69a3      	ldr	r3, [r4, #24]
 8001c08:	6393      	str	r3, [r2, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001c0a:	4548      	cmp	r0, r9
 8001c0c:	d060      	beq.n	8001cd0 <spi_thread_1+0x2d0>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001c0e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001c10:	b14b      	cbz	r3, 8001c26 <spi_thread_1+0x226>
 8001c12:	681d      	ldr	r5, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001c14:	42ab      	cmp	r3, r5
 8001c16:	d003      	beq.n	8001c20 <spi_thread_1+0x220>
 8001c18:	68ad      	ldr	r5, [r5, #8]
 8001c1a:	42a9      	cmp	r1, r5
 8001c1c:	bf38      	it	cc
 8001c1e:	4629      	movcc	r1, r5
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001c20:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f5      	bne.n	8001c12 <spi_thread_1+0x212>
  tqp->next             = tp->queue.next;
 8001c26:	6803      	ldr	r3, [r0, #0]
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8001c28:	6091      	str	r1, [r2, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8001c2a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001c2c:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001c2e:	f8c3 9004 	str.w	r9, [r3, #4]
      tp->mtxlist = mp;
 8001c32:	f8c0 9038 	str.w	r9, [r0, #56]	; 0x38
      mp->next = tp->mtxlist;
 8001c36:	e9c4 0205 	strd	r0, r2, [r4, #20]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001c3a:	f7fe fd79 	bl	8000730 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8001c3e:	f8da 2000 	ldr.w	r2, [sl]
 8001c42:	f8da 3018 	ldr.w	r3, [sl, #24]
  if (chSchIsRescRequiredI()) {
 8001c46:	6892      	ldr	r2, [r2, #8]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d849      	bhi.n	8001ce2 <spi_thread_1+0x2e2>
  _stats_stop_measure_crit_thd();
 8001c4e:	f7ff f927 	bl	8000ea0 <_stats_stop_measure_crit_thd>
 8001c52:	2300      	movs	r3, #0
 8001c54:	f383 8811 	msr	BASEPRI, r3
 8001c58:	e6e1      	b.n	8001a1e <spi_thread_1+0x1e>
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8001c5a:	f421 7184 	bic.w	r1, r1, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8001c5e:	f422 7284 	bic.w	r2, r2, #264	; 0x108
 8001c62:	e9c4 120a 	strd	r1, r2, [r4, #40]	; 0x28
 8001c66:	e736      	b.n	8001ad6 <spi_thread_1+0xd6>
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8001c68:	4934      	ldr	r1, [pc, #208]	; (8001d3c <spi_thread_1+0x33c>)
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f7fe fc10 	bl	8000490 <dmaStreamAllocI.part.0.constprop.0>
 8001c70:	4933      	ldr	r1, [pc, #204]	; (8001d40 <spi_thread_1+0x340>)
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 8001c72:	6220      	str	r0, [r4, #32]
 8001c74:	2004      	movs	r0, #4
 8001c76:	f7fe fc0b 	bl	8000490 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableSPI2(true);
 8001c7a:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <spi_thread_1+0x344>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001c7c:	6a21      	ldr	r1, [r4, #32]
      rccEnableSPI2(true);
 8001c7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001c80:	f8d1 c000 	ldr.w	ip, [r1]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001c84:	6865      	ldr	r5, [r4, #4]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001c86:	f8d0 e000 	ldr.w	lr, [r0]
      rccEnableSPI2(true);
 8001c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	6e11      	ldr	r1, [r2, #96]	; 0x60
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001c92:	69e3      	ldr	r3, [r4, #28]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8001c94:	6260      	str	r0, [r4, #36]	; 0x24
      rccEnableSPI2(true);
 8001c96:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001c9a:	8a28      	ldrh	r0, [r5, #16]
      rccEnableSPI2(true);
 8001c9c:	6611      	str	r1, [r2, #96]	; 0x60
 8001c9e:	6e12      	ldr	r2, [r2, #96]	; 0x60
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001ca0:	f103 020c 	add.w	r2, r3, #12
 8001ca4:	f8cc 2008 	str.w	r2, [ip, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001ca8:	f8ce 2008 	str.w	r2, [lr, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001cac:	0502      	lsls	r2, r0, #20
 8001cae:	d574      	bpl.n	8001d9a <spi_thread_1+0x39a>
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cb0:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8001cb4:	f8b5 c012 	ldrh.w	ip, [r5, #18]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cb8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001cbc:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cc0:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001cc4:	62e2      	str	r2, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001cc6:	f441 5120 	orr.w	r1, r1, #10240	; 0x2800
 8001cca:	f04c 0c07 	orr.w	ip, ip, #7
 8001cce:	e6f8      	b.n	8001ac2 <spi_thread_1+0xc2>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 8001cd0:	f8c4 b014 	str.w	fp, [r4, #20]
 8001cd4:	e7bb      	b.n	8001c4e <spi_thread_1+0x24e>
    mp->next = ctp->mtxlist;
 8001cd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
    ctp->mtxlist = mp;
 8001cd8:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
    mp->next = ctp->mtxlist;
 8001cdc:	e9c4 5305 	strd	r5, r3, [r4, #20]
 8001ce0:	e6d2      	b.n	8001a88 <spi_thread_1+0x88>
    chSchDoRescheduleAhead();
 8001ce2:	f7ff fe5d 	bl	80019a0 <chSchDoReschedule>
 8001ce6:	e7b2      	b.n	8001c4e <spi_thread_1+0x24e>
  tp->queue.prev->queue.next = tp->queue.next;
 8001ce8:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001cec:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001cee:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8001cf0:	f7fe fd1e 	bl	8000730 <chSchReadyI>
 8001cf4:	e6b5      	b.n	8001a62 <spi_thread_1+0x62>
  tp->queue.prev->queue.next = tp->queue.next;
 8001cf6:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001cfa:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8001cfe:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001d00:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8001d02:	4663      	mov	r3, ip
 8001d04:	e025      	b.n	8001d52 <spi_thread_1+0x352>
 8001d06:	bf00      	nop
 8001d08:	200008f8 	.word	0x200008f8
 8001d0c:	080023f0 	.word	0x080023f0
 8001d10:	40020400 	.word	0x40020400
 8001d14:	20000830 	.word	0x20000830
 8001d18:	08002400 	.word	0x08002400
 8001d1c:	20000904 	.word	0x20000904
 8001d20:	0800260c 	.word	0x0800260c
 8001d24:	200014c2 	.word	0x200014c2
 8001d28:	200014c3 	.word	0x200014c3
 8001d2c:	200014c4 	.word	0x200014c4
 8001d30:	200014b8 	.word	0x200014b8
 8001d34:	08002408 	.word	0x08002408
 8001d38:	20000be4 	.word	0x20000be4
 8001d3c:	080009d1 	.word	0x080009d1
 8001d40:	080009b1 	.word	0x080009b1
 8001d44:	40023800 	.word	0x40023800
 8001d48:	20000928 	.word	0x20000928
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001d4c:	6899      	ldr	r1, [r3, #8]
 8001d4e:	4291      	cmp	r1, r2
 8001d50:	d302      	bcc.n	8001d58 <spi_thread_1+0x358>
    cp = cp->queue.next;
 8001d52:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001d54:	459c      	cmp	ip, r3
 8001d56:	d1f9      	bne.n	8001d4c <spi_thread_1+0x34c>
  tp->queue.prev             = cp->queue.prev;
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001d5e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001d60:	6058      	str	r0, [r3, #4]
 8001d62:	e67e      	b.n	8001a62 <spi_thread_1+0x62>
  tp->queue.prev->queue.next = tp->queue.next;
 8001d64:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001d68:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8001d6c:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001d6e:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8001d70:	4663      	mov	r3, ip
 8001d72:	e002      	b.n	8001d7a <spi_thread_1+0x37a>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001d74:	6899      	ldr	r1, [r3, #8]
 8001d76:	4291      	cmp	r1, r2
 8001d78:	d302      	bcc.n	8001d80 <spi_thread_1+0x380>
    cp = cp->queue.next;
 8001d7a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001d7c:	459c      	cmp	ip, r3
 8001d7e:	d1f9      	bne.n	8001d74 <spi_thread_1+0x374>
  tp->queue.prev             = cp->queue.prev;
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001d86:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001d88:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8001d8a:	f8dc 0008 	ldr.w	r0, [ip, #8]
      while (tp->prio < ctp->prio) {
 8001d8e:	68aa      	ldr	r2, [r5, #8]
 8001d90:	6883      	ldr	r3, [r0, #8]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	f63f ae59 	bhi.w	8001a4a <spi_thread_1+0x4a>
 8001d98:	e663      	b.n	8001a62 <spi_thread_1+0x62>
 8001d9a:	f8b5 c012 	ldrh.w	ip, [r5, #18]
 8001d9e:	f04c 0c07 	orr.w	ip, ip, #7
 8001da2:	e686      	b.n	8001ab2 <spi_thread_1+0xb2>
	...

08001db0 <__early_init>:
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001db0:	4a46      	ldr	r2, [pc, #280]	; (8001ecc <__early_init+0x11c>)
  gpiop->OTYPER  = config->otyper;
 8001db2:	4947      	ldr	r1, [pc, #284]	; (8001ed0 <__early_init+0x120>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001db4:	6913      	ldr	r3, [r2, #16]
  gpiop->PUPDR   = config->pupdr;
 8001db6:	f8df c150 	ldr.w	ip, [pc, #336]	; 8001f08 <__early_init+0x158>
  gpiop->OTYPER  = config->otyper;
 8001dba:	4846      	ldr	r0, [pc, #280]	; (8001ed4 <__early_init+0x124>)
void __early_init(void) {
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001dbe:	f240 16ff 	movw	r6, #511	; 0x1ff
 8001dc2:	4333      	orrs	r3, r6
 8001dc4:	6113      	str	r3, [r2, #16]
 8001dc6:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001dc8:	4d43      	ldr	r5, [pc, #268]	; (8001ed8 <__early_init+0x128>)
  gpiop->AFRL    = config->afrl;
 8001dca:	f8df e140 	ldr.w	lr, [pc, #320]	; 8001f0c <__early_init+0x15c>
  gpiop->OTYPER  = config->otyper;
 8001dce:	4c43      	ldr	r4, [pc, #268]	; (8001edc <__early_init+0x12c>)
 8001dd0:	4f43      	ldr	r7, [pc, #268]	; (8001ee0 <__early_init+0x130>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001dd2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6113      	str	r3, [r2, #16]
 8001ddc:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001dde:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001de0:	4333      	orrs	r3, r6
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001de6:	4333      	orrs	r3, r6
 8001de8:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8001dea:	f46f 46a8 	mvn.w	r6, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8001dee:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001df0:	6d12      	ldr	r2, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001df2:	604b      	str	r3, [r1, #4]
  gpiop->ODR     = config->odr;
 8001df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8001df8:	608e      	str	r6, [r1, #8]
  gpiop->AFRH    = config->afrh;
 8001dfa:	4e3a      	ldr	r6, [pc, #232]	; (8001ee4 <__early_init+0x134>)
  gpiop->PUPDR   = config->pupdr;
 8001dfc:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8001e00:	614a      	str	r2, [r1, #20]
  gpiop->MODER   = config->moder;
 8001e02:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8001f10 <__early_init+0x160>
  gpiop->AFRL    = config->afrl;
 8001e06:	f8c1 e020 	str.w	lr, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001e0a:	624e      	str	r6, [r1, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8001e0c:	f44f 7610 	mov.w	r6, #576	; 0x240
  gpiop->MODER   = config->moder;
 8001e10:	f8c1 c000 	str.w	ip, [r1]
  gpiop->OTYPER  = config->otyper;
 8001e14:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8001e1a:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8001f14 <__early_init+0x164>
  gpiop->OSPEEDR = config->ospeedr;
 8001e1e:	60a9      	str	r1, [r5, #8]
  gpiop->AFRL    = config->afrl;
 8001e20:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 8001e24:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
 8001e28:	616a      	str	r2, [r5, #20]
  gpiop->AFRH    = config->afrh;
 8001e2a:	f04f 0c40 	mov.w	ip, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 8001e2e:	622e      	str	r6, [r5, #32]
  gpiop->MODER   = config->moder;
 8001e30:	4e2d      	ldr	r6, [pc, #180]	; (8001ee8 <__early_init+0x138>)
  gpiop->AFRH    = config->afrh;
 8001e32:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001e36:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 8001e38:	f105 55a2 	add.w	r5, r5, #339738624	; 0x14400000
 8001e3c:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
 8001e40:	f505 75aa 	add.w	r5, r5, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 8001e44:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001e46:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e48:	60e5      	str	r5, [r4, #12]
  gpiop->AFRL    = config->afrl;
 8001e4a:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8001e4e:	6162      	str	r2, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001e50:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001e52:	4d26      	ldr	r5, [pc, #152]	; (8001eec <__early_init+0x13c>)
 8001e54:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001e56:	4d26      	ldr	r5, [pc, #152]	; (8001ef0 <__early_init+0x140>)
 8001e58:	6025      	str	r5, [r4, #0]
  gpiop->PUPDR   = config->pupdr;
 8001e5a:	4c26      	ldr	r4, [pc, #152]	; (8001ef4 <__early_init+0x144>)
  gpiop->OTYPER  = config->otyper;
 8001e5c:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001e5e:	6081      	str	r1, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e60:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8001e62:	f640 74ff 	movw	r4, #4095	; 0xfff
 8001e66:	6144      	str	r4, [r0, #20]
  gpiop->MODER   = config->moder;
 8001e68:	4c23      	ldr	r4, [pc, #140]	; (8001ef8 <__early_init+0x148>)
  gpiop->AFRL    = config->afrl;
 8001e6a:	6203      	str	r3, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 8001e6c:	4e23      	ldr	r6, [pc, #140]	; (8001efc <__early_init+0x14c>)
  gpiop->AFRH    = config->afrh;
 8001e6e:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8001e70:	4d23      	ldr	r5, [pc, #140]	; (8001f00 <__early_init+0x150>)
  gpiop->MODER   = config->moder;
 8001e72:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8001e74:	4c23      	ldr	r4, [pc, #140]	; (8001f04 <__early_init+0x154>)
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
  gpiop->OSPEEDR = config->ospeedr;
 8001e7c:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e7e:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8001e80:	617a      	str	r2, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8001e82:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001e86:	f8c7 c000 	str.w	ip, [r7]
  gpiop->OTYPER  = config->otyper;
 8001e8a:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001e8c:	60b1      	str	r1, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e8e:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8001e90:	6172      	str	r2, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001e92:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8001e94:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001e96:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8001e98:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001e9a:	60a9      	str	r1, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e9c:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8001e9e:	616a      	str	r2, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8001ea0:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001ea2:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001ea4:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8001ea6:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001ea8:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001eaa:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8001eac:	6162      	str	r2, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001eae:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001eb0:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001eb2:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8001eb4:	6043      	str	r3, [r0, #4]
}
 8001eb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  gpiop->OSPEEDR = config->ospeedr;
 8001eba:	6081      	str	r1, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001ebc:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 8001ebe:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8001ec0:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001ec2:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001ec4:	6003      	str	r3, [r0, #0]
  stm32_clock_init();
 8001ec6:	f7fe be53 	b.w	8000b70 <stm32_clock_init>
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	000aaa00 	.word	0x000aaa00
 8001ee8:	00082080 	.word	0x00082080
 8001eec:	00060600 	.word	0x00060600
 8001ef0:	02208001 	.word	0x02208001
 8001ef4:	00555055 	.word	0x00555055
 8001ef8:	55000100 	.word	0x55000100
 8001efc:	40021400 	.word	0x40021400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	40010054 	.word	0x40010054
 8001f0c:	55560000 	.word	0x55560000
 8001f10:	2aa0aa00 	.word	0x2aa0aa00
 8001f14:	55514515 	.word	0x55514515
	...

08001f20 <Vector110>:
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8001f20:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8001f22:	f7fe fb5d 	bl	80005e0 <_stats_increase_irq>
  serve_interrupt(&SD4);
 8001f26:	4803      	ldr	r0, [pc, #12]	; (8001f34 <Vector110+0x14>)
 8001f28:	f7fe fc52 	bl	80007d0 <serve_interrupt>
}
 8001f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001f30:	f7fe bb16 	b.w	8000560 <_port_irq_epilogue>
 8001f34:	2000087c 	.word	0x2000087c
	...

08001f40 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001f40:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8001f42:	f7fe fb4d 	bl	80005e0 <_stats_increase_irq>
  serve_interrupt(&SD2);
 8001f46:	4803      	ldr	r0, [pc, #12]	; (8001f54 <VectorD8+0x14>)
 8001f48:	f7fe fc42 	bl	80007d0 <serve_interrupt>
}
 8001f4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001f50:	f7fe bb06 	b.w	8000560 <_port_irq_epilogue>
 8001f54:	20000800 	.word	0x20000800
	...

08001f60 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8001f64:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 8001f68:	f7fe fb3a 	bl	80005e0 <_stats_increase_irq>
  sr  = timp->SR;
 8001f6c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001f6e:	68ea      	ldr	r2, [r5, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8001f74:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001f76:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8001f78:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8001f7a:	d403      	bmi.n	8001f84 <VectorB0+0x24>
}
 8001f7c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001f80:	f7fe baee 	b.w	8000560 <_port_irq_epilogue>
 8001f84:	2320      	movs	r3, #32
 8001f86:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8001f8a:	4e26      	ldr	r6, [pc, #152]	; (8002024 <VectorB0+0xc4>)
  _stats_start_measure_crit_isr();
 8001f8c:	f7fe fb90 	bl	80006b0 <_stats_start_measure_crit_isr>
 8001f90:	69f4      	ldr	r4, [r6, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 8001f92:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001f94:	6ab3      	ldr	r3, [r6, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8001f96:	68a2      	ldr	r2, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8001f98:	eba0 0903 	sub.w	r9, r0, r3
 8001f9c:	454a      	cmp	r2, r9
 8001f9e:	f106 0a1c 	add.w	sl, r6, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8001fa2:	bf98      	it	ls
 8001fa4:	2700      	movls	r7, #0
    if (nowdelta < vtp->delta) {
 8001fa6:	d825      	bhi.n	8001ff4 <VectorB0+0x94>
 8001fa8:	f04f 0820 	mov.w	r8, #32
 8001fac:	e000      	b.n	8001fb0 <VectorB0+0x50>
 8001fae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001fb0:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 8001fb2:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 8001fb6:	4413      	add	r3, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001fb8:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8001fba:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001fbc:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 8001fc0:	61f1      	str	r1, [r6, #28]
      vtp->func = NULL;
 8001fc2:	60e7      	str	r7, [r4, #12]
  STM32_ST_TIM->DIER = 0U;
 8001fc4:	bf08      	it	eq
 8001fc6:	60ef      	streq	r7, [r5, #12]
      nowdelta -= vtp->delta;
 8001fc8:	eba9 0902 	sub.w	r9, r9, r2
  _stats_stop_measure_crit_isr();
 8001fcc:	f7fe fb60 	bl	8000690 <_stats_stop_measure_crit_isr>
 8001fd0:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8001fd4:	6920      	ldr	r0, [r4, #16]
 8001fd6:	47d8      	blx	fp
 8001fd8:	f388 8811 	msr	BASEPRI, r8
  _stats_start_measure_crit_isr();
 8001fdc:	f7fe fb68 	bl	80006b0 <_stats_start_measure_crit_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8001fe0:	69f4      	ldr	r4, [r6, #28]
    }
    while (vtp->delta <= nowdelta);
 8001fe2:	68a2      	ldr	r2, [r4, #8]
 8001fe4:	4591      	cmp	r9, r2
 8001fe6:	d2e2      	bcs.n	8001fae <VectorB0+0x4e>
  return (systime_t)STM32_ST_TIM->CNT;
 8001fe8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001fea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001fec:	eba0 0903 	sub.w	r9, r0, r3
    if (nowdelta < vtp->delta) {
 8001ff0:	4591      	cmp	r9, r2
 8001ff2:	d2d9      	bcs.n	8001fa8 <VectorB0+0x48>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001ff4:	4554      	cmp	r4, sl
 8001ff6:	d00b      	beq.n	8002010 <VectorB0+0xb0>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8001ff8:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.lasttime += nowdelta;
 8001ffa:	62b0      	str	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8001ffc:	1a12      	subs	r2, r2, r0
 8001ffe:	4413      	add	r3, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8002004:	2b02      	cmp	r3, #2
 8002006:	bf2c      	ite	cs
 8002008:	18c0      	addcs	r0, r0, r3
 800200a:	3002      	addcc	r0, #2
 800200c:	60a3      	str	r3, [r4, #8]
 800200e:	6350      	str	r0, [r2, #52]	; 0x34
  _stats_stop_measure_crit_isr();
 8002010:	f7fe fb3e 	bl	8000690 <_stats_stop_measure_crit_isr>
 8002014:	2300      	movs	r3, #0
 8002016:	f383 8811 	msr	BASEPRI, r3
}
 800201a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 800201e:	f7fe ba9f 	b.w	8000560 <_port_irq_epilogue>
 8002022:	bf00      	nop
 8002024:	20000928 	.word	0x20000928
	...

08002030 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002030:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002032:	f7fe fad5 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <Vector158+0x28>)
  if (dma.streams[15].func)
 8002038:	4808      	ldr	r0, [pc, #32]	; (800205c <Vector158+0x2c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800203a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 800203c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800203e:	0d89      	lsrs	r1, r1, #22
 8002040:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8002044:	058c      	lsls	r4, r1, #22
 8002046:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8002048:	b112      	cbz	r2, 8002050 <Vector158+0x20>
    dma.streams[15].func(dma.streams[15].param, flags);
 800204a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800204e:	4790      	blx	r2
}
 8002050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002054:	f7fe ba84 	b.w	8000560 <_port_irq_epilogue>
 8002058:	40026400 	.word	0x40026400
 800205c:	20000b5c 	.word	0x20000b5c

08002060 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002060:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002062:	f7fe fabd 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <Vector154+0x28>)
  if (dma.streams[14].func)
 8002068:	4808      	ldr	r0, [pc, #32]	; (800208c <Vector154+0x2c>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800206a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 800206c:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800206e:	0c09      	lsrs	r1, r1, #16
 8002070:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8002074:	040c      	lsls	r4, r1, #16
 8002076:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8002078:	b10a      	cbz	r2, 800207e <Vector154+0x1e>
    dma.streams[14].func(dma.streams[14].param, flags);
 800207a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800207c:	4790      	blx	r2
}
 800207e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002082:	f7fe ba6d 	b.w	8000560 <_port_irq_epilogue>
 8002086:	bf00      	nop
 8002088:	40026400 	.word	0x40026400
 800208c:	20000b5c 	.word	0x20000b5c

08002090 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002090:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002092:	f7fe faa5 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <Vector150+0x28>)
  if (dma.streams[13].func)
 8002098:	4808      	ldr	r0, [pc, #32]	; (80020bc <Vector150+0x2c>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800209a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 800209c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800209e:	0989      	lsrs	r1, r1, #6
 80020a0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 80020a4:	018c      	lsls	r4, r1, #6
 80020a6:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80020a8:	b10a      	cbz	r2, 80020ae <Vector150+0x1e>
    dma.streams[13].func(dma.streams[13].param, flags);
 80020aa:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80020ac:	4790      	blx	r2
}
 80020ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80020b2:	f7fe ba55 	b.w	8000560 <_port_irq_epilogue>
 80020b6:	bf00      	nop
 80020b8:	40026400 	.word	0x40026400
 80020bc:	20000b5c 	.word	0x20000b5c

080020c0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80020c0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80020c2:	f7fe fa8d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <Vector130+0x24>)
  if (dma.streams[12].func)
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <Vector130+0x28>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80020ca:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 80020cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80020ce:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80020d2:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 80020d4:	b10a      	cbz	r2, 80020da <Vector130+0x1a>
    dma.streams[12].func(dma.streams[12].param, flags);
 80020d6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80020d8:	4790      	blx	r2
}
 80020da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80020de:	f7fe ba3f 	b.w	8000560 <_port_irq_epilogue>
 80020e2:	bf00      	nop
 80020e4:	40026400 	.word	0x40026400
 80020e8:	20000b5c 	.word	0x20000b5c
 80020ec:	00000000 	.word	0x00000000

080020f0 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80020f0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80020f2:	f7fe fa75 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <Vector12C+0x28>)
  if (dma.streams[11].func)
 80020f8:	4808      	ldr	r0, [pc, #32]	; (800211c <Vector12C+0x2c>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80020fa:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 80020fc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80020fe:	0d89      	lsrs	r1, r1, #22
 8002100:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8002104:	058c      	lsls	r4, r1, #22
 8002106:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8002108:	b10a      	cbz	r2, 800210e <Vector12C+0x1e>
    dma.streams[11].func(dma.streams[11].param, flags);
 800210a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800210c:	4790      	blx	r2
}
 800210e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002112:	f7fe ba25 	b.w	8000560 <_port_irq_epilogue>
 8002116:	bf00      	nop
 8002118:	40026400 	.word	0x40026400
 800211c:	20000b5c 	.word	0x20000b5c

08002120 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002120:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002122:	f7fe fa5d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <Vector128+0x28>)
  if (dma.streams[10].func)
 8002128:	4808      	ldr	r0, [pc, #32]	; (800214c <Vector128+0x2c>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800212a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 800212c:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800212e:	0c09      	lsrs	r1, r1, #16
 8002130:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8002134:	040c      	lsls	r4, r1, #16
 8002136:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8002138:	b10a      	cbz	r2, 800213e <Vector128+0x1e>
    dma.streams[10].func(dma.streams[10].param, flags);
 800213a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800213c:	4790      	blx	r2
}
 800213e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002142:	f7fe ba0d 	b.w	8000560 <_port_irq_epilogue>
 8002146:	bf00      	nop
 8002148:	40026400 	.word	0x40026400
 800214c:	20000b5c 	.word	0x20000b5c

08002150 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002150:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002152:	f7fe fa45 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <Vector124+0x28>)
  if (dma.streams[9].func)
 8002158:	4808      	ldr	r0, [pc, #32]	; (800217c <Vector124+0x2c>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800215a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 800215c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800215e:	0989      	lsrs	r1, r1, #6
 8002160:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 8002164:	018c      	lsls	r4, r1, #6
 8002166:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8002168:	b10a      	cbz	r2, 800216e <Vector124+0x1e>
    dma.streams[9].func(dma.streams[9].param, flags);
 800216a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800216c:	4790      	blx	r2
}
 800216e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002172:	f7fe b9f5 	b.w	8000560 <_port_irq_epilogue>
 8002176:	bf00      	nop
 8002178:	40026400 	.word	0x40026400
 800217c:	20000b5c 	.word	0x20000b5c

08002180 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002180:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002182:	f7fe fa2d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <Vector120+0x24>)
  if (dma.streams[8].func)
 8002188:	4807      	ldr	r0, [pc, #28]	; (80021a8 <Vector120+0x28>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800218a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 800218c:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800218e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002192:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8002194:	b10a      	cbz	r2, 800219a <Vector120+0x1a>
    dma.streams[8].func(dma.streams[8].param, flags);
 8002196:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002198:	4790      	blx	r2
}
 800219a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800219e:	f7fe b9df 	b.w	8000560 <_port_irq_epilogue>
 80021a2:	bf00      	nop
 80021a4:	40026400 	.word	0x40026400
 80021a8:	20000b5c 	.word	0x20000b5c
 80021ac:	00000000 	.word	0x00000000

080021b0 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80021b0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80021b2:	f7fe fa15 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <VectorFC+0x28>)
  if (dma.streams[7].func)
 80021b8:	4808      	ldr	r0, [pc, #32]	; (80021dc <VectorFC+0x2c>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80021ba:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 80021bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80021be:	0d89      	lsrs	r1, r1, #22
 80021c0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 80021c4:	058c      	lsls	r4, r1, #22
 80021c6:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 80021c8:	b10a      	cbz	r2, 80021ce <VectorFC+0x1e>
    dma.streams[7].func(dma.streams[7].param, flags);
 80021ca:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80021cc:	4790      	blx	r2
}
 80021ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80021d2:	f7fe b9c5 	b.w	8000560 <_port_irq_epilogue>
 80021d6:	bf00      	nop
 80021d8:	40026000 	.word	0x40026000
 80021dc:	20000b5c 	.word	0x20000b5c

080021e0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80021e0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80021e2:	f7fe f9fd 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <Vector84+0x28>)
  if (dma.streams[6].func)
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <Vector84+0x2c>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80021ea:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 80021ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80021ee:	0c09      	lsrs	r1, r1, #16
 80021f0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 80021f4:	040c      	lsls	r4, r1, #16
 80021f6:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 80021f8:	b10a      	cbz	r2, 80021fe <Vector84+0x1e>
    dma.streams[6].func(dma.streams[6].param, flags);
 80021fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80021fc:	4790      	blx	r2
}
 80021fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002202:	f7fe b9ad 	b.w	8000560 <_port_irq_epilogue>
 8002206:	bf00      	nop
 8002208:	40026000 	.word	0x40026000
 800220c:	20000b5c 	.word	0x20000b5c

08002210 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002210:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002212:	f7fe f9e5 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <Vector80+0x28>)
  if (dma.streams[5].func)
 8002218:	4808      	ldr	r0, [pc, #32]	; (800223c <Vector80+0x2c>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800221a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 800221c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800221e:	0989      	lsrs	r1, r1, #6
 8002220:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8002224:	018c      	lsls	r4, r1, #6
 8002226:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8002228:	b10a      	cbz	r2, 800222e <Vector80+0x1e>
    dma.streams[5].func(dma.streams[5].param, flags);
 800222a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800222c:	4790      	blx	r2
}
 800222e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002232:	f7fe b995 	b.w	8000560 <_port_irq_epilogue>
 8002236:	bf00      	nop
 8002238:	40026000 	.word	0x40026000
 800223c:	20000b5c 	.word	0x20000b5c

08002240 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002240:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002242:	f7fe f9cd 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <Vector7C+0x24>)
  if (dma.streams[4].func)
 8002248:	4807      	ldr	r0, [pc, #28]	; (8002268 <Vector7C+0x28>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800224a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 800224c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800224e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8002252:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8002254:	b10a      	cbz	r2, 800225a <Vector7C+0x1a>
    dma.streams[4].func(dma.streams[4].param, flags);
 8002256:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002258:	4790      	blx	r2
}
 800225a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800225e:	f7fe b97f 	b.w	8000560 <_port_irq_epilogue>
 8002262:	bf00      	nop
 8002264:	40026000 	.word	0x40026000
 8002268:	20000b5c 	.word	0x20000b5c
 800226c:	00000000 	.word	0x00000000

08002270 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002270:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002272:	f7fe f9b5 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <Vector78+0x28>)
  if (dma.streams[3].func)
 8002278:	4808      	ldr	r0, [pc, #32]	; (800229c <Vector78+0x2c>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800227a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 800227c:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800227e:	0d89      	lsrs	r1, r1, #22
 8002280:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 8002284:	058c      	lsls	r4, r1, #22
 8002286:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8002288:	b10a      	cbz	r2, 800228e <Vector78+0x1e>
    dma.streams[3].func(dma.streams[3].param, flags);
 800228a:	6a00      	ldr	r0, [r0, #32]
 800228c:	4790      	blx	r2
}
 800228e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002292:	f7fe b965 	b.w	8000560 <_port_irq_epilogue>
 8002296:	bf00      	nop
 8002298:	40026000 	.word	0x40026000
 800229c:	20000b5c 	.word	0x20000b5c

080022a0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80022a0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80022a2:	f7fe f99d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <Vector74+0x28>)
  if (dma.streams[2].func)
 80022a8:	4808      	ldr	r0, [pc, #32]	; (80022cc <Vector74+0x2c>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80022aa:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80022ac:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80022ae:	0c09      	lsrs	r1, r1, #16
 80022b0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 80022b4:	040c      	lsls	r4, r1, #16
 80022b6:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 80022b8:	b10a      	cbz	r2, 80022be <Vector74+0x1e>
    dma.streams[2].func(dma.streams[2].param, flags);
 80022ba:	6980      	ldr	r0, [r0, #24]
 80022bc:	4790      	blx	r2
}
 80022be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80022c2:	f7fe b94d 	b.w	8000560 <_port_irq_epilogue>
 80022c6:	bf00      	nop
 80022c8:	40026000 	.word	0x40026000
 80022cc:	20000b5c 	.word	0x20000b5c

080022d0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80022d0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80022d2:	f7fe f985 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <Vector70+0x28>)
  if (dma.streams[1].func)
 80022d8:	4808      	ldr	r0, [pc, #32]	; (80022fc <Vector70+0x2c>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80022da:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 80022dc:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80022de:	0989      	lsrs	r1, r1, #6
 80022e0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 80022e4:	018c      	lsls	r4, r1, #6
 80022e6:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 80022e8:	b10a      	cbz	r2, 80022ee <Vector70+0x1e>
    dma.streams[1].func(dma.streams[1].param, flags);
 80022ea:	6900      	ldr	r0, [r0, #16]
 80022ec:	4790      	blx	r2
}
 80022ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80022f2:	f7fe b935 	b.w	8000560 <_port_irq_epilogue>
 80022f6:	bf00      	nop
 80022f8:	40026000 	.word	0x40026000
 80022fc:	20000b5c 	.word	0x20000b5c

08002300 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002300:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002302:	f7fe f96d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <Vector6C+0x24>)
  if (dma.streams[0].func)
 8002308:	4807      	ldr	r0, [pc, #28]	; (8002328 <Vector6C+0x28>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800230a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 800230c:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800230e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002312:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8002314:	b10a      	cbz	r2, 800231a <Vector6C+0x1a>
    dma.streams[0].func(dma.streams[0].param, flags);
 8002316:	6880      	ldr	r0, [r0, #8]
 8002318:	4790      	blx	r2
}
 800231a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800231e:	f7fe b91f 	b.w	8000560 <_port_irq_epilogue>
 8002322:	bf00      	nop
 8002324:	40026000 	.word	0x40026000
 8002328:	20000b5c 	.word	0x20000b5c
 800232c:	00000000 	.word	0x00000000

08002330 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002330:	b4f0      	push	{r4, r5, r6, r7}
 8002332:	4f14      	ldr	r7, [pc, #80]	; (8002384 <__init_ram_areas+0x54>)
 8002334:	4d14      	ldr	r5, [pc, #80]	; (8002388 <__init_ram_areas+0x58>)
 8002336:	4815      	ldr	r0, [pc, #84]	; (800238c <__init_ram_areas+0x5c>)
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <__init_ram_areas+0x60>)
 800233a:	4916      	ldr	r1, [pc, #88]	; (8002394 <__init_ram_areas+0x64>)
 800233c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002340:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8002342:	4298      	cmp	r0, r3
 8002344:	d911      	bls.n	800236a <__init_ram_areas+0x3a>
 8002346:	3904      	subs	r1, #4
 8002348:	461a      	mov	r2, r3
      *p = *tp;
 800234a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800234e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8002352:	4290      	cmp	r0, r2
 8002354:	d8f9      	bhi.n	800234a <__init_ram_areas+0x1a>
 8002356:	1e42      	subs	r2, r0, #1
 8002358:	1ad2      	subs	r2, r2, r3
 800235a:	f022 0203 	bic.w	r2, r2, #3
 800235e:	3204      	adds	r2, #4
 8002360:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8002362:	429d      	cmp	r5, r3
 8002364:	d903      	bls.n	800236e <__init_ram_areas+0x3e>
      *p = 0;
 8002366:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800236a:	429d      	cmp	r5, r3
 800236c:	d8fb      	bhi.n	8002366 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800236e:	4567      	cmp	r7, ip
 8002370:	d005      	beq.n	800237e <__init_ram_areas+0x4e>
 8002372:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8002376:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800237a:	3710      	adds	r7, #16
 800237c:	e7e1      	b.n	8002342 <__init_ram_areas+0x12>
#endif
}
 800237e:	bcf0      	pop	{r4, r5, r6, r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	08002620 	.word	0x08002620
 8002388:	200014c8 	.word	0x200014c8
 800238c:	200014c8 	.word	0x200014c8
 8002390:	200014c8 	.word	0x200014c8
 8002394:	080026c8 	.word	0x080026c8
	...

080023a0 <__default_exit>:
  while (true) {
 80023a0:	e7fe      	b.n	80023a0 <__default_exit>
 80023a2:	bf00      	nop
	...

080023b0 <__late_init>:
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
	...

080023c0 <__core_init>:
}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
