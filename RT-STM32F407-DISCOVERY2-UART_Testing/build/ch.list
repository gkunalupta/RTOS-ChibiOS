
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08000c71 	.word	0x08000c71
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08001971 	.word	0x08001971
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08001951 	.word	0x08001951
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	08001931 	.word	0x08001931
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f001 fc64 	bl	8001ad0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f001 fa5a 	bl	80016c0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f001 fbf6 	bl	8001a40 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f001 fc34 	bl	8001ac0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f000 fee2 	bl	8001030 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f001 bc18 	b.w	8001ab0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	08001bc0 	.word	0x08001bc0
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002a0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002a4:	20000c98 	.word	0x20000c98
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002d0:	f000 fcde 	bl	8000c90 <_stats_stop_measure_crit_thd>
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002da:	4628      	mov	r0, r5
                blx     r4
 80002dc:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002de:	2000      	movs	r0, #0
                bl      chThdExit
 80002e0:	f001 f996 	bl	8001610 <chThdExit>

080002e4 <_zombies>:
_zombies:       b       _zombies
 80002e4:	e7fe      	b.n	80002e4 <_zombies>

080002e6 <_port_switch_from_isr>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch_from_isr
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
 80002e6:	f000 fcdb 	bl	8000ca0 <_stats_start_measure_crit_thd>
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002ea:	f001 f9b9 	bl	8001660 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002ee:	f000 fccf 	bl	8000c90 <_stats_stop_measure_crit_thd>

080002f2 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002f2:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002f4:	e7fe      	b.n	80002f4 <_port_exit_from_isr+0x2>
	...

080002f8 <memcpy>:
 80002f8:	4684      	mov	ip, r0
 80002fa:	ea41 0300 	orr.w	r3, r1, r0
 80002fe:	f013 0303 	ands.w	r3, r3, #3
 8000302:	d16d      	bne.n	80003e0 <memcpy+0xe8>
 8000304:	3a40      	subs	r2, #64	; 0x40
 8000306:	d341      	bcc.n	800038c <memcpy+0x94>
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	3a40      	subs	r2, #64	; 0x40
 800038a:	d2bd      	bcs.n	8000308 <memcpy+0x10>
 800038c:	3230      	adds	r2, #48	; 0x30
 800038e:	d311      	bcc.n	80003b4 <memcpy+0xbc>
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	3a10      	subs	r2, #16
 80003b2:	d2ed      	bcs.n	8000390 <memcpy+0x98>
 80003b4:	320c      	adds	r2, #12
 80003b6:	d305      	bcc.n	80003c4 <memcpy+0xcc>
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	3a04      	subs	r2, #4
 80003c2:	d2f9      	bcs.n	80003b8 <memcpy+0xc0>
 80003c4:	3204      	adds	r2, #4
 80003c6:	d008      	beq.n	80003da <memcpy+0xe2>
 80003c8:	07d2      	lsls	r2, r2, #31
 80003ca:	bf1c      	itt	ne
 80003cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003d4:	d301      	bcc.n	80003da <memcpy+0xe2>
 80003d6:	880b      	ldrh	r3, [r1, #0]
 80003d8:	8003      	strh	r3, [r0, #0]
 80003da:	4660      	mov	r0, ip
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2a08      	cmp	r2, #8
 80003e2:	d313      	bcc.n	800040c <memcpy+0x114>
 80003e4:	078b      	lsls	r3, r1, #30
 80003e6:	d08d      	beq.n	8000304 <memcpy+0xc>
 80003e8:	f010 0303 	ands.w	r3, r0, #3
 80003ec:	d08a      	beq.n	8000304 <memcpy+0xc>
 80003ee:	f1c3 0304 	rsb	r3, r3, #4
 80003f2:	1ad2      	subs	r2, r2, r3
 80003f4:	07db      	lsls	r3, r3, #31
 80003f6:	bf1c      	itt	ne
 80003f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000400:	d380      	bcc.n	8000304 <memcpy+0xc>
 8000402:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000406:	f820 3b02 	strh.w	r3, [r0], #2
 800040a:	e77b      	b.n	8000304 <memcpy+0xc>
 800040c:	3a04      	subs	r2, #4
 800040e:	d3d9      	bcc.n	80003c4 <memcpy+0xcc>
 8000410:	3a01      	subs	r2, #1
 8000412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000416:	f800 3b01 	strb.w	r3, [r0], #1
 800041a:	d2f9      	bcs.n	8000410 <memcpy+0x118>
 800041c:	780b      	ldrb	r3, [r1, #0]
 800041e:	7003      	strb	r3, [r0, #0]
 8000420:	784b      	ldrb	r3, [r1, #1]
 8000422:	7043      	strb	r3, [r0, #1]
 8000424:	788b      	ldrb	r3, [r1, #2]
 8000426:	7083      	strb	r3, [r0, #2]
 8000428:	4660      	mov	r0, ip
 800042a:	4770      	bx	lr
 800042c:	0000      	movs	r0, r0
	...

08000430 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify)
 8000430:	b4f0      	push	{r4, r5, r6, r7}
{

  sdp->vmt = &vmt;
 8000432:	4603      	mov	r3, r0
 8000434:	4a12      	ldr	r2, [pc, #72]	; (8000480 <sdObjectInit.constprop.0+0x50>)
 8000436:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800043a:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800043c:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800043e:	2710      	movs	r7, #16
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000440:	f100 0674 	add.w	r6, r0, #116	; 0x74
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000444:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000448:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 800044a:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;   // q_top is pointer which points to frst location after buffer, so bp(which is address pointer to
 800044c:	f100 0364 	add.w	r3, r0, #100	; 0x64
  sdp->state = SD_STOP;
 8000450:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000452:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000456:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 800045a:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 800045c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8000460:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8000462:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8000464:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8000466:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 800046a:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 800046c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8000470:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8000474:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8000476:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;// q_buffer will always store the pointer to buffer which will store input data
 8000478:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;   // q_top is pointer which points to frst location after buffer, so bp(which is address pointer to
 800047a:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 800047c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800047e:	4770      	bx	lr
 8000480:	08001b98 	.word	0x08001b98
	...

08000490 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000494:	f001 0703 	and.w	r7, r1, #3

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000498:	4a2e      	ldr	r2, [pc, #184]	; (8000554 <_pal_lld_setgroupmode.constprop.0+0xc4>)
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800049a:	09ce      	lsrs	r6, r1, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800049c:	463d      	mov	r5, r7
  uint32_t bit     = 0;
 800049e:	2400      	movs	r4, #0
      m4 = 15 << ((bit & 7) * 4);
 80004a0:	f04f 080f 	mov.w	r8, #15
      m1 = 1 << bit;
 80004a4:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
 80004a8:	f04f 0c03 	mov.w	ip, #3
 80004ac:	e011      	b.n	80004d2 <_pal_lld_setgroupmode.constprop.0+0x42>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80004ae:	f8d2 a000 	ldr.w	sl, [r2]
 80004b2:	ea03 030a 	and.w	r3, r3, sl
 80004b6:	432b      	orrs	r3, r5
        if (bit < 8)
 80004b8:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80004ba:	6013      	str	r3, [r2, #0]
        if (bit < 8)
 80004bc:	d83a      	bhi.n	8000534 <_pal_lld_setgroupmode.constprop.0+0xa4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80004be:	6a13      	ldr	r3, [r2, #32]
 80004c0:	ea23 0101 	bic.w	r1, r3, r1
 80004c4:	ea41 0109 	orr.w	r1, r1, r9
 80004c8:	6211      	str	r1, [r2, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80004ca:	0840      	lsrs	r0, r0, #1
 80004cc:	d030      	beq.n	8000530 <_pal_lld_setgroupmode.constprop.0+0xa0>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 80004ce:	00ad      	lsls	r5, r5, #2
    bit++;
 80004d0:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 80004d2:	07c3      	lsls	r3, r0, #31
 80004d4:	d5f9      	bpl.n	80004ca <_pal_lld_setgroupmode.constprop.0+0x3a>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80004d6:	6853      	ldr	r3, [r2, #4]
      m1 = 1 << bit;
 80004d8:	fa0e f104 	lsl.w	r1, lr, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80004dc:	ea23 0301 	bic.w	r3, r3, r1
 80004e0:	6053      	str	r3, [r2, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80004e2:	6891      	ldr	r1, [r2, #8]
      m2 = 3 << (bit * 2);
 80004e4:	0063      	lsls	r3, r4, #1
 80004e6:	fa0c f303 	lsl.w	r3, ip, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80004ea:	ea21 0103 	bic.w	r1, r1, r3
 80004ee:	6091      	str	r1, [r2, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80004f0:	f8d2 900c 	ldr.w	r9, [r2, #12]
      altrmask = altr << ((bit & 7) * 4);
 80004f4:	f004 0107 	and.w	r1, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80004f8:	ea29 0903 	bic.w	r9, r9, r3
      altrmask = altr << ((bit & 7) * 4);
 80004fc:	0089      	lsls	r1, r1, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80004fe:	2f02      	cmp	r7, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000500:	f8c2 900c 	str.w	r9, [r2, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000504:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000508:	fa06 f901 	lsl.w	r9, r6, r1
      m4 = 15 << ((bit & 7) * 4);
 800050c:	fa08 f101 	lsl.w	r1, r8, r1
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000510:	d1cd      	bne.n	80004ae <_pal_lld_setgroupmode.constprop.0+0x1e>
        if (bit < 8)
 8000512:	2c07      	cmp	r4, #7
 8000514:	d815      	bhi.n	8000542 <_pal_lld_setgroupmode.constprop.0+0xb2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000516:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800051a:	ea2a 0101 	bic.w	r1, sl, r1
 800051e:	ea41 0109 	orr.w	r1, r1, r9
 8000522:	6211      	str	r1, [r2, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000524:	6811      	ldr	r1, [r2, #0]
 8000526:	400b      	ands	r3, r1
 8000528:	432b      	orrs	r3, r5
    if (!mask)
 800052a:	0840      	lsrs	r0, r0, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 800052c:	6013      	str	r3, [r2, #0]
    if (!mask)
 800052e:	d1ce      	bne.n	80004ce <_pal_lld_setgroupmode.constprop.0+0x3e>
  }
}
 8000530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000534:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000536:	ea23 0101 	bic.w	r1, r3, r1
 800053a:	ea41 0109 	orr.w	r1, r1, r9
 800053e:	6251      	str	r1, [r2, #36]	; 0x24
 8000540:	e7c3      	b.n	80004ca <_pal_lld_setgroupmode.constprop.0+0x3a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000542:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
 8000546:	ea2a 0101 	bic.w	r1, sl, r1
 800054a:	ea41 0109 	orr.w	r1, r1, r9
 800054e:	6251      	str	r1, [r2, #36]	; 0x24
 8000550:	e7e8      	b.n	8000524 <_pal_lld_setgroupmode.constprop.0+0x94>
 8000552:	bf00      	nop
 8000554:	40020000 	.word	0x40020000
	...

08000560 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000560:	4a02      	ldr	r2, [pc, #8]	; (800056c <notify2+0xc>)
 8000562:	68d3      	ldr	r3, [r2, #12]
 8000564:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000568:	60d3      	str	r3, [r2, #12]
}
 800056a:	4770      	bx	lr
 800056c:	40004400 	.word	0x40004400

08000570 <notify4>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000570:	4a02      	ldr	r2, [pc, #8]	; (800057c <notify4+0xc>)
 8000572:	68d3      	ldr	r3, [r2, #12]
 8000574:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000578:	60d3      	str	r3, [r2, #12]
}
 800057a:	4770      	bx	lr
 800057c:	40004c00 	.word	0x40004c00

08000580 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000580:	2320      	movs	r3, #32
 8000582:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <_port_irq_epilogue+0x3c>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800058e:	d102      	bne.n	8000596 <_port_irq_epilogue+0x16>
 8000590:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000594:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000596:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 800059a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800059c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005a0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80005a2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80005a6:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <_port_irq_epilogue+0x40>)
 80005a8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80005aa:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80005ac:	6889      	ldr	r1, [r1, #8]
 80005ae:	6892      	ldr	r2, [r2, #8]
 80005b0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80005b2:	bf8c      	ite	hi
 80005b4:	4a03      	ldrhi	r2, [pc, #12]	; (80005c4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80005b6:	4a04      	ldrls	r2, [pc, #16]	; (80005c8 <_port_irq_epilogue+0x48>)
 80005b8:	619a      	str	r2, [r3, #24]
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	200008f8 	.word	0x200008f8
 80005c4:	080002e7 	.word	0x080002e7
 80005c8:	080002f2 	.word	0x080002f2
 80005cc:	00000000 	.word	0x00000000

080005d0 <chCoreAllocAlignedI>:
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80005d2:	b410      	push	{r4}
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80005d4:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80005d8:	4249      	negs	r1, r1
 80005da:	1a20      	subs	r0, r4, r0
 80005dc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80005de:	4298      	cmp	r0, r3
 80005e0:	d304      	bcc.n	80005ec <chCoreAllocAlignedI+0x1c>
 80005e2:	4284      	cmp	r4, r0
 80005e4:	d302      	bcc.n	80005ec <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80005e6:	bc10      	pop	{r4}
    return NULL;
  }

  ch_memcore.topmem = prev;
 80005e8:	6050      	str	r0, [r2, #4]
 80005ea:	4770      	bx	lr
    return NULL;
 80005ec:	2000      	movs	r0, #0
 80005ee:	bc10      	pop	{r4}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000b08 	.word	0x20000b08
	...

08000600 <_stats_increase_irq>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000600:	2320      	movs	r3, #32
 8000602:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_stats_increase_irq+0x1c>)
 8000608:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800060c:	3301      	adds	r3, #1
 800060e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8000612:	2300      	movs	r3, #0
 8000614:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200008f8 	.word	0x200008f8

08000620 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <chTMChainMeasurementToX+0x38>)
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000622:	6842      	ldr	r2, [r0, #4]
 8000624:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8000626:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8000628:	608b      	str	r3, [r1, #8]
  tmp->n++;
 800062a:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800062e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000632:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000634:	18e4      	adds	r4, r4, r3
 8000636:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800063a:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 800063c:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 800063e:	bf88      	it	hi
 8000640:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000642:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000644:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000646:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800064a:	e9c0 3102 	strd	r3, r1, [r0, #8]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 800064e:	bc70      	pop	{r4, r5, r6}
    tmp->best = tmp->last;
 8000650:	bf38      	it	cc
 8000652:	6003      	strcc	r3, [r0, #0]
}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	00000000 	.word	0x00000000

08000660 <chTMStopMeasurementX>:
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <chTMStopMeasurementX+0x3c>)
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <chTMStopMeasurementX+0x40>)
 8000664:	6852      	ldr	r2, [r2, #4]
 8000666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  tmp->last = (now - tmp->last) - offset;
 800066a:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800066c:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800066e:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000670:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000674:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000676:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000678:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 800067a:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800067c:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800067e:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000680:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000682:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000684:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000688:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 800068a:	bf88      	it	hi
 800068c:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800068e:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000690:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000694:	bf38      	it	cc
 8000696:	6003      	strcc	r3, [r0, #0]
}
 8000698:	bc30      	pop	{r4, r5}
 800069a:	4770      	bx	lr
 800069c:	e0001000 	.word	0xe0001000
 80006a0:	200008f8 	.word	0x200008f8
	...

080006b0 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 80006b0:	4801      	ldr	r0, [pc, #4]	; (80006b8 <_stats_stop_measure_crit_isr+0x8>)
 80006b2:	f7ff bfd5 	b.w	8000660 <chTMStopMeasurementX>
 80006b6:	bf00      	nop
 80006b8:	200009b0 	.word	0x200009b0
 80006bc:	00000000 	.word	0x00000000

080006c0 <chTMStartMeasurementX>:
 80006c0:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <chTMStartMeasurementX+0x8>)
 80006c2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80006c4:	6083      	str	r3, [r0, #8]
}
 80006c6:	4770      	bx	lr
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	00000000 	.word	0x00000000

080006d0 <_stats_start_measure_crit_isr>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 80006d0:	4801      	ldr	r0, [pc, #4]	; (80006d8 <_stats_start_measure_crit_isr+0x8>)
 80006d2:	f7ff bff5 	b.w	80006c0 <chTMStartMeasurementX>
 80006d6:	bf00      	nop
 80006d8:	200009b0 	.word	0x200009b0
 80006dc:	00000000 	.word	0x00000000

080006e0 <wakeup>:
static void wakeup(void *p) {
 80006e0:	b510      	push	{r4, lr}
 80006e2:	4601      	mov	r1, r0
 80006e4:	2320      	movs	r3, #32
 80006e6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80006ea:	f7ff fff1 	bl	80006d0 <_stats_start_measure_crit_isr>
  switch (tp->state) {
 80006ee:	f891 3020 	ldrb.w	r3, [r1, #32]
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d80d      	bhi.n	8000712 <wakeup+0x32>
 80006f6:	e8df f003 	tbb	[pc, r3]
 80006fa:	0c1d      	.short	0x0c1d
 80006fc:	0408230c 	.word	0x0408230c
 8000700:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 8000702:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000704:	6893      	ldr	r3, [r2, #8]
 8000706:	3301      	adds	r3, #1
 8000708:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800070a:	e9d1 3200 	ldrd	r3, r2, [r1]
 800070e:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000710:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8000712:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 8000716:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000718:	6888      	ldr	r0, [r1, #8]
  cp = (thread_t *)&ch.rlist.queue;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 800071c:	624c      	str	r4, [r1, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800071e:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8000722:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	4282      	cmp	r2, r0
 8000728:	d2fb      	bcs.n	8000722 <wakeup+0x42>
  tp->queue.prev             = cp->queue.prev;
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8000730:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8000732:	6059      	str	r1, [r3, #4]
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
 8000734:	f7ff ffbc 	bl	80006b0 <_stats_stop_measure_crit_isr>
 8000738:	2300      	movs	r3, #0
 800073a:	f383 8811 	msr	BASEPRI, r3
}
 800073e:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 8000740:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
    break;
 8000746:	e7e4      	b.n	8000712 <wakeup+0x32>
 8000748:	200008f8 	.word	0x200008f8
 800074c:	00000000 	.word	0x00000000

08000750 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000750:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000752:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8000756:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800075a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800075c:	689a      	ldr	r2, [r3, #8]
 800075e:	428a      	cmp	r2, r1
 8000760:	d2fb      	bcs.n	800075a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000768:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800076a:	6058      	str	r0, [r3, #4]
}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200008f8 	.word	0x200008f8
	...

08000780 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000782:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000784:	42a0      	cmp	r0, r4
 8000786:	d021      	beq.n	80007cc <chEvtBroadcastFlagsI+0x4c>
 8000788:	4607      	mov	r7, r0
 800078a:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800078c:	2600      	movs	r6, #0
 800078e:	e004      	b.n	800079a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000790:	2a0b      	cmp	r2, #11
 8000792:	d01c      	beq.n	80007ce <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8000794:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000796:	42a7      	cmp	r7, r4
 8000798:	d018      	beq.n	80007cc <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 800079a:	68e3      	ldr	r3, [r4, #12]
 800079c:	432b      	orrs	r3, r5
 800079e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80007a0:	b115      	cbz	r5, 80007a8 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80007a2:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80007a4:	421d      	tst	r5, r3
 80007a6:	d0f5      	beq.n	8000794 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 80007a8:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80007ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80007ae:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80007b2:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80007b4:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80007b6:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80007b8:	d1ea      	bne.n	8000790 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80007ba:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80007bc:	4213      	tst	r3, r2
 80007be:	d0e9      	beq.n	8000794 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 80007c0:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80007c2:	f7ff ffc5 	bl	8000750 <chSchReadyI>
    elp = elp->next;
 80007c6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80007c8:	42a7      	cmp	r7, r4
 80007ca:	d1e6      	bne.n	800079a <chEvtBroadcastFlagsI+0x1a>
}
 80007cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80007ce:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80007d0:	ea32 0303 	bics.w	r3, r2, r3
 80007d4:	d1de      	bne.n	8000794 <chEvtBroadcastFlagsI+0x14>
 80007d6:	e7f3      	b.n	80007c0 <chEvtBroadcastFlagsI+0x40>
	...

080007e0 <_idle_thread>:
}
 80007e0:	e7fe      	b.n	80007e0 <_idle_thread>
 80007e2:	bf00      	nop
	...

080007f0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80007f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 80007f4:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80007f6:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80007fa:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80007fc:	05da      	lsls	r2, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 80007fe:	4604      	mov	r4, r0
  uint16_t sr = u->SR;
 8000800:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8000802:	d479      	bmi.n	80008f8 <serve_interrupt+0x108>
 8000804:	2320      	movs	r3, #32
 8000806:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800080a:	f7ff ff61 	bl	80006d0 <_stats_start_measure_crit_isr>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800080e:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8000812:	d04f      	beq.n	80008b4 <serve_interrupt+0xc4>
  chnAddFlagsI(sdp, sts);
 8000814:	1d27      	adds	r7, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000816:	f104 080c 	add.w	r8, r4, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800081a:	f04f 0a00 	mov.w	sl, #0
 800081e:	e008      	b.n	8000832 <serve_interrupt+0x42>
    if (sr & USART_SR_RXNE)
 8000820:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000822:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000826:	d41e      	bmi.n	8000866 <serve_interrupt+0x76>
    sr = u->SR;
 8000828:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800082a:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800082e:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000830:	d040      	beq.n	80008b4 <serve_interrupt+0xc4>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000832:	072b      	lsls	r3, r5, #28
 8000834:	d0f4      	beq.n	8000820 <serve_interrupt+0x30>
    sts |= SD_OVERRUN_ERROR;
 8000836:	f015 0f08 	tst.w	r5, #8
 800083a:	bf0c      	ite	eq
 800083c:	2100      	moveq	r1, #0
 800083e:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000840:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8000842:	bf48      	it	mi
 8000844:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000848:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 800084a:	bf48      	it	mi
 800084c:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000850:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 8000852:	bf48      	it	mi
 8000854:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000858:	4638      	mov	r0, r7
 800085a:	f7ff ff91 	bl	8000780 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800085e:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000860:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000864:	d5e0      	bpl.n	8000828 <serve_interrupt+0x38>
  if (iqIsEmptyI(&sdp->iqueue))
 8000866:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000868:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800086c:	b39b      	cbz	r3, 80008d6 <serve_interrupt+0xe6>
  if (!iqIsFullI(iqp)) {
 800086e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000872:	4293      	cmp	r3, r2
 8000874:	d037      	beq.n	80008e6 <serve_interrupt+0xf6>
    iqp->q_counter++;
 8000876:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8000878:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800087a:	3201      	adds	r2, #1
 800087c:	ea05 0b0b 	and.w	fp, r5, fp
 8000880:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8000882:	6221      	str	r1, [r4, #32]
 8000884:	f883 b000 	strb.w	fp, [r3]
    if (iqp->q_wrptr >= iqp->q_top) // if buffer has become full.
 8000888:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800088c:	429a      	cmp	r2, r3
 800088e:	d301      	bcc.n	8000894 <serve_interrupt+0xa4>
      iqp->q_wrptr = iqp->q_buffer;
 8000890:	69a3      	ldr	r3, [r4, #24]
 8000892:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000894:	68e0      	ldr	r0, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000896:	4580      	cmp	r8, r0
 8000898:	d0c6      	beq.n	8000828 <serve_interrupt+0x38>
  tqp->next             = tp->queue.next;
 800089a:	6803      	ldr	r3, [r0, #0]
 800089c:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 800089e:	f8c3 8004 	str.w	r8, [r3, #4]
 80008a2:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80008a6:	f7ff ff53 	bl	8000750 <chSchReadyI>
    sr = u->SR;
 80008aa:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80008ac:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80008b0:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80008b2:	d1be      	bne.n	8000832 <serve_interrupt+0x42>
  _stats_stop_measure_crit_isr();
 80008b4:	f7ff fefc 	bl	80006b0 <_stats_stop_measure_crit_isr>
 80008b8:	2300      	movs	r3, #0
 80008ba:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80008be:	f019 0f80 	tst.w	r9, #128	; 0x80
 80008c2:	d001      	beq.n	80008c8 <serve_interrupt+0xd8>
 80008c4:	062a      	lsls	r2, r5, #24
 80008c6:	d43a      	bmi.n	800093e <serve_interrupt+0x14e>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80008c8:	f019 0f40 	tst.w	r9, #64	; 0x40
 80008cc:	d001      	beq.n	80008d2 <serve_interrupt+0xe2>
 80008ce:	066b      	lsls	r3, r5, #25
 80008d0:	d425      	bmi.n	800091e <serve_interrupt+0x12e>
}
 80008d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008d6:	2104      	movs	r1, #4
 80008d8:	4638      	mov	r0, r7
 80008da:	f7ff ff51 	bl	8000780 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80008de:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d1c7      	bne.n	8000876 <serve_interrupt+0x86>
 80008e6:	6962      	ldr	r2, [r4, #20]
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d0c4      	beq.n	8000876 <serve_interrupt+0x86>
 80008ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f0:	4638      	mov	r0, r7
 80008f2:	f7ff ff45 	bl	8000780 <chEvtBroadcastFlagsI>
 80008f6:	e797      	b.n	8000828 <serve_interrupt+0x38>
 80008f8:	2320      	movs	r3, #32
 80008fa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80008fe:	f7ff fee7 	bl	80006d0 <_stats_start_measure_crit_isr>
 8000902:	1d20      	adds	r0, r4, #4
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	f7ff ff3a 	bl	8000780 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800090c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000910:	6033      	str	r3, [r6, #0]
  _stats_stop_measure_crit_isr();
 8000912:	f7ff fecd 	bl	80006b0 <_stats_stop_measure_crit_isr>
 8000916:	2300      	movs	r3, #0
 8000918:	f383 8811 	msr	BASEPRI, r3
 800091c:	e772      	b.n	8000804 <serve_interrupt+0x14>
 800091e:	2320      	movs	r3, #32
 8000920:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000924:	f7ff fed4 	bl	80006d0 <_stats_start_measure_crit_isr>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000928:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800092c:	429a      	cmp	r2, r3
 800092e:	d02f      	beq.n	8000990 <serve_interrupt+0x1a0>
  _stats_stop_measure_crit_isr();
 8000930:	f7ff febe 	bl	80006b0 <_stats_stop_measure_crit_isr>
 8000934:	2300      	movs	r3, #0
 8000936:	f383 8811 	msr	BASEPRI, r3
}
 800093a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800093e:	2320      	movs	r3, #32
 8000940:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000944:	f7ff fec4 	bl	80006d0 <_stats_start_measure_crit_isr>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000948:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800094c:	429a      	cmp	r2, r3
    b = oqGetI(&sdp->oqueue);
 800094e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000952:	d02a      	beq.n	80009aa <serve_interrupt+0x1ba>
    uint8_t b;

    oqp->q_counter++;
 8000954:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8000956:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8000958:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800095a:	3201      	adds	r2, #1
 800095c:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800095e:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8000960:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8000962:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000966:	d301      	bcc.n	800096c <serve_interrupt+0x17c>
      oqp->q_rdptr = oqp->q_buffer;
 8000968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800096a:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 800096c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800096e:	4287      	cmp	r7, r0
 8000970:	d006      	beq.n	8000980 <serve_interrupt+0x190>
  tqp->next             = tp->queue.next;
 8000972:	6803      	ldr	r3, [r0, #0]
 8000974:	6323      	str	r3, [r4, #48]	; 0x30
  tp->u.rdymsg = msg;
 8000976:	2200      	movs	r2, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000978:	605f      	str	r7, [r3, #4]
 800097a:	6242      	str	r2, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800097c:	f7ff fee8 	bl	8000750 <chSchReadyI>
      u->DR = b;
 8000980:	f8c6 8004 	str.w	r8, [r6, #4]
  _stats_stop_measure_crit_isr();
 8000984:	f7ff fe94 	bl	80006b0 <_stats_stop_measure_crit_isr>
 8000988:	2300      	movs	r3, #0
 800098a:	f383 8811 	msr	BASEPRI, r3
 800098e:	e79b      	b.n	80008c8 <serve_interrupt+0xd8>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0cc      	beq.n	8000930 <serve_interrupt+0x140>
 8000996:	1d20      	adds	r0, r4, #4
 8000998:	2110      	movs	r1, #16
 800099a:	f7ff fef1 	bl	8000780 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800099e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80009a2:	ea09 0303 	and.w	r3, r9, r3
 80009a6:	60f3      	str	r3, [r6, #12]
 80009a8:	e7c2      	b.n	8000930 <serve_interrupt+0x140>
  if (!oqIsEmptyI(oqp)) {
 80009aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	d0d1      	beq.n	8000954 <serve_interrupt+0x164>
 80009b0:	2108      	movs	r1, #8
 80009b2:	1d20      	adds	r0, r4, #4
 80009b4:	f7ff fee4 	bl	8000780 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80009b8:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80009bc:	ea09 0303 	and.w	r3, r9, r3
 80009c0:	60f3      	str	r3, [r6, #12]
 80009c2:	e7df      	b.n	8000984 <serve_interrupt+0x194>
	...

080009d0 <usart_init>:
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <usart_init+0x78>)
  USART_TypeDef *u = sdp->usart;
 80009d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80009d4:	4293      	cmp	r3, r2
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 80009d6:	b430      	push	{r4, r5}
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80009d8:	d008      	beq.n	80009ec <usart_init+0x1c>
 80009da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009de:	4293      	cmp	r3, r2
 80009e0:	d004      	beq.n	80009ec <usart_init+0x1c>
    fck = STM32_PCLK1 / config->speed;
 80009e2:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <usart_init+0x7c>)
 80009e4:	680c      	ldr	r4, [r1, #0]
 80009e6:	fbb2 f2f4 	udiv	r2, r2, r4
 80009ea:	e003      	b.n	80009f4 <usart_init+0x24>
    fck = STM32_PCLK2 / config->speed;
 80009ec:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <usart_init+0x80>)
 80009ee:	680c      	ldr	r4, [r1, #0]
 80009f0:	fbb2 f2f4 	udiv	r2, r2, r4
  if (config->cr1 & USART_CR1_OVER8)
 80009f4:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80009f8:	888c      	ldrh	r4, [r1, #4]
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	da05      	bge.n	8000a0a <usart_init+0x3a>
    fck = ((fck & ~7) * 2) | (fck & 7);
 80009fe:	f022 0507 	bic.w	r5, r2, #7
 8000a02:	f002 0207 	and.w	r2, r2, #7
 8000a06:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000a0a:	88cd      	ldrh	r5, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8000a0c:	8909      	ldrh	r1, [r1, #8]
  u->BRR = fck;
 8000a0e:	609a      	str	r2, [r3, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8000a10:	f444 5204 	orr.w	r2, r4, #8448	; 0x2100
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8000a14:	f404 54a0 	and.w	r4, r4, #5120	; 0x1400
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8000a18:	f041 0101 	orr.w	r1, r1, #1
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8000a1c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000a20:	f045 0540 	orr.w	r5, r5, #64	; 0x40
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8000a24:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->SR = 0;
 8000a28:	f04f 0400 	mov.w	r4, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000a2c:	611d      	str	r5, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8000a2e:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8000a30:	60da      	str	r2, [r3, #12]
    sdp->rxmask = 0xFF;
 8000a32:	bf08      	it	eq
 8000a34:	217f      	moveq	r1, #127	; 0x7f
  u->SR = 0;
 8000a36:	601c      	str	r4, [r3, #0]
    sdp->rxmask = 0xFF;
 8000a38:	bf18      	it	ne
 8000a3a:	21ff      	movne	r1, #255	; 0xff
  (void)u->SR;  /* SR reset step 1.*/
 8000a3c:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8000a3e:	685b      	ldr	r3, [r3, #4]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8000a40:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
}
 8000a44:	bc30      	pop	{r4, r5}
 8000a46:	4770      	bx	lr
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	0280de80 	.word	0x0280de80
 8000a50:	0501bd00 	.word	0x0501bd00
	...

08000a60 <_ctl>:
}
 8000a60:	2000      	movs	r0, #0
 8000a62:	4770      	bx	lr
	...

08000a70 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <chSchWakeupS.constprop.0+0x70>)
  if (ntp->prio <= otp->prio) {
 8000a72:	6881      	ldr	r1, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000a74:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000a76:	6995      	ldr	r5, [r2, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000a78:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 8000a7a:	68a8      	ldr	r0, [r5, #8]
  ntp->u.rdymsg = msg;
 8000a7c:	2300      	movs	r3, #0
  if (ntp->prio <= otp->prio) {
 8000a7e:	4281      	cmp	r1, r0
  ntp->u.rdymsg = msg;
 8000a80:	6263      	str	r3, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8000a82:	d80c      	bhi.n	8000a9e <chSchWakeupS.constprop.0+0x2e>
  tp->state = CH_STATE_READY;
 8000a84:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000a88:	4613      	mov	r3, r2
    cp = cp->queue.next;
 8000a8a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d9fb      	bls.n	8000a8a <chSchWakeupS.constprop.0+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8000a98:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000a9a:	605c      	str	r4, [r3, #4]
}
 8000a9c:	bd38      	pop	{r3, r4, r5, pc}
  tp->state = CH_STATE_READY;
 8000a9e:	f885 3020 	strb.w	r3, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000aa2:	4613      	mov	r3, r2
    cp = cp->queue.next;
 8000aa4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8000aa6:	6899      	ldr	r1, [r3, #8]
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	d3fb      	bcc.n	8000aa4 <chSchWakeupS.constprop.0+0x34>
  tp->queue.prev             = cp->queue.prev;
 8000aac:	6859      	ldr	r1, [r3, #4]
 8000aae:	6069      	str	r1, [r5, #4]
    ntp->state = CH_STATE_CURRENT;
 8000ab0:	2001      	movs	r0, #1
  tp->queue.next             = cp;
 8000ab2:	602b      	str	r3, [r5, #0]
  tp->queue.prev->queue.next = tp;
 8000ab4:	600d      	str	r5, [r1, #0]
  cp->queue.prev             = tp;
 8000ab6:	605d      	str	r5, [r3, #4]
    ntp->state = CH_STATE_CURRENT;
 8000ab8:	f884 0020 	strb.w	r0, [r4, #32]
  ch.kernel_stats.n_ctxswc++;
 8000abc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    currp = ntp;
 8000ac0:	6194      	str	r4, [r2, #24]
 8000ac2:	4403      	add	r3, r0
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000ac4:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8000ac8:	f105 0048 	add.w	r0, r5, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 8000acc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000ad0:	f7ff fda6 	bl	8000620 <chTMChainMeasurementToX>
    chSysSwitch(ntp, otp);
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	4620      	mov	r0, r4
}
 8000ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chSysSwitch(ntp, otp);
 8000adc:	f7ff bbf0 	b.w	80002c0 <_port_switch>
 8000ae0:	200008f8 	.word	0x200008f8
	...

08000af0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000af0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000af2:	4c0e      	ldr	r4, [pc, #56]	; (8000b2c <chSchGoSleepS+0x3c>)
 8000af4:	69a5      	ldr	r5, [r4, #24]
  thread_t *tp = tqp->next;
 8000af6:	6821      	ldr	r1, [r4, #0]
  otp->state = newstate;
 8000af8:	f885 0020 	strb.w	r0, [r5, #32]
  tqp->next             = tp->queue.next;
 8000afc:	680b      	ldr	r3, [r1, #0]
 8000afe:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8000b00:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000b02:	605c      	str	r4, [r3, #4]
 8000b04:	f881 2020 	strb.w	r2, [r1, #32]
  ch.kernel_stats.n_ctxswc++;
 8000b08:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000b0c:	61a1      	str	r1, [r4, #24]
 8000b0e:	4413      	add	r3, r2
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000b10:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8000b14:	3148      	adds	r1, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 8000b16:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000b1a:	f7ff fd81 	bl	8000620 <chTMChainMeasurementToX>
  chSysSwitch(currp, otp);
 8000b1e:	69a0      	ldr	r0, [r4, #24]
 8000b20:	4629      	mov	r1, r5
}
 8000b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8000b26:	f7ff bbcb 	b.w	80002c0 <_port_switch>
 8000b2a:	bf00      	nop
 8000b2c:	200008f8 	.word	0x200008f8

08000b30 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8000b32:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000b34:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8000b36:	d049      	beq.n	8000bcc <chSchGoSleepTimeoutS+0x9c>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000b38:	4c3f      	ldr	r4, [pc, #252]	; (8000c38 <chSchGoSleepTimeoutS+0x108>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8000b3a:	4f40      	ldr	r7, [pc, #256]	; (8000c3c <chSchGoSleepTimeoutS+0x10c>)
  vtp->par = par;
 8000b3c:	69a3      	ldr	r3, [r4, #24]
 8000b3e:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000b40:	4626      	mov	r6, r4
 8000b42:	2902      	cmp	r1, #2
 8000b44:	f856 3f1c 	ldr.w	r3, [r6, #28]!
 8000b48:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000b4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b4e:	bf38      	it	cc
 8000b50:	2102      	movcc	r1, #2
 8000b52:	42b3      	cmp	r3, r6
 8000b54:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8000b56:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000b58:	d05b      	beq.n	8000c12 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8000b5a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000b5c:	1bd2      	subs	r2, r2, r7
 8000b5e:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000b60:	d32e      	bcc.n	8000bc0 <chSchGoSleepTimeoutS+0x90>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000b62:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8000b68:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000b6a:	4291      	cmp	r1, r2
 8000b6c:	d904      	bls.n	8000b78 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8000b6e:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8000b70:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	428a      	cmp	r2, r1
 8000b76:	d3fa      	bcc.n	8000b6e <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8000b7c:	af01      	add	r7, sp, #4
  vtp->next = p;
 8000b7e:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8000b80:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8000b82:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8000b84:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000b8a:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 8000b8e:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000b90:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000b92:	4628      	mov	r0, r5
 8000b94:	f7ff ffac 	bl	8000af0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000b98:	9b04      	ldr	r3, [sp, #16]
 8000b9a:	b16b      	cbz	r3, 8000bb8 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000b9c:	69e3      	ldr	r3, [r4, #28]
 8000b9e:	42bb      	cmp	r3, r7
 8000ba0:	d01b      	beq.n	8000bda <chSchGoSleepTimeoutS+0xaa>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000ba2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000ba8:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000baa:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8000bac:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000bae:	d003      	beq.n	8000bb8 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	9903      	ldr	r1, [sp, #12]
 8000bb4:	440a      	add	r2, r1
 8000bb6:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8000bb8:	69a3      	ldr	r3, [r4, #24]
}
 8000bba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000bbc:	b007      	add	sp, #28
 8000bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	4291      	cmp	r1, r2
 8000bc4:	d2d1      	bcs.n	8000b6a <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 8000bc6:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000bc8:	6347      	str	r7, [r0, #52]	; 0x34
 8000bca:	e7ce      	b.n	8000b6a <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 8000bcc:	4c1a      	ldr	r4, [pc, #104]	; (8000c38 <chSchGoSleepTimeoutS+0x108>)
 8000bce:	f7ff ff8f 	bl	8000af0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8000bd2:	69a3      	ldr	r3, [r4, #24]
}
 8000bd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000bd6:	b007      	add	sp, #28
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000bda:	9b01      	ldr	r3, [sp, #4]
 8000bdc:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8000bde:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000be0:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000be2:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8000be4:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000be6:	d022      	beq.n	8000c2e <chSchGoSleepTimeoutS+0xfe>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8000bec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8000bee:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8000bf0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000bf8:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	d9dc      	bls.n	8000bb8 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000bfe:	1acb      	subs	r3, r1, r3
 8000c00:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000c02:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000c04:	bf98      	it	ls
 8000c06:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8000c0c:	440a      	add	r2, r1
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c10:	e7d2      	b.n	8000bb8 <chSchGoSleepTimeoutS+0x88>
 8000c12:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8000c14:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8000c16:	62a2      	str	r2, [r4, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000c18:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8000c1c:	e9c4 7707 	strd	r7, r7, [r4, #28]
      vtp->delta = delay;
 8000c20:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8000c22:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000c24:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000c26:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8000c28:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000c2a:	60c3      	str	r3, [r0, #12]
 8000c2c:	e7b1      	b.n	8000b92 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 8000c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c32:	60da      	str	r2, [r3, #12]
    return;
 8000c34:	e7c0      	b.n	8000bb8 <chSchGoSleepTimeoutS+0x88>
 8000c36:	bf00      	nop
 8000c38:	200008f8 	.word	0x200008f8
 8000c3c:	080006e1 	.word	0x080006e1

08000c40 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8000c40:	b161      	cbz	r1, 8000c5c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8000c44:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8000c46:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8000c48:	6844      	ldr	r4, [r0, #4]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000c50:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8000c52:	6022      	str	r2, [r4, #0]
}
 8000c54:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8000c56:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000c58:	f7ff bf6a 	b.w	8000b30 <chSchGoSleepTimeoutS>
}
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200008f8 	.word	0x200008f8
	...

08000c70 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000c70:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8000c74:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000c76:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f383 8811 	msr	BASEPRI, r3
}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
	...

08000c90 <_stats_stop_measure_crit_thd>:
  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000c90:	4801      	ldr	r0, [pc, #4]	; (8000c98 <_stats_stop_measure_crit_thd+0x8>)
 8000c92:	f7ff bce5 	b.w	8000660 <chTMStopMeasurementX>
 8000c96:	bf00      	nop
 8000c98:	20000998 	.word	0x20000998
 8000c9c:	00000000 	.word	0x00000000

08000ca0 <_stats_start_measure_crit_thd>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000ca0:	4801      	ldr	r0, [pc, #4]	; (8000ca8 <_stats_start_measure_crit_thd+0x8>)
 8000ca2:	f7ff bd0d 	b.w	80006c0 <chTMStartMeasurementX>
 8000ca6:	bf00      	nop
 8000ca8:	20000998 	.word	0x20000998
 8000cac:	00000000 	.word	0x00000000

08000cb0 <chThdSleep.constprop.0>:
void chThdSleep(sysinterval_t time) {
 8000cb0:	b508      	push	{r3, lr}
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000cb8:	f7ff fff2 	bl	8000ca0 <_stats_start_measure_crit_thd>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8000cbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc0:	2008      	movs	r0, #8
 8000cc2:	f7ff ff35 	bl	8000b30 <chSchGoSleepTimeoutS>
  _stats_stop_measure_crit_thd();
 8000cc6:	f7ff ffe3 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f383 8811 	msr	BASEPRI, r3
}
 8000cd0:	bd08      	pop	{r3, pc}
 8000cd2:	bf00      	nop
	...

08000ce0 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8000ce0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <Thread1+0x20>)
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <Thread1+0x24>)
 8000ce6:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 8000ce8:	4c07      	ldr	r4, [pc, #28]	; (8000d08 <Thread1+0x28>)
 8000cea:	619a      	str	r2, [r3, #24]
 8000cec:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8000cf0:	462e      	mov	r6, r5
 8000cf2:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(100);
 8000cf4:	f7ff ffdc 	bl	8000cb0 <chThdSleep.constprop.0>
    palClearPad(GPIOD, GPIOD_LED3);     /* Orange.  */
 8000cf8:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(100);
 8000cfa:	f7ff ffd9 	bl	8000cb0 <chThdSleep.constprop.0>
  while (true) {
 8000cfe:	e7f8      	b.n	8000cf2 <Thread1+0x12>
 8000d00:	200008f8 	.word	0x200008f8
 8000d04:	08001ad4 	.word	0x08001ad4
 8000d08:	40020c00 	.word	0x40020c00
 8000d0c:	00000000 	.word	0x00000000

08000d10 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000d10:	b568      	push	{r3, r5, r6, lr}
 8000d12:	4605      	mov	r5, r0
 8000d14:	2320      	movs	r3, #32
 8000d16:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000d1a:	f7ff ffc1 	bl	8000ca0 <_stats_start_measure_crit_thd>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <chCoreAllocFromTop+0x44>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000d20:	e9d0 3600 	ldrd	r3, r6, [r0]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000d24:	4249      	negs	r1, r1
 8000d26:	1b75      	subs	r5, r6, r5
 8000d28:	400d      	ands	r5, r1
  prev = p - offset;
 8000d2a:	1aaa      	subs	r2, r5, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d309      	bcc.n	8000d44 <chCoreAllocFromTop+0x34>
 8000d30:	4296      	cmp	r6, r2
 8000d32:	d307      	bcc.n	8000d44 <chCoreAllocFromTop+0x34>
  ch_memcore.topmem = prev;
 8000d34:	6042      	str	r2, [r0, #4]
  _stats_stop_measure_crit_thd();
 8000d36:	f7ff ffab 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000d40:	4628      	mov	r0, r5
 8000d42:	bd68      	pop	{r3, r5, r6, pc}
 8000d44:	f7ff ffa4 	bl	8000c90 <_stats_stop_measure_crit_thd>
    return NULL;
 8000d48:	2500      	movs	r5, #0
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f383 8811 	msr	BASEPRI, r3
}
 8000d50:	4628      	mov	r0, r5
 8000d52:	bd68      	pop	{r3, r5, r6, pc}
 8000d54:	20000b08 	.word	0x20000b08
	...

08000d60 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d64:	b085      	sub	sp, #20
 8000d66:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8000d6a:	69c7      	ldr	r7, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	f04f 0920 	mov.w	r9, #32
 8000d72:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8000d76:	f7ff ff93 	bl	8000ca0 <_stats_start_measure_crit_thd>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000d7a:	b38a      	cbz	r2, 8000de0 <oqWriteTimeout+0x80>
 8000d7c:	9d03      	ldr	r5, [sp, #12]
 8000d7e:	460e      	mov	r6, r1
 8000d80:	f04f 0a00 	mov.w	sl, #0
 8000d84:	4688      	mov	r8, r1
  if (n > oqGetEmptyI(oqp)) {
 8000d86:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000d88:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8000d8c:	429d      	cmp	r5, r3
    n = oqGetEmptyI(oqp);
 8000d8e:	bf8c      	ite	hi
 8000d90:	68a6      	ldrhi	r6, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8000d92:	462e      	movls	r6, r5
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000d94:	1a12      	subs	r2, r2, r0
  if (n < s1) {
 8000d96:	42b2      	cmp	r2, r6
 8000d98:	d840      	bhi.n	8000e1c <oqWriteTimeout+0xbc>
  else if (n > s1) {
 8000d9a:	d22b      	bcs.n	8000df4 <oqWriteTimeout+0x94>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000d9c:	4641      	mov	r1, r8
    s2 = n - s1;
 8000d9e:	eba6 0b02 	sub.w	fp, r6, r2
 8000da2:	9201      	str	r2, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000da4:	f7ff faa8 	bl	80002f8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000da8:	9a01      	ldr	r2, [sp, #4]
 8000daa:	68e0      	ldr	r0, [r4, #12]
 8000dac:	eb08 0102 	add.w	r1, r8, r2
 8000db0:	465a      	mov	r2, fp
 8000db2:	f7ff faa1 	bl	80002f8 <memcpy>
  oqp->q_counter -= n;
 8000db6:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000db8:	68e2      	ldr	r2, [r4, #12]
  oqp->q_counter -= n;
 8000dba:	1b9b      	subs	r3, r3, r6
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000dbc:	445a      	add	r2, fp
 8000dbe:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8000dc0:	60a3      	str	r3, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000dc2:	b10f      	cbz	r7, 8000dc8 <oqWriteTimeout+0x68>
        nfy(oqp);
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	47b8      	blx	r7
  _stats_stop_measure_crit_thd();
 8000dc8:	f7ff ff62 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8000dcc:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000dd0:	1bad      	subs	r5, r5, r6
      bp += done;
 8000dd2:	44b0      	add	r8, r6
 8000dd4:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8000dd8:	f7ff ff62 	bl	8000ca0 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d1d2      	bne.n	8000d86 <oqWriteTimeout+0x26>
  if (n > oqGetEmptyI(oqp)) {
 8000de0:	9d03      	ldr	r5, [sp, #12]
  _stats_stop_measure_crit_thd();
 8000de2:	f7ff ff55 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8000de6:	2300      	movs	r3, #0
 8000de8:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000dec:	4628      	mov	r0, r5
 8000dee:	b005      	add	sp, #20
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000df4:	4632      	mov	r2, r6
 8000df6:	4641      	mov	r1, r8
 8000df8:	f7ff fa7e 	bl	80002f8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000dfc:	68e3      	ldr	r3, [r4, #12]
 8000dfe:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8000e00:	68a3      	ldr	r3, [r4, #8]
 8000e02:	1b9b      	subs	r3, r3, r6
 8000e04:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d1db      	bne.n	8000dc2 <oqWriteTimeout+0x62>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000e0a:	9902      	ldr	r1, [sp, #8]
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff ff17 	bl	8000c40 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d0b7      	beq.n	8000d86 <oqWriteTimeout+0x26>
 8000e16:	9b03      	ldr	r3, [sp, #12]
 8000e18:	1b5d      	subs	r5, r3, r5
 8000e1a:	e7e2      	b.n	8000de2 <oqWriteTimeout+0x82>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000e1c:	4632      	mov	r2, r6
 8000e1e:	4641      	mov	r1, r8
 8000e20:	f7ff fa6a 	bl	80002f8 <memcpy>
    oqp->q_wrptr += n;
 8000e24:	6963      	ldr	r3, [r4, #20]
 8000e26:	4433      	add	r3, r6
 8000e28:	6163      	str	r3, [r4, #20]
 8000e2a:	e7e9      	b.n	8000e00 <oqWriteTimeout+0xa0>
 8000e2c:	0000      	movs	r0, r0
	...

08000e30 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000e30:	3030      	adds	r0, #48	; 0x30
 8000e32:	f7ff bf95 	b.w	8000d60 <oqWriteTimeout>
 8000e36:	bf00      	nop
	...

08000e40 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, TIME_INFINITE);
 8000e40:	3030      	adds	r0, #48	; 0x30
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	f7ff bf8b 	b.w	8000d60 <oqWriteTimeout>
 8000e4a:	bf00      	nop
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e54:	2320      	movs	r3, #32
 8000e56:	4605      	mov	r5, r0
 8000e58:	4688      	mov	r8, r1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000e60:	f7ff ff1e 	bl	8000ca0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000e64:	e003      	b.n	8000e6e <oqPutTimeout+0x1e>
 8000e66:	f7ff feeb 	bl	8000c40 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000e6a:	1e04      	subs	r4, r0, #0
 8000e6c:	db1e      	blt.n	8000eac <oqPutTimeout+0x5c>
  while (oqIsFullI(oqp)) {
 8000e6e:	68ae      	ldr	r6, [r5, #8]
 8000e70:	4639      	mov	r1, r7
 8000e72:	4628      	mov	r0, r5
 8000e74:	2e00      	cmp	r6, #0
 8000e76:	d0f6      	beq.n	8000e66 <oqPutTimeout+0x16>
  *oqp->q_wrptr++ = b;
 8000e78:	696a      	ldr	r2, [r5, #20]
  oqp->q_counter--;
 8000e7a:	68ab      	ldr	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 8000e7c:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000e7e:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000e80:	6169      	str	r1, [r5, #20]
  oqp->q_counter--;
 8000e82:	60ab      	str	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 8000e84:	f882 8000 	strb.w	r8, [r2]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000e88:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8000e8c:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000e8e:	bf24      	itt	cs
 8000e90:	68eb      	ldrcs	r3, [r5, #12]
 8000e92:	616b      	strcs	r3, [r5, #20]
  if (oqp->q_notify != NULL) {
 8000e94:	69eb      	ldr	r3, [r5, #28]
 8000e96:	b103      	cbz	r3, 8000e9a <oqPutTimeout+0x4a>
    oqp->q_notify(oqp);
 8000e98:	4798      	blx	r3
  _stats_stop_measure_crit_thd();
 8000e9a:	f7ff fef9 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f380 8811 	msr	BASEPRI, r0
 8000ea4:	4604      	mov	r4, r0
}
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eac:	f7ff fef0 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8000eb0:	f386 8811 	msr	BASEPRI, r6
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eba:	bf00      	nop
 8000ebc:	0000      	movs	r0, r0
	...

08000ec0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000ec0:	3030      	adds	r0, #48	; 0x30
 8000ec2:	f7ff bfc5 	b.w	8000e50 <oqPutTimeout>
 8000ec6:	bf00      	nop
	...

08000ed0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000ed0:	3030      	adds	r0, #48	; 0x30
 8000ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed6:	f7ff bfbb 	b.w	8000e50 <oqPutTimeout>
 8000eda:	bf00      	nop
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8000ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8000eea:	69c7      	ldr	r7, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8000eec:	4604      	mov	r4, r0
 8000eee:	f04f 0920 	mov.w	r9, #32
 8000ef2:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8000ef6:	f7ff fed3 	bl	8000ca0 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d031      	beq.n	8000f62 <iqReadTimeout+0x82>
 8000efe:	9d03      	ldr	r5, [sp, #12]
 8000f00:	460e      	mov	r6, r1
 8000f02:	f04f 0a00 	mov.w	sl, #0
 8000f06:	4688      	mov	r8, r1
  if (n > iqGetFullI(iqp)) {
 8000f08:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000f0a:	69a1      	ldr	r1, [r4, #24]
 8000f0c:	6922      	ldr	r2, [r4, #16]
  if (n > iqGetFullI(iqp)) {
 8000f0e:	429d      	cmp	r5, r3
    n = iqGetFullI(iqp);
 8000f10:	bf8c      	ite	hi
 8000f12:	68a6      	ldrhi	r6, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8000f14:	462e      	movls	r6, r5
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000f16:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 8000f18:	42b2      	cmp	r2, r6
 8000f1a:	d840      	bhi.n	8000f9e <iqReadTimeout+0xbe>
  else if (n > s1) {
 8000f1c:	d22b      	bcs.n	8000f76 <iqReadTimeout+0x96>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000f1e:	4640      	mov	r0, r8
    s2 = n - s1;
 8000f20:	eba6 0b02 	sub.w	fp, r6, r2
 8000f24:	9201      	str	r2, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000f26:	f7ff f9e7 	bl	80002f8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000f2a:	9a01      	ldr	r2, [sp, #4]
 8000f2c:	68e1      	ldr	r1, [r4, #12]
 8000f2e:	eb08 0002 	add.w	r0, r8, r2
 8000f32:	465a      	mov	r2, fp
 8000f34:	f7ff f9e0 	bl	80002f8 <memcpy>
  iqp->q_counter -= n;
 8000f38:	68a3      	ldr	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000f3a:	68e2      	ldr	r2, [r4, #12]
  iqp->q_counter -= n;
 8000f3c:	1b9b      	subs	r3, r3, r6
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000f3e:	445a      	add	r2, fp
 8000f40:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8000f42:	60a3      	str	r3, [r4, #8]
      if (nfy != NULL) {
 8000f44:	b10f      	cbz	r7, 8000f4a <iqReadTimeout+0x6a>
        nfy(iqp);
 8000f46:	4620      	mov	r0, r4
 8000f48:	47b8      	blx	r7
  _stats_stop_measure_crit_thd();
 8000f4a:	f7ff fea1 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8000f4e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8000f52:	1bad      	subs	r5, r5, r6
      bp += done;
 8000f54:	44b0      	add	r8, r6
 8000f56:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8000f5a:	f7ff fea1 	bl	8000ca0 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d1d2      	bne.n	8000f08 <iqReadTimeout+0x28>
  if (n > iqGetFullI(iqp)) {
 8000f62:	9d03      	ldr	r5, [sp, #12]
  _stats_stop_measure_crit_thd();
 8000f64:	f7ff fe94 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f383 8811 	msr	BASEPRI, r3
}
 8000f6e:	4628      	mov	r0, r5
 8000f70:	b005      	add	sp, #20
 8000f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000f76:	4632      	mov	r2, r6
 8000f78:	4640      	mov	r0, r8
 8000f7a:	f7ff f9bd 	bl	80002f8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000f7e:	68e3      	ldr	r3, [r4, #12]
 8000f80:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8000f82:	68a3      	ldr	r3, [r4, #8]
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8000f88:	2e00      	cmp	r6, #0
 8000f8a:	d1db      	bne.n	8000f44 <iqReadTimeout+0x64>
 8000f8c:	9902      	ldr	r1, [sp, #8]
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f7ff fe56 	bl	8000c40 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d0b7      	beq.n	8000f08 <iqReadTimeout+0x28>
 8000f98:	9b03      	ldr	r3, [sp, #12]
 8000f9a:	1b5d      	subs	r5, r3, r5
 8000f9c:	e7e2      	b.n	8000f64 <iqReadTimeout+0x84>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	f7ff f9a9 	bl	80002f8 <memcpy>
    iqp->q_rdptr += n;
 8000fa6:	69a3      	ldr	r3, [r4, #24]
 8000fa8:	4433      	add	r3, r6
 8000faa:	61a3      	str	r3, [r4, #24]
 8000fac:	e7e9      	b.n	8000f82 <iqReadTimeout+0xa2>
 8000fae:	bf00      	nop

08000fb0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000fb0:	300c      	adds	r0, #12
 8000fb2:	f7ff bf95 	b.w	8000ee0 <iqReadTimeout>
 8000fb6:	bf00      	nop
	...

08000fc0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, TIME_INFINITE);
 8000fc0:	300c      	adds	r0, #12
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	f7ff bf8b 	b.w	8000ee0 <iqReadTimeout>
 8000fca:	bf00      	nop
 8000fcc:	0000      	movs	r0, r0
	...

08000fd0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd2:	4605      	mov	r5, r0
 8000fd4:	460f      	mov	r7, r1
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000fdc:	f7ff fe60 	bl	8000ca0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000fe0:	e003      	b.n	8000fea <iqGetTimeout+0x1a>
 8000fe2:	f7ff fe2d 	bl	8000c40 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000fe6:	1e04      	subs	r4, r0, #0
 8000fe8:	db1c      	blt.n	8001024 <iqGetTimeout+0x54>
  while (iqIsEmptyI(iqp)) {
 8000fea:	68ae      	ldr	r6, [r5, #8]
 8000fec:	4639      	mov	r1, r7
 8000fee:	4628      	mov	r0, r5
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d0f6      	beq.n	8000fe2 <iqGetTimeout+0x12>
  b = *iqp->q_rdptr++;
 8000ff4:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8000ff6:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000ff8:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8000ffa:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8000ffc:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000ffe:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001000:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8001002:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001004:	bf28      	it	cs
 8001006:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001008:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800100a:	bf28      	it	cs
 800100c:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 800100e:	69eb      	ldr	r3, [r5, #28]
 8001010:	b10b      	cbz	r3, 8001016 <iqGetTimeout+0x46>
    iqp->q_notify(iqp);
 8001012:	4628      	mov	r0, r5
 8001014:	4798      	blx	r3
  _stats_stop_measure_crit_thd();
 8001016:	f7ff fe3b 	bl	8000c90 <_stats_stop_measure_crit_thd>
 800101a:	2300      	movs	r3, #0
 800101c:	f383 8811 	msr	BASEPRI, r3
}
 8001020:	4620      	mov	r0, r4
 8001022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001024:	f7ff fe34 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8001028:	f386 8811 	msr	BASEPRI, r6
 800102c:	4620      	mov	r0, r4
 800102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001030 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001030:	4bc1      	ldr	r3, [pc, #772]	; (8001338 <main+0x308>)
  PWR->CR |= PWR_CR_DBP;
 8001032:	48c2      	ldr	r0, [pc, #776]	; (800133c <main+0x30c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001034:	691a      	ldr	r2, [r3, #16]
 8001036:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800103a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
  }
}
/*
 * Application entry point.
 */
int main(void) {
 800103e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800104a:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 800104c:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001050:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	615c      	str	r4, [r3, #20]
 8001056:	2200      	movs	r2, #0
 8001058:	6959      	ldr	r1, [r3, #20]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800105e:	6a19      	ldr	r1, [r3, #32]
 8001060:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8001064:	6219      	str	r1, [r3, #32]
 8001066:	6a19      	ldr	r1, [r3, #32]
 8001068:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800106c:	6219      	str	r1, [r3, #32]
 800106e:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8001070:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001072:	625c      	str	r4, [r3, #36]	; 0x24
 8001074:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
 8001078:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 800107a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800107c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001080:	6419      	str	r1, [r3, #64]	; 0x40
 8001082:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001084:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001088:	6619      	str	r1, [r3, #96]	; 0x60
 800108a:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800108c:	6801      	ldr	r1, [r0, #0]
 800108e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001092:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001094:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001096:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800109a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800109e:	b087      	sub	sp, #28
 80010a0:	d003      	beq.n	80010aa <main+0x7a>
    RCC->BDCR = RCC_BDCR_BDRST;
 80010a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80010a6:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80010a8:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 80010aa:	f8df c290 	ldr.w	ip, [pc, #656]	; 800133c <main+0x30c>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010ae:	4da4      	ldr	r5, [pc, #656]	; (8001340 <main+0x310>)
 80010b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1; //assigning USART pointer to address of USART port base register
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80010b4:	4fa3      	ldr	r7, [pc, #652]	; (8001344 <main+0x314>)
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 80010b6:	4ea4      	ldr	r6, [pc, #656]	; (8001348 <main+0x318>)
  sdObjectInit(&SD2, NULL, notify2);
 80010b8:	49a4      	ldr	r1, [pc, #656]	; (800134c <main+0x31c>)
  tqp->next = (thread_t *)tqp;
 80010ba:	4ca5      	ldr	r4, [pc, #660]	; (8001350 <main+0x320>)
 80010bc:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010be:	2040      	movs	r0, #64	; 0x40
 80010c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010c4:	f8cc 2004 	str.w	r2, [ip, #4]
 80010c8:	f04f 0880 	mov.w	r8, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010cc:	f885 3306 	strb.w	r3, [r5, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d4:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010d8:	6028      	str	r0, [r5, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010da:	f44f 7000 	mov.w	r0, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010de:	f885 3307 	strb.w	r3, [r5, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010e2:	f8c5 8180 	str.w	r8, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010e6:	f8c5 8000 	str.w	r8, [r5]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010ea:	f885 3308 	strb.w	r3, [r5, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010ee:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010f2:	602a      	str	r2, [r5, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010f4:	f885 3309 	strb.w	r3, [r5, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010f8:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010fc:	6028      	str	r0, [r5, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001102:	f885 330a 	strb.w	r3, [r5, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001106:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800110a:	6028      	str	r0, [r5, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800110c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001110:	f885 3317 	strb.w	r3, [r5, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001114:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001118:	6028      	str	r0, [r5, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800111a:	f885 3328 	strb.w	r3, [r5, #808]	; 0x328
 800111e:	4638      	mov	r0, r7
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001120:	f8c5 2184 	str.w	r2, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001124:	606a      	str	r2, [r5, #4]
 8001126:	f7ff f983 	bl	8000430 <sdObjectInit.constprop.0>
  SD2.usart = USART2;
 800112a:	4b8a      	ldr	r3, [pc, #552]	; (8001354 <main+0x324>)
  sdObjectInit(&SD4, NULL, notify4);
 800112c:	498a      	ldr	r1, [pc, #552]	; (8001358 <main+0x328>)
  SD2.usart = USART2;
 800112e:	677b      	str	r3, [r7, #116]	; 0x74
  sdObjectInit(&SD4, NULL, notify4);
 8001130:	4630      	mov	r0, r6
 8001132:	f7ff f97d 	bl	8000430 <sdObjectInit.constprop.0>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001136:	4b80      	ldr	r3, [pc, #512]	; (8001338 <main+0x308>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001138:	4988      	ldr	r1, [pc, #544]	; (800135c <main+0x32c>)
  ST_ENABLE_CLOCK();
 800113a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  tqp->prev = (thread_t *)tqp;
 800113c:	6064      	str	r4, [r4, #4]
 800113e:	f042 0201 	orr.w	r2, r2, #1
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
 8001144:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8001146:	6124      	str	r4, [r4, #16]
 8001148:	f042 0201 	orr.w	r2, r2, #1
 800114c:	661a      	str	r2, [r3, #96]	; 0x60
 800114e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 8001150:	688a      	ldr	r2, [r1, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001152:	f8df c238 	ldr.w	ip, [pc, #568]	; 800138c <main+0x35c>
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001156:	6164      	str	r4, [r4, #20]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 800115c:	f042 0201 	orr.w	r2, r2, #1
 8001160:	608a      	str	r2, [r1, #8]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001162:	f04f 3eff 	mov.w	lr, #4294967295
  STM32_ST_TIM->CCMR1  = 0;
 8001166:	2200      	movs	r2, #0
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001168:	2101      	movs	r1, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800116a:	f242 00cf 	movw	r0, #8399	; 0x20cf
 800116e:	6298      	str	r0, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001170:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  ch.rlist.prio = NOPRIO;
 8001174:	60a2      	str	r2, [r4, #8]
  STM32_ST_TIM->CCMR1  = 0;
 8001176:	619a      	str	r2, [r3, #24]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001178:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
  STM32_ST_TIM->CCR[0] = 0;
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  ch.vtlist.lasttime = (systime_t)0;
 800117e:	62a2      	str	r2, [r4, #40]	; 0x28
  STM32_ST_TIM->DIER   = 0;
 8001180:	60da      	str	r2, [r3, #12]
  H_NEXT(&default_heap.header) = NULL;
 8001182:	f8cc 2004 	str.w	r2, [ip, #4]
  STM32_ST_TIM->CR2    = 0;
 8001186:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001188:	6159      	str	r1, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800118a:	6019      	str	r1, [r3, #0]
  SD4.usart = UART4;
 800118c:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001190:	f885 831c 	strb.w	r8, [r5, #796]	; 0x31c
 8001194:	6773      	str	r3, [r6, #116]	; 0x74
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001196:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800119a:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ch_memcore.basemem = __heap_base__;
 800119e:	4970      	ldr	r1, [pc, #448]	; (8001360 <main+0x330>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80011a0:	602b      	str	r3, [r5, #0]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80011a2:	4870      	ldr	r0, [pc, #448]	; (8001364 <main+0x334>)
 80011a4:	f8cc 0000 	str.w	r0, [ip]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80011a8:	f104 031c 	add.w	r3, r4, #28
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80011ac:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ch_memcore.topmem  = __heap_end__;
 80011b0:	486d      	ldr	r0, [pc, #436]	; (8001368 <main+0x338>)
  ch_memcore.basemem = __heap_base__;
 80011b2:	4b6e      	ldr	r3, [pc, #440]	; (800136c <main+0x33c>)
 80011b4:	600b      	str	r3, [r1, #0]
  ch_memcore.topmem  = __heap_end__;
 80011b6:	6048      	str	r0, [r1, #4]
  tqp->next = (thread_t *)tqp;
 80011b8:	4b6d      	ldr	r3, [pc, #436]	; (8001370 <main+0x340>)
 80011ba:	6024      	str	r4, [r4, #0]
  tmp->cumulative = (rttime_t)0;
 80011bc:	2000      	movs	r0, #0
 80011be:	2100      	movs	r1, #0
  H_PAGES(&default_heap.header) = 0;
 80011c0:	f8cc 2008 	str.w	r2, [ip, #8]
 80011c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011c8:	f10c 010c 	add.w	r1, ip, #12
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 80011cc:	2014      	movs	r0, #20
  tqp->prev = (thread_t *)tqp;
 80011ce:	e9cc 1103 	strd	r1, r1, [ip, #12]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80011d2:	f8cc 2014 	str.w	r2, [ip, #20]
 80011d6:	6198      	str	r0, [r3, #24]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80011d8:	f103 0c3c 	add.w	ip, r3, #60	; 0x3c
 80011dc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80011e0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80011e4:	f103 0528 	add.w	r5, r3, #40	; 0x28
  tmp->last       = (rtcnt_t)0;
 80011e8:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ch.tm.offset = (rtcnt_t)0;
 80011ec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  tmp->n          = (ucnt_t)0;
 80011f0:	9203      	str	r2, [sp, #12]
 80011f2:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011f8:	e9c3 3300 	strd	r3, r3, [r3]
  mp->object_size = size;
 80011fc:	221c      	movs	r2, #28
 80011fe:	e9c3 c00f 	strd	ip, r0, [r3, #60]	; 0x3c
 8001202:	f103 0810 	add.w	r8, r3, #16
 8001206:	6259      	str	r1, [r3, #36]	; 0x24
 8001208:	629d      	str	r5, [r3, #40]	; 0x28
 800120a:	f103 0144 	add.w	r1, r3, #68	; 0x44
  mp->align = align;
 800120e:	2504      	movs	r5, #4
  mp->object_size = size;
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  mp->provider = provider;
 8001212:	4a58      	ldr	r2, [pc, #352]	; (8001374 <main+0x344>)
  tmp->best       = (rtcnt_t)-1;
 8001214:	f8cd e000 	str.w	lr, [sp]
 8001218:	f8c3 8010 	str.w	r8, [r3, #16]
 800121c:	6459      	str	r1, [r3, #68]	; 0x44
  mp->align = align;
 800121e:	61dd      	str	r5, [r3, #28]
 8001220:	635d      	str	r5, [r3, #52]	; 0x34
  mp->provider = provider;
 8001222:	621a      	str	r2, [r3, #32]
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 8001226:	4668      	mov	r0, sp
 8001228:	f7ff fa4a 	bl	80006c0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800122c:	4668      	mov	r0, sp
 800122e:	f7ff fa17 	bl	8000660 <chTMStopMeasurementX>
  } while (i > 0U);
 8001232:	3d01      	subs	r5, #1
 8001234:	d1f7      	bne.n	8001226 <main+0x1f6>
  ch.tm.offset = tm.best;
 8001236:	9a00      	ldr	r2, [sp, #0]
  REG_INSERT(tp);
 8001238:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <main+0x348>)
 800123a:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800123e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  tp->prio      = prio;
 8001242:	2280      	movs	r2, #128	; 0x80
  tmp->best       = (rtcnt_t)-1;
 8001244:	f04f 3cff 	mov.w	ip, #4294967295
  tmp->cumulative = (rttime_t)0;
 8001248:	2000      	movs	r0, #0
 800124a:	2100      	movs	r1, #0
 800124c:	63a2      	str	r2, [r4, #56]	; 0x38
  tp->realprio  = prio;
 800124e:	66e2      	str	r2, [r4, #108]	; 0x6c
  tp->name      = name;
 8001250:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001390 <main+0x360>
  tmp->best       = (rtcnt_t)-1;
 8001254:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
  tp->refs      = (trefs_t)1;
 8001258:	2201      	movs	r2, #1
  REG_INSERT(tp);
 800125a:	e9c4 4e10 	strd	r4, lr, [r4, #64]	; 0x40
 800125e:	f8c4 c0b8 	str.w	ip, [r4, #184]	; 0xb8
  tp->name      = name;
 8001262:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  tmp->last       = (rtcnt_t)0;
 8001266:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800126a:	e9c4 552f 	strd	r5, r5, [r4, #188]	; 0xbc
  tp->epending  = (eventmask_t)0;
 800126e:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
  tmp->cumulative = (rttime_t)0;
 8001272:	e9c4 012c 	strd	r0, r1, [r4, #176]	; 0xb0
 8001276:	e9c4 0132 	strd	r0, r1, [r4, #200]	; 0xc8
  ch.kernel_stats.n_irq = (ucnt_t)0;
 800127a:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 800127e:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
  tmp->n          = (ucnt_t)0;
 8001282:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8001286:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
  tp->flags     = CH_FLAG_MODE_STATIC;
 800128a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  tp->refs      = (trefs_t)1;
 800128e:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
  tlp->next = (thread_t *)tlp;
 8001292:	f103 0828 	add.w	r8, r3, #40	; 0x28
  REG_INSERT(tp);
 8001296:	f8ce 3010 	str.w	r3, [lr, #16]
  tqp->next = (thread_t *)tqp;
 800129a:	f103 0e2c 	add.w	lr, r3, #44	; 0x2c
  tmp->worst      = (rtcnt_t)0;
 800129e:	e9c4 c51e 	strd	ip, r5, [r4, #120]	; 0x78
 80012a2:	e9c4 8e16 	strd	r8, lr, [r4, #88]	; 0x58
 80012a6:	6163      	str	r3, [r4, #20]
  tmp->last       = (rtcnt_t)0;
 80012a8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tqp->prev = (thread_t *)tqp;
 80012ac:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
 80012b0:	f04f 0c20 	mov.w	ip, #32
  tmp->n          = (ucnt_t)0;
 80012b4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  tmp->cumulative = (rttime_t)0;
 80012b8:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80012bc:	61a3      	str	r3, [r4, #24]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80012be:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  currp->wabase = NULL;
 80012c2:	64e5      	str	r5, [r4, #76]	; 0x4c
 80012c4:	f38c 8811 	msr	BASEPRI, ip
  __ASM volatile ("cpsie i" : : : "memory");
 80012c8:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <main+0x34c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80012cc:	4a2c      	ldr	r2, [pc, #176]	; (8001380 <main+0x350>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ce:	68d9      	ldr	r1, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80012d0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001394 <main+0x364>
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012d4:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8001398 <main+0x368>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d8:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 80012dc:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 80012de:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80012e0:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80012e2:	f8d8 200c 	ldr.w	r2, [r8, #12]
     initializations performed before.*/
  port_init();

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->stats);
 80012e6:	69a0      	ldr	r0, [r4, #24]
 80012e8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012ec:	f8c8 200c 	str.w	r2, [r8, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012f0:	f8de 2000 	ldr.w	r2, [lr]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	2110      	movs	r1, #16
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	f8ce 2000 	str.w	r2, [lr]
 80012fe:	3048      	adds	r0, #72	; 0x48
 8001300:	77d9      	strb	r1, [r3, #31]
 8001302:	f883 c022 	strb.w	ip, [r3, #34]	; 0x22
 8001306:	f7ff f9db 	bl	80006c0 <chTMStartMeasurementX>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800130a:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 800130e:	b662      	cpsie	i
 8001310:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <main+0x354>)
    *startp++ = v;
 8001312:	2055      	movs	r0, #85	; 0x55
 8001314:	4613      	mov	r3, r2
 8001316:	f102 01f8 	add.w	r1, r2, #248	; 0xf8
 800131a:	f803 0b01 	strb.w	r0, [r3], #1
  while (startp < endp) {
 800131e:	428b      	cmp	r3, r1
 8001320:	d1fb      	bne.n	800131a <main+0x2ea>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001322:	f04f 0920 	mov.w	r9, #32
 8001326:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 800132a:	f7ff fcb9 	bl	8000ca0 <_stats_start_measure_crit_thd>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <main+0x358>)
  REG_INSERT(tp);
 8001330:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8001334:	e032      	b.n	800139c <main+0x36c>
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000
 8001340:	e000e100 	.word	0xe000e100
 8001344:	20000800 	.word	0x20000800
 8001348:	2000087c 	.word	0x2000087c
 800134c:	08000561 	.word	0x08000561
 8001350:	200008f8 	.word	0x200008f8
 8001354:	40004400 	.word	0x40004400
 8001358:	08000571 	.word	0x08000571
 800135c:	e0042000 	.word	0xe0042000
 8001360:	20000b08 	.word	0x20000b08
 8001364:	08000d11 	.word	0x08000d11
 8001368:	20020000 	.word	0x20020000
 800136c:	20000c98 	.word	0x20000c98
 8001370:	200009c8 	.word	0x200009c8
 8001374:	080005d1 	.word	0x080005d1
 8001378:	20000928 	.word	0x20000928
 800137c:	e000ed00 	.word	0xe000ed00
 8001380:	05fa0300 	.word	0x05fa0300
 8001384:	20000a10 	.word	0x20000a10
 8001388:	20000a84 	.word	0x20000a84
 800138c:	20000b10 	.word	0x20000b10
 8001390:	08001af4 	.word	0x08001af4
 8001394:	e000edf0 	.word	0xe000edf0
 8001398:	e0001000 	.word	0xe0001000
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800139c:	4d85      	ldr	r5, [pc, #532]	; (80015b4 <main+0x584>)
  tp->name      = name;
 800139e:	4886      	ldr	r0, [pc, #536]	; (80015b8 <main+0x588>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80013a0:	6755      	str	r5, [r2, #116]	; 0x74
  tp->state     = CH_STATE_WTSTART;
 80013a2:	2102      	movs	r1, #2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80013a4:	2500      	movs	r5, #0
  tp->state     = CH_STATE_WTSTART;
 80013a6:	f8a2 10b8 	strh.w	r1, [r2, #184]	; 0xb8
  tp->name      = name;
 80013aa:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
  tp->prio      = prio;
 80013ae:	2101      	movs	r1, #1
  REG_INSERT(tp);
 80013b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80013b4:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80015e8 <main+0x5b8>
  REG_INSERT(tp);
 80013b8:	f8c2 c0ac 	str.w	ip, [r2, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80013bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  tp->prio      = prio;
 80013c0:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
  tp->realprio  = prio;
 80013c4:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  tp->refs      = (trefs_t)1;
 80013c8:	f882 10ba 	strb.w	r1, [r2, #186]	; 0xba
  tp->epending  = (eventmask_t)0;
 80013cc:	e9c2 5533 	strd	r5, r5, [r2, #204]	; 0xcc
  tp->wabase = tdp->wbase;
 80013d0:	f8c2 20b4 	str.w	r2, [r2, #180]	; 0xb4
  REG_INSERT(tp);
 80013d4:	f8c2 40a8 	str.w	r4, [r2, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80013d8:	6795      	str	r5, [r2, #120]	; 0x78
 80013da:	f8c2 8094 	str.w	r8, [r2, #148]	; 0x94
  tmp->best       = (rtcnt_t)-1;
 80013de:	f04f 31ff 	mov.w	r1, #4294967295
  REG_INSERT(tp);
 80013e2:	f8cc 0010 	str.w	r0, [ip, #16]
  tmp->cumulative = (rttime_t)0;
 80013e6:	f04f 0a00 	mov.w	sl, #0
  tlp->next = (thread_t *)tlp;
 80013ea:	f103 0c4c 	add.w	ip, r3, #76	; 0x4c
 80013ee:	f04f 0b00 	mov.w	fp, #0
  tqp->next = (thread_t *)tqp;
 80013f2:	3350      	adds	r3, #80	; 0x50
  tmp->last       = (rtcnt_t)0;
 80013f4:	e9c2 5539 	strd	r5, r5, [r2, #228]	; 0xe4
 80013f8:	e9c2 c330 	strd	ip, r3, [r2, #192]	; 0xc0
  tmp->cumulative = (rttime_t)0;
 80013fc:	e9c2 ab3c 	strd	sl, fp, [r2, #240]	; 0xf0
  tmp->n          = (ucnt_t)0;
 8001400:	f8c2 50ec 	str.w	r5, [r2, #236]	; 0xec
  tqp->prev = (thread_t *)tqp;
 8001404:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  tmp->best       = (rtcnt_t)-1;
 8001408:	f8c2 10e0 	str.w	r1, [r2, #224]	; 0xe0
 800140c:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 800140e:	f7ff fb2f 	bl	8000a70 <chSchWakeupS.constprop.0>
  _stats_stop_measure_crit_thd();
 8001412:	f7ff fc3d 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8001416:	f385 8811 	msr	BASEPRI, r5
 800141a:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 800141e:	f7ff fc3f 	bl	8000ca0 <_stats_start_measure_crit_thd>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001422:	7a3b      	ldrb	r3, [r7, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d111      	bne.n	800144c <main+0x41c>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8001428:	4b64      	ldr	r3, [pc, #400]	; (80015bc <main+0x58c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800142a:	4a65      	ldr	r2, [pc, #404]	; (80015c0 <main+0x590>)
 800142c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800142e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001432:	6419      	str	r1, [r3, #64]	; 0x40
 8001434:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001436:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800143a:	6619      	str	r1, [r3, #96]	; 0x60
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001440:	2340      	movs	r3, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001442:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001446:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800144a:	6053      	str	r3, [r2, #4]
      rccEnableUART8(true);
      nvicEnableVector(STM32_UART8_NUMBER, STM32_SERIAL_UART8_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
 800144c:	495d      	ldr	r1, [pc, #372]	; (80015c4 <main+0x594>)
 800144e:	485e      	ldr	r0, [pc, #376]	; (80015c8 <main+0x598>)
 8001450:	f7ff fabe 	bl	80009d0 <usart_init>
  sdp->state = SD_READY;
 8001454:	2302      	movs	r3, #2
 8001456:	723b      	strb	r3, [r7, #8]
  _stats_stop_measure_crit_thd();
 8001458:	f7ff fc1a 	bl	8000c90 <_stats_stop_measure_crit_thd>
 800145c:	2300      	movs	r3, #0
 800145e:	f383 8811 	msr	BASEPRI, r3
//     USART_CR2_STOP1_BITS,      // Value of CR2 Register <--> CR2 Register parameter in SerialConfig Structure
//     0
//  }

  sdStart(&SD2, NULL);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8001462:	f240 3182 	movw	r1, #898	; 0x382
 8001466:	2004      	movs	r0, #4
 8001468:	f7ff f812 	bl	8000490 <_pal_lld_setgroupmode.constprop.0>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 800146c:	f240 3182 	movw	r1, #898	; 0x382
 8001470:	2008      	movs	r0, #8
 8001472:	f7ff f80d 	bl	8000490 <_pal_lld_setgroupmode.constprop.0>
 8001476:	2320      	movs	r3, #32
 8001478:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800147c:	f7ff fc10 	bl	8000ca0 <_stats_start_measure_crit_thd>
  if (sdp->state == SD_STOP) {
 8001480:	7a33      	ldrb	r3, [r6, #8]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d112      	bne.n	80014ac <main+0x47c>
      rccEnableUART4(true);
 8001486:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <main+0x58c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001488:	4a4d      	ldr	r2, [pc, #308]	; (80015c0 <main+0x590>)
 800148a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800148c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8001490:	6419      	str	r1, [r3, #64]	; 0x40
 8001492:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001494:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8001498:	6619      	str	r1, [r3, #96]	; 0x60
 800149a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149c:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800149e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80014a2:	f882 1334 	strb.w	r1, [r2, #820]	; 0x334
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80014a6:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80014aa:	6053      	str	r3, [r2, #4]
  usart_init(sdp, config);
 80014ac:	4945      	ldr	r1, [pc, #276]	; (80015c4 <main+0x594>)
 80014ae:	4847      	ldr	r0, [pc, #284]	; (80015cc <main+0x59c>)
 80014b0:	2702      	movs	r7, #2
 80014b2:	f7ff fa8d 	bl	80009d0 <usart_init>
 80014b6:	7237      	strb	r7, [r6, #8]
  _stats_stop_measure_crit_thd();
 80014b8:	f7ff fbea 	bl	8000c90 <_stats_stop_measure_crit_thd>
 80014bc:	2300      	movs	r3, #0
 80014be:	f383 8811 	msr	BASEPRI, r3

  sdStart(&SD4, NULL);
  palSetPadMode(GPIOA, 0, PAL_MODE_ALTERNATE(8));
  palSetPadMode(GPIOA, 1, PAL_MODE_ALTERNATE(8));
 80014c2:	4d43      	ldr	r5, [pc, #268]	; (80015d0 <main+0x5a0>)
  palSetPadMode(GPIOA, 0, PAL_MODE_ALTERNATE(8));
 80014c4:	f240 4102 	movw	r1, #1026	; 0x402
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7fe ffe1 	bl	8000490 <_pal_lld_setgroupmode.constprop.0>
  palSetPadMode(GPIOA, 1, PAL_MODE_ALTERNATE(8));
 80014ce:	f240 4102 	movw	r1, #1026	; 0x402
 80014d2:	4638      	mov	r0, r7
 80014d4:	f7fe ffdc 	bl	8000490 <_pal_lld_setgroupmode.constprop.0>
 80014d8:	462b      	mov	r3, r5
 80014da:	f505 71b4 	add.w	r1, r5, #360	; 0x168
    *startp++ = v;
 80014de:	2255      	movs	r2, #85	; 0x55
 80014e0:	f803 2b01 	strb.w	r2, [r3], #1
  while (startp < endp) {
 80014e4:	428b      	cmp	r3, r1
 80014e6:	d1fb      	bne.n	80014e0 <main+0x4b0>
 80014e8:	2320      	movs	r3, #32
 80014ea:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80014ee:	f7ff fbd7 	bl	8000ca0 <_stats_start_measure_crit_thd>
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <main+0x5a4>)
 80014f4:	4938      	ldr	r1, [pc, #224]	; (80015d8 <main+0x5a8>)
  REG_INSERT(tp);
 80014f6:	6962      	ldr	r2, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80014f8:	f8c5 10e4 	str.w	r1, [r5, #228]	; 0xe4
  tp->name      = name;
 80014fc:	4837      	ldr	r0, [pc, #220]	; (80015dc <main+0x5ac>)
 80014fe:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
  tp->state     = CH_STATE_WTSTART;
 8001502:	2602      	movs	r6, #2
  tp->refs      = (trefs_t)1;
 8001504:	2101      	movs	r1, #1
  REG_INSERT(tp);
 8001506:	f103 0024 	add.w	r0, r3, #36	; 0x24
  tp->state     = CH_STATE_WTSTART;
 800150a:	f8a5 6128 	strh.w	r6, [r5, #296]	; 0x128
  tp->refs      = (trefs_t)1;
 800150e:	f885 112a 	strb.w	r1, [r5, #298]	; 0x12a
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001512:	2600      	movs	r6, #0
  tp->prio      = prio;
 8001514:	2180      	movs	r1, #128	; 0x80
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001516:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
  REG_INSERT(tp);
 800151a:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800151e:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
  tp->prio      = prio;
 8001522:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
  tp->realprio  = prio;
 8001526:	f8c5 1144 	str.w	r1, [r5, #324]	; 0x144
  tp->epending  = (eventmask_t)0;
 800152a:	e9c5 664f 	strd	r6, r6, [r5, #316]	; 0x13c
  tlp->next = (thread_t *)tlp;
 800152e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
  tp->wabase = (stkalign_t *)wsp;
 8001532:	f8c5 5124 	str.w	r5, [r5, #292]	; 0x124
  tqp->next = (thread_t *)tqp;
 8001536:	3350      	adds	r3, #80	; 0x50
  REG_INSERT(tp);
 8001538:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800153c:	f8c5 60e8 	str.w	r6, [r5, #232]	; 0xe8
  tmp->cumulative = (rttime_t)0;
 8001540:	f04f 0800 	mov.w	r8, #0
  REG_INSERT(tp);
 8001544:	6110      	str	r0, [r2, #16]
 8001546:	f04f 0900 	mov.w	r9, #0
  tmp->best       = (rtcnt_t)-1;
 800154a:	f04f 32ff 	mov.w	r2, #4294967295
  tqp->prev = (thread_t *)tqp;
 800154e:	e9c5 334d 	strd	r3, r3, [r5, #308]	; 0x134
  tlp->next = (thread_t *)tlp;
 8001552:	f8c5 1130 	str.w	r1, [r5, #304]	; 0x130
 8001556:	f8c5 2150 	str.w	r2, [r5, #336]	; 0x150
  tmp->last       = (rtcnt_t)0;
 800155a:	e9c5 6655 	strd	r6, r6, [r5, #340]	; 0x154
  tmp->cumulative = (rttime_t)0;
 800155e:	e9c5 8958 	strd	r8, r9, [r5, #352]	; 0x160
  tmp->n          = (ucnt_t)0;
 8001562:	f8c5 615c 	str.w	r6, [r5, #348]	; 0x15c
 8001566:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 8001568:	f7ff fa82 	bl	8000a70 <chSchWakeupS.constprop.0>
  _stats_stop_measure_crit_thd();
 800156c:	f7ff fb90 	bl	8000c90 <_stats_stop_measure_crit_thd>
 8001570:	f386 8811 	msr	BASEPRI, r6
//int v =45;
//    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
//    test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
//    test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
//    }
  sdPut(&SD2,(char)'A');
 8001574:	4c1a      	ldr	r4, [pc, #104]	; (80015e0 <main+0x5b0>)
 uint8_t token = sdGet(&SD2);
 8001576:	f1a4 0524 	sub.w	r5, r4, #36	; 0x24
  sdPut(&SD2,(char)'A');
 800157a:	f04f 32ff 	mov.w	r2, #4294967295
 800157e:	2141      	movs	r1, #65	; 0x41
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff fc65 	bl	8000e50 <oqPutTimeout>
 uint8_t token = sdGet(&SD2);
 8001586:	f04f 31ff 	mov.w	r1, #4294967295
 800158a:	4628      	mov	r0, r5
 800158c:	f7ff fd20 	bl	8000fd0 <iqGetTimeout>
 sdWrite(&SD2, (unsigned char*)"Kunal\n", 5);
 8001590:	4914      	ldr	r1, [pc, #80]	; (80015e4 <main+0x5b4>)
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	2205      	movs	r2, #5
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fbe1 	bl	8000d60 <oqWriteTimeout>
   //sdPut(&SD2, (uint8_t)token);
   sdRead(&SD2, buffer, 5);
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	2205      	movs	r2, #5
 80015a4:	4669      	mov	r1, sp
 80015a6:	4628      	mov	r0, r5
 80015a8:	f7ff fc9a 	bl	8000ee0 <iqReadTimeout>


     chThdSleepMilliseconds(100);
 80015ac:	f7ff fb80 	bl	8000cb0 <chThdSleep.constprop.0>
  while (true) {
 80015b0:	e7e3      	b.n	800157a <main+0x54a>
 80015b2:	bf00      	nop
 80015b4:	080007e1 	.word	0x080007e1
 80015b8:	08001adc 	.word	0x08001adc
 80015bc:	40023800 	.word	0x40023800
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	08001b0c 	.word	0x08001b0c
 80015c8:	20000800 	.word	0x20000800
 80015cc:	2000087c 	.word	0x2000087c
 80015d0:	20000b30 	.word	0x20000b30
 80015d4:	20000c14 	.word	0x20000c14
 80015d8:	08000ce1 	.word	0x08000ce1
 80015dc:	08001ae4 	.word	0x08001ae4
 80015e0:	20000830 	.word	0x20000830
 80015e4:	08001aec 	.word	0x08001aec
 80015e8:	080002d1 	.word	0x080002d1
 80015ec:	00000000 	.word	0x00000000

080015f0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80015f0:	300c      	adds	r0, #12
 80015f2:	f7ff bced 	b.w	8000fd0 <iqGetTimeout>
 80015f6:	bf00      	nop
	...

08001600 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001600:	300c      	adds	r0, #12
 8001602:	f04f 31ff 	mov.w	r1, #4294967295
 8001606:	f7ff bce3 	b.w	8000fd0 <iqGetTimeout>
 800160a:	bf00      	nop
 800160c:	0000      	movs	r0, r0
	...

08001610 <chThdExit>:
void chThdExit(msg_t msg) {
 8001610:	b538      	push	{r3, r4, r5, lr}
 8001612:	4602      	mov	r2, r0
 8001614:	2320      	movs	r3, #32
 8001616:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800161a:	f7ff fb41 	bl	8000ca0 <_stats_start_measure_crit_thd>
  thread_t *tp = currp;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <chThdExit+0x4c>)
 8001620:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001622:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001624:	6262      	str	r2, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001626:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800162a:	42a8      	cmp	r0, r5
 800162c:	d006      	beq.n	800163c <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 800162e:	6803      	ldr	r3, [r0, #0]
 8001630:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001632:	f7ff f88d 	bl	8000750 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001636:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001638:	42a8      	cmp	r0, r5
 800163a:	d1f8      	bne.n	800162e <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 800163c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001640:	b93b      	cbnz	r3, 8001652 <chThdExit+0x42>
 8001642:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001646:	079b      	lsls	r3, r3, #30
 8001648:	d103      	bne.n	8001652 <chThdExit+0x42>
    REG_REMOVE(tp);
 800164a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800164e:	6113      	str	r3, [r2, #16]
 8001650:	615a      	str	r2, [r3, #20]
}
 8001652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8001656:	200f      	movs	r0, #15
 8001658:	f7ff ba4a 	b.w	8000af0 <chSchGoSleepS>
 800165c:	200008f8 	.word	0x200008f8

08001660 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001660:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8001662:	4c14      	ldr	r4, [pc, #80]	; (80016b4 <chSchDoReschedule+0x54>)
  thread_t *tp = tqp->next;
 8001664:	6821      	ldr	r1, [r4, #0]
 8001666:	69a5      	ldr	r5, [r4, #24]
  tqp->next             = tp->queue.next;
 8001668:	680b      	ldr	r3, [r1, #0]
 800166a:	6023      	str	r3, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800166c:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800166e:	605c      	str	r4, [r3, #4]
 8001670:	f881 2020 	strb.w	r2, [r1, #32]
  tp->state = CH_STATE_READY;
 8001674:	2200      	movs	r2, #0

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8001676:	68a8      	ldr	r0, [r5, #8]
  tp->state = CH_STATE_READY;
 8001678:	f885 2020 	strb.w	r2, [r5, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800167c:	61a1      	str	r1, [r4, #24]
  cp = (thread_t *)&ch.rlist.queue;
 800167e:	e000      	b.n	8001682 <chSchDoReschedule+0x22>
 8001680:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	4290      	cmp	r0, r2
 8001686:	d3fb      	bcc.n	8001680 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8001688:	6858      	ldr	r0, [r3, #4]
  ch.kernel_stats.n_ctxswc++;
 800168a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800168e:	6068      	str	r0, [r5, #4]
  tp->queue.next             = cp;
 8001690:	602b      	str	r3, [r5, #0]
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8001692:	3148      	adds	r1, #72	; 0x48
  tp->queue.prev->queue.next = tp;
 8001694:	6005      	str	r5, [r0, #0]
  ch.kernel_stats.n_ctxswc++;
 8001696:	3201      	adds	r2, #1
  cp->queue.prev             = tp;
 8001698:	605d      	str	r5, [r3, #4]
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 800169a:	f105 0048 	add.w	r0, r5, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 800169e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 80016a2:	f7fe ffbd 	bl	8000620 <chTMChainMeasurementToX>
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80016a6:	69a0      	ldr	r0, [r4, #24]
 80016a8:	4629      	mov	r1, r5
}
 80016aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 80016ae:	f7fe be07 	b.w	80002c0 <_port_switch>
 80016b2:	bf00      	nop
 80016b4:	200008f8 	.word	0x200008f8
	...

080016c0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80016c0:	4a7e      	ldr	r2, [pc, #504]	; (80018bc <__early_init+0x1fc>)
  gpiop->OTYPER  = config->otyper;
 80016c2:	487f      	ldr	r0, [pc, #508]	; (80018c0 <__early_init+0x200>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80016c4:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80016c6:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8001914 <__early_init+0x254>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80016ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016ce:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80016d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80016d4:	6113      	str	r3, [r2, #16]
 80016d6:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80016d8:	4e7a      	ldr	r6, [pc, #488]	; (80018c4 <__early_init+0x204>)
  gpiop->PUPDR   = config->pupdr;
 80016da:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8001918 <__early_init+0x258>
  gpiop->AFRL    = config->afrl;
 80016de:	4f7a      	ldr	r7, [pc, #488]	; (80018c8 <__early_init+0x208>)
  gpiop->OTYPER  = config->otyper;
 80016e0:	4d7a      	ldr	r5, [pc, #488]	; (80018cc <__early_init+0x20c>)
 80016e2:	4c7b      	ldr	r4, [pc, #492]	; (80018d0 <__early_init+0x210>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80016e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6113      	str	r3, [r2, #16]
 80016ee:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80016f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016f2:	430b      	orrs	r3, r1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80016f8:	430b      	orrs	r3, r1
 80016fa:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 80016fc:	f46f 41a8 	mvn.w	r1, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8001700:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001702:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001706:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001708:	6081      	str	r1, [r0, #8]
  gpiop->ODR     = config->odr;
 800170a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
 800170e:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->AFRH    = config->afrh;
 8001712:	f8df 8208 	ldr.w	r8, [pc, #520]	; 800191c <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 8001716:	6141      	str	r1, [r0, #20]
  gpiop->MODER   = config->moder;
 8001718:	f8df e204 	ldr.w	lr, [pc, #516]	; 8001920 <__early_init+0x260>
  gpiop->AFRL    = config->afrl;
 800171c:	6207      	str	r7, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 800171e:	f44f 7710 	mov.w	r7, #576	; 0x240
  gpiop->AFRH    = config->afrh;
 8001722:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001726:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 800172a:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8001730:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8001924 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 8001734:	60b0      	str	r0, [r6, #8]
  gpiop->AFRL    = config->afrl;
 8001736:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 800173a:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->ODR     = config->odr;
 800173e:	6171      	str	r1, [r6, #20]
  gpiop->AFRH    = config->afrh;
 8001740:	f04f 0e40 	mov.w	lr, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 8001744:	6237      	str	r7, [r6, #32]
  gpiop->MODER   = config->moder;
 8001746:	4f63      	ldr	r7, [pc, #396]	; (80018d4 <__early_init+0x214>)
  gpiop->AFRH    = config->afrh;
 8001748:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800174c:	6037      	str	r7, [r6, #0]
  gpiop->PUPDR   = config->pupdr;
 800174e:	f106 56a2 	add.w	r6, r6, #339738624	; 0x14400000
 8001752:	f506 3644 	add.w	r6, r6, #200704	; 0x31000
 8001756:	f506 76aa 	add.w	r6, r6, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 800175a:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800175c:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 800175e:	60ee      	str	r6, [r5, #12]
  gpiop->AFRL    = config->afrl;
 8001760:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8001764:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8001766:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001768:	4e5b      	ldr	r6, [pc, #364]	; (80018d8 <__early_init+0x218>)
 800176a:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800176c:	4e5b      	ldr	r6, [pc, #364]	; (80018dc <__early_init+0x21c>)
 800176e:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 8001770:	4d5b      	ldr	r5, [pc, #364]	; (80018e0 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 8001772:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001774:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001776:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8001778:	f640 75ff 	movw	r5, #4095	; 0xfff
 800177c:	6165      	str	r5, [r4, #20]
  gpiop->OTYPER  = config->otyper;
 800177e:	4f59      	ldr	r7, [pc, #356]	; (80018e4 <__early_init+0x224>)
 8001780:	4e59      	ldr	r6, [pc, #356]	; (80018e8 <__early_init+0x228>)
  gpiop->MODER   = config->moder;
 8001782:	4d5a      	ldr	r5, [pc, #360]	; (80018ec <__early_init+0x22c>)
  gpiop->AFRL    = config->afrl;
 8001784:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001786:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001788:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 800178a:	f8cc 3004 	str.w	r3, [ip, #4]
 800178e:	4d58      	ldr	r5, [pc, #352]	; (80018f0 <__early_init+0x230>)
  gpiop->OSPEEDR = config->ospeedr;
 8001790:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->OTYPER  = config->otyper;
 8001794:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8001798:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 800179c:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 80017a0:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 80017a4:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80017a8:	f8cc e000 	str.w	lr, [ip]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80017ac:	f5ac 3cd0 	sub.w	ip, ip, #106496	; 0x1a000
  gpiop->OTYPER  = config->otyper;
 80017b0:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80017b2:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80017b4:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 80017b6:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80017b8:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80017bc:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 80017be:	6073      	str	r3, [r6, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80017c0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 80017c4:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80017c6:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 80017c8:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80017ca:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80017cc:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80017ce:	6033      	str	r3, [r6, #0]
  PWR->CR = STM32_VOS;
 80017d0:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 80017d4:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80017d6:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80017d8:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 80017da:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80017dc:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80017de:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80017e0:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 80017e2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80017e4:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80017e6:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 80017e8:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80017ea:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80017ec:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80017ee:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80017f0:	6417      	str	r7, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80017f2:	f8cc 6000 	str.w	r6, [ip]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80017f6:	6813      	ldr	r3, [r2, #0]
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80017fe:	6813      	ldr	r3, [r2, #0]
 8001800:	079e      	lsls	r6, r3, #30
 8001802:	d5fc      	bpl.n	80017fe <__early_init+0x13e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001804:	6891      	ldr	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <__early_init+0x1fc>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001808:	f021 0103 	bic.w	r1, r1, #3
 800180c:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	f012 020c 	ands.w	r2, r2, #12
 8001814:	d1fb      	bne.n	800180e <__early_init+0x14e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001816:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001818:	4928      	ldr	r1, [pc, #160]	; (80018bc <__early_init+0x1fc>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800181a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800181e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001820:	609a      	str	r2, [r3, #8]
  RCC->CR |= RCC_CR_HSEON;
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001828:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800182a:	680b      	ldr	r3, [r1, #0]
 800182c:	039d      	lsls	r5, r3, #14
 800182e:	d5fc      	bpl.n	800182a <__early_init+0x16a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001830:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <__early_init+0x1fc>)
  RCC->CSR |= RCC_CSR_LSION;
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800183a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800183c:	0794      	lsls	r4, r2, #30
 800183e:	d5fc      	bpl.n	800183a <__early_init+0x17a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <__early_init+0x234>)
 8001842:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001844:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001846:	492c      	ldr	r1, [pc, #176]	; (80018f8 <__early_init+0x238>)
  RCC->CR |= RCC_CR_PLLON;
 8001848:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800184c:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800184e:	684b      	ldr	r3, [r1, #4]
 8001850:	0458      	lsls	r0, r3, #17
 8001852:	d5fc      	bpl.n	800184e <__early_init+0x18e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <__early_init+0x1fc>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	0192      	lsls	r2, r2, #6
 800185a:	d5fc      	bpl.n	8001856 <__early_init+0x196>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800185c:	4927      	ldr	r1, [pc, #156]	; (80018fc <__early_init+0x23c>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800185e:	4a28      	ldr	r2, [pc, #160]	; (8001900 <__early_init+0x240>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001860:	6099      	str	r1, [r3, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <__early_init+0x244>)
 8001866:	429a      	cmp	r2, r3
 8001868:	d01e      	beq.n	80018a8 <__early_init+0x1e8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <__early_init+0x248>)
 800186c:	f240 7205 	movw	r2, #1797	; 0x705
 8001870:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8001872:	4a25      	ldr	r2, [pc, #148]	; (8001908 <__early_init+0x248>)
 8001874:	6813      	ldr	r3, [r2, #0]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	2b05      	cmp	r3, #5
 800187c:	d1fa      	bne.n	8001874 <__early_init+0x1b4>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <__early_init+0x1fc>)
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	f042 0202 	orr.w	r2, r2, #2
 8001886:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	f002 020c 	and.w	r2, r2, #12
 800188e:	2a08      	cmp	r2, #8
 8001890:	d1fa      	bne.n	8001888 <__early_init+0x1c8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
 800189a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800189c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018a0:	665a      	str	r2, [r3, #100]	; 0x64
 80018a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 80018a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80018a8:	4a18      	ldr	r2, [pc, #96]	; (800190c <__early_init+0x24c>)
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <__early_init+0x250>)
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d1db      	bne.n	800186a <__early_init+0x1aa>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <__early_init+0x248>)
 80018b4:	f240 1205 	movw	r2, #261	; 0x105
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e7da      	b.n	8001872 <__early_init+0x1b2>
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	55560000 	.word	0x55560000
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	00082080 	.word	0x00082080
 80018d8:	00060600 	.word	0x00060600
 80018dc:	02208001 	.word	0x02208001
 80018e0:	00555055 	.word	0x00555055
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40021800 	.word	0x40021800
 80018ec:	55000100 	.word	0x55000100
 80018f0:	40021c00 	.word	0x40021c00
 80018f4:	07405408 	.word	0x07405408
 80018f8:	40007000 	.word	0x40007000
 80018fc:	38889400 	.word	0x38889400
 8001900:	e0042000 	.word	0xe0042000
 8001904:	20006411 	.word	0x20006411
 8001908:	40023c00 	.word	0x40023c00
 800190c:	e000ed00 	.word	0xe000ed00
 8001910:	410fc241 	.word	0x410fc241
 8001914:	40021000 	.word	0x40021000
 8001918:	40010054 	.word	0x40010054
 800191c:	000aaa00 	.word	0x000aaa00
 8001920:	2aa0aa00 	.word	0x2aa0aa00
 8001924:	55514515 	.word	0x55514515
	...

08001930 <Vector110>:
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8001930:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8001932:	f7fe fe65 	bl	8000600 <_stats_increase_irq>
  serve_interrupt(&SD4);
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <Vector110+0x14>)
 8001938:	f7fe ff5a 	bl	80007f0 <serve_interrupt>
}
 800193c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001940:	f7fe be1e 	b.w	8000580 <_port_irq_epilogue>
 8001944:	2000087c 	.word	0x2000087c
	...

08001950 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001950:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8001952:	f7fe fe55 	bl	8000600 <_stats_increase_irq>
  serve_interrupt(&SD2);
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <VectorD8+0x14>)
 8001958:	f7fe ff4a 	bl	80007f0 <serve_interrupt>
}
 800195c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001960:	f7fe be0e 	b.w	8000580 <_port_irq_epilogue>
 8001964:	20000800 	.word	0x20000800
	...

08001970 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8001974:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 8001978:	f7fe fe42 	bl	8000600 <_stats_increase_irq>
  sr  = timp->SR;
 800197c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800197e:	68ea      	ldr	r2, [r5, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8001984:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001986:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8001988:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 800198a:	d403      	bmi.n	8001994 <VectorB0+0x24>
}
 800198c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001990:	f7fe bdf6 	b.w	8000580 <_port_irq_epilogue>
 8001994:	2320      	movs	r3, #32
 8001996:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800199a:	4e26      	ldr	r6, [pc, #152]	; (8001a34 <VectorB0+0xc4>)
  _stats_start_measure_crit_isr();
 800199c:	f7fe fe98 	bl	80006d0 <_stats_start_measure_crit_isr>
 80019a0:	69f4      	ldr	r4, [r6, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 80019a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80019a4:	6ab3      	ldr	r3, [r6, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80019a6:	68a2      	ldr	r2, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 80019a8:	eba0 0903 	sub.w	r9, r0, r3
 80019ac:	454a      	cmp	r2, r9
 80019ae:	f106 0a1c 	add.w	sl, r6, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80019b2:	bf98      	it	ls
 80019b4:	2700      	movls	r7, #0
    if (nowdelta < vtp->delta) {
 80019b6:	d825      	bhi.n	8001a04 <VectorB0+0x94>
 80019b8:	f04f 0820 	mov.w	r8, #32
 80019bc:	e000      	b.n	80019c0 <VectorB0+0x50>
 80019be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80019c0:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 80019c2:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 80019c6:	4413      	add	r3, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80019c8:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 80019ca:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80019cc:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 80019d0:	61f1      	str	r1, [r6, #28]
      vtp->func = NULL;
 80019d2:	60e7      	str	r7, [r4, #12]
  STM32_ST_TIM->DIER = 0U;
 80019d4:	bf08      	it	eq
 80019d6:	60ef      	streq	r7, [r5, #12]
      nowdelta -= vtp->delta;
 80019d8:	eba9 0902 	sub.w	r9, r9, r2
  _stats_stop_measure_crit_isr();
 80019dc:	f7fe fe68 	bl	80006b0 <_stats_stop_measure_crit_isr>
 80019e0:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 80019e4:	6920      	ldr	r0, [r4, #16]
 80019e6:	47d8      	blx	fp
 80019e8:	f388 8811 	msr	BASEPRI, r8
  _stats_start_measure_crit_isr();
 80019ec:	f7fe fe70 	bl	80006d0 <_stats_start_measure_crit_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80019f0:	69f4      	ldr	r4, [r6, #28]
    }
    while (vtp->delta <= nowdelta);
 80019f2:	68a2      	ldr	r2, [r4, #8]
 80019f4:	4591      	cmp	r9, r2
 80019f6:	d2e2      	bcs.n	80019be <VectorB0+0x4e>
  return (systime_t)STM32_ST_TIM->CNT;
 80019f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80019fa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80019fc:	eba0 0903 	sub.w	r9, r0, r3
    if (nowdelta < vtp->delta) {
 8001a00:	4591      	cmp	r9, r2
 8001a02:	d2d9      	bcs.n	80019b8 <VectorB0+0x48>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001a04:	4554      	cmp	r4, sl
 8001a06:	d00b      	beq.n	8001a20 <VectorB0+0xb0>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8001a08:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.lasttime += nowdelta;
 8001a0a:	62b0      	str	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8001a0c:	1a12      	subs	r2, r2, r0
 8001a0e:	4413      	add	r3, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001a10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	bf2c      	ite	cs
 8001a18:	18c0      	addcs	r0, r0, r3
 8001a1a:	3002      	addcc	r0, #2
 8001a1c:	60a3      	str	r3, [r4, #8]
 8001a1e:	6350      	str	r0, [r2, #52]	; 0x34
  _stats_stop_measure_crit_isr();
 8001a20:	f7fe fe46 	bl	80006b0 <_stats_stop_measure_crit_isr>
 8001a24:	2300      	movs	r3, #0
 8001a26:	f383 8811 	msr	BASEPRI, r3
}
 8001a2a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001a2e:	f7fe bda7 	b.w	8000580 <_port_irq_epilogue>
 8001a32:	bf00      	nop
 8001a34:	200008f8 	.word	0x200008f8
	...

08001a40 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001a40:	b4f0      	push	{r4, r5, r6, r7}
 8001a42:	4f14      	ldr	r7, [pc, #80]	; (8001a94 <__init_ram_areas+0x54>)
 8001a44:	4d14      	ldr	r5, [pc, #80]	; (8001a98 <__init_ram_areas+0x58>)
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <__init_ram_areas+0x5c>)
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <__init_ram_areas+0x60>)
 8001a4a:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <__init_ram_areas+0x64>)
 8001a4c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001a50:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8001a52:	4298      	cmp	r0, r3
 8001a54:	d911      	bls.n	8001a7a <__init_ram_areas+0x3a>
 8001a56:	3904      	subs	r1, #4
 8001a58:	461a      	mov	r2, r3
      *p = *tp;
 8001a5a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8001a5e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8001a62:	4290      	cmp	r0, r2
 8001a64:	d8f9      	bhi.n	8001a5a <__init_ram_areas+0x1a>
 8001a66:	1e42      	subs	r2, r0, #1
 8001a68:	1ad2      	subs	r2, r2, r3
 8001a6a:	f022 0203 	bic.w	r2, r2, #3
 8001a6e:	3204      	adds	r2, #4
 8001a70:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8001a72:	429d      	cmp	r5, r3
 8001a74:	d903      	bls.n	8001a7e <__init_ram_areas+0x3e>
      *p = 0;
 8001a76:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8001a7a:	429d      	cmp	r5, r3
 8001a7c:	d8fb      	bhi.n	8001a76 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001a7e:	4567      	cmp	r7, ip
 8001a80:	d005      	beq.n	8001a8e <__init_ram_areas+0x4e>
 8001a82:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8001a86:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	e7e1      	b.n	8001a52 <__init_ram_areas+0x12>
#endif
}
 8001a8e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	08001b18 	.word	0x08001b18
 8001a98:	20000c98 	.word	0x20000c98
 8001a9c:	20000c98 	.word	0x20000c98
 8001aa0:	20000c98 	.word	0x20000c98
 8001aa4:	08001bc0 	.word	0x08001bc0
	...

08001ab0 <__default_exit>:
  while (true) {
 8001ab0:	e7fe      	b.n	8001ab0 <__default_exit>
 8001ab2:	bf00      	nop
	...

08001ac0 <__late_init>:
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
	...

08001ad0 <__core_init>:
}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
