
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08000de1 	.word	0x08000de1
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	08002551 	.word	0x08002551
 8000070:	08002521 	.word	0x08002521
 8000074:	080024f1 	.word	0x080024f1
 8000078:	080024c1 	.word	0x080024c1
 800007c:	08002491 	.word	0x08002491
 8000080:	08002461 	.word	0x08002461
 8000084:	08002431 	.word	0x08002431
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08001f81 	.word	0x08001f81
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08001f61 	.word	0x08001f61
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	08002401 	.word	0x08002401
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	08001f41 	.word	0x08001f41
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080023d1 	.word	0x080023d1
 8000124:	080023a1 	.word	0x080023a1
 8000128:	08002371 	.word	0x08002371
 800012c:	08002341 	.word	0x08002341
 8000130:	08002311 	.word	0x08002311
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080022e1 	.word	0x080022e1
 8000154:	080022b1 	.word	0x080022b1
 8000158:	08002281 	.word	0x08002281
 800015c:	080002bb 	.word	0x080002bb
 8000160:	08002151 	.word	0x08002151
 8000164:	08002051 	.word	0x08002051
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f002 fa04 	bl	8002610 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f001 fde2 	bl	8001dd0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f002 f996 	bl	8002580 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f002 f9d4 	bl	8002600 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f000 ffc2 	bl	80011f0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f002 b9b8 	b.w	80025f0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	08002820 	.word	0x08002820
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000808 	.word	0x20000808
                ldr     r1, =__bss_base__
 80002a0:	20000808 	.word	0x20000808
                ldr     r2, =__bss_end__
 80002a4:	20000c34 	.word	0x20000c34
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002d0:	f000 fd96 	bl	8000e00 <_stats_stop_measure_crit_thd>
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002da:	4628      	mov	r0, r5
                blx     r4
 80002dc:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002de:	2000      	movs	r0, #0
                bl      chThdExit
 80002e0:	f001 fd1e 	bl	8001d20 <chThdExit>

080002e4 <_zombies>:
_zombies:       b       _zombies
 80002e4:	e7fe      	b.n	80002e4 <_zombies>

080002e6 <_port_switch_from_isr>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch_from_isr
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
 80002e6:	f000 fd93 	bl	8000e10 <_stats_start_measure_crit_thd>
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002ea:	f001 fd41 	bl	8001d70 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002ee:	f000 fd87 	bl	8000e00 <_stats_stop_measure_crit_thd>

080002f2 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002f2:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002f4:	e7fe      	b.n	80002f4 <_port_exit_from_isr+0x2>
	...

080002f8 <memcpy>:
 80002f8:	4684      	mov	ip, r0
 80002fa:	ea41 0300 	orr.w	r3, r1, r0
 80002fe:	f013 0303 	ands.w	r3, r3, #3
 8000302:	d16d      	bne.n	80003e0 <memcpy+0xe8>
 8000304:	3a40      	subs	r2, #64	; 0x40
 8000306:	d341      	bcc.n	800038c <memcpy+0x94>
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	3a40      	subs	r2, #64	; 0x40
 800038a:	d2bd      	bcs.n	8000308 <memcpy+0x10>
 800038c:	3230      	adds	r2, #48	; 0x30
 800038e:	d311      	bcc.n	80003b4 <memcpy+0xbc>
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	3a10      	subs	r2, #16
 80003b2:	d2ed      	bcs.n	8000390 <memcpy+0x98>
 80003b4:	320c      	adds	r2, #12
 80003b6:	d305      	bcc.n	80003c4 <memcpy+0xcc>
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	3a04      	subs	r2, #4
 80003c2:	d2f9      	bcs.n	80003b8 <memcpy+0xc0>
 80003c4:	3204      	adds	r2, #4
 80003c6:	d008      	beq.n	80003da <memcpy+0xe2>
 80003c8:	07d2      	lsls	r2, r2, #31
 80003ca:	bf1c      	itt	ne
 80003cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003d4:	d301      	bcc.n	80003da <memcpy+0xe2>
 80003d6:	880b      	ldrh	r3, [r1, #0]
 80003d8:	8003      	strh	r3, [r0, #0]
 80003da:	4660      	mov	r0, ip
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2a08      	cmp	r2, #8
 80003e2:	d313      	bcc.n	800040c <memcpy+0x114>
 80003e4:	078b      	lsls	r3, r1, #30
 80003e6:	d08d      	beq.n	8000304 <memcpy+0xc>
 80003e8:	f010 0303 	ands.w	r3, r0, #3
 80003ec:	d08a      	beq.n	8000304 <memcpy+0xc>
 80003ee:	f1c3 0304 	rsb	r3, r3, #4
 80003f2:	1ad2      	subs	r2, r2, r3
 80003f4:	07db      	lsls	r3, r3, #31
 80003f6:	bf1c      	itt	ne
 80003f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000400:	d380      	bcc.n	8000304 <memcpy+0xc>
 8000402:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000406:	f820 3b02 	strh.w	r3, [r0], #2
 800040a:	e77b      	b.n	8000304 <memcpy+0xc>
 800040c:	3a04      	subs	r2, #4
 800040e:	d3d9      	bcc.n	80003c4 <memcpy+0xcc>
 8000410:	3a01      	subs	r2, #1
 8000412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000416:	f800 3b01 	strb.w	r3, [r0], #1
 800041a:	d2f9      	bcs.n	8000410 <memcpy+0x118>
 800041c:	780b      	ldrb	r3, [r1, #0]
 800041e:	7003      	strb	r3, [r0, #0]
 8000420:	784b      	ldrb	r3, [r1, #1]
 8000422:	7043      	strb	r3, [r0, #1]
 8000424:	788b      	ldrb	r3, [r1, #2]
 8000426:	7083      	strb	r3, [r0, #2]
 8000428:	4660      	mov	r0, ip
 800042a:	4770      	bx	lr
 800042c:	0000      	movs	r0, r0
	...

08000430 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify)
 8000430:	b4f0      	push	{r4, r5, r6, r7}
{

  sdp->vmt = &vmt;
 8000432:	4603      	mov	r3, r0
 8000434:	4a12      	ldr	r2, [pc, #72]	; (8000480 <sdObjectInit.constprop.0+0x50>)
 8000436:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800043a:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800043c:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800043e:	2710      	movs	r7, #16
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000440:	f100 0674 	add.w	r6, r0, #116	; 0x74
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000444:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000448:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 800044a:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;   // q_top is pointer which points to frst location after buffer, so bp(which is address pointer to
 800044c:	f100 0364 	add.w	r3, r0, #100	; 0x64
  sdp->state = SD_STOP;
 8000450:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000452:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000456:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 800045a:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 800045c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8000460:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8000462:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8000464:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8000466:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 800046a:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 800046c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8000470:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8000474:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8000476:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;// q_buffer will always store the pointer to buffer which will store input data
 8000478:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;   // q_top is pointer which points to frst location after buffer, so bp(which is address pointer to
 800047a:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 800047c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800047e:	4770      	bx	lr
 8000480:	080027f8 	.word	0x080027f8
	...

08000490 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000490:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8000492:	4c26      	ldr	r4, [pc, #152]	; (800052c <dmaStreamAllocI.part.0.constprop.0+0x9c>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000494:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 8000496:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000498:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 800049a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 800049c:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 800049e:	bf18      	it	ne
 80004a0:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 80004a2:	d001      	beq.n	80004a8 <dmaStreamAllocI.part.0.constprop.0+0x18>
}
 80004a4:	bcf0      	pop	{r4, r5, r6, r7}
 80004a6:	4770      	bx	lr
        rccEnableDMA1(true);
 80004a8:	4d21      	ldr	r5, [pc, #132]	; (8000530 <dmaStreamAllocI.part.0.constprop.0+0xa0>)
      dma.allocated_mask  |= mask;
 80004aa:	4302      	orrs	r2, r0
 80004ac:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 80004ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
      dma.streams[i].param = param;
 80004b0:	4820      	ldr	r0, [pc, #128]	; (8000534 <dmaStreamAllocI.part.0.constprop.0+0xa4>)
        rccEnableDMA1(true);
 80004b2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dma.streams[i].func  = func;
 80004b6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
      dma.streams[i].param = param;
 80004ba:	e9c4 1001 	strd	r1, r0, [r4, #4]
        rccEnableDMA1(true);
 80004be:	632a      	str	r2, [r5, #48]	; 0x30
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004c0:	200c      	movs	r0, #12
        rccEnableDMA1(true);
 80004c2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004c4:	491c      	ldr	r1, [pc, #112]	; (8000538 <dmaStreamAllocI.part.0.constprop.0+0xa8>)
 80004c6:	fb00 f003 	mul.w	r0, r0, r3
        rccEnableDMA1(true);
 80004ca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dmaStreamDisable(dmastp);
 80004ce:	580e      	ldr	r6, [r1, r0]
        rccEnableDMA1(true);
 80004d0:	652a      	str	r2, [r5, #80]	; 0x50
 80004d2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80004d4:	6832      	ldr	r2, [r6, #0]
 80004d6:	f022 021f 	bic.w	r2, r2, #31
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004da:	4408      	add	r0, r1
      dmaStreamDisable(dmastp);
 80004dc:	6032      	str	r2, [r6, #0]
 80004de:	6832      	ldr	r2, [r6, #0]
 80004e0:	f012 0201 	ands.w	r2, r2, #1
 80004e4:	d1fb      	bne.n	80004de <dmaStreamAllocI.part.0.constprop.0+0x4e>
 80004e6:	240c      	movs	r4, #12
 80004e8:	fb04 1303 	mla	r3, r4, r3, r1
 80004ec:	243d      	movs	r4, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 80004ee:	7ad9      	ldrb	r1, [r3, #11]
      dmaStreamDisable(dmastp);
 80004f0:	7a5d      	ldrb	r5, [r3, #9]
 80004f2:	685f      	ldr	r7, [r3, #4]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80004f4:	094b      	lsrs	r3, r1, #5
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	40ac      	lsls	r4, r5
 80004fa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80004fe:	f101 4560 	add.w	r5, r1, #3758096384	; 0xe0000000
 8000502:	603c      	str	r4, [r7, #0]
 8000504:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000508:	2401      	movs	r4, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800050a:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800050e:	f001 011f 	and.w	r1, r1, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8000512:	6032      	str	r2, [r6, #0]
 8000514:	fa04 f101 	lsl.w	r1, r4, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000518:	2250      	movs	r2, #80	; 0x50
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800051a:	2421      	movs	r4, #33	; 0x21
 800051c:	6174      	str	r4, [r6, #20]
 800051e:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000522:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000526:	6019      	str	r1, [r3, #0]
 8000528:	e7bc      	b.n	80004a4 <dmaStreamAllocI.part.0.constprop.0+0x14>
 800052a:	bf00      	nop
 800052c:	20000ba4 	.word	0x20000ba4
 8000530:	40023800 	.word	0x40023800
 8000534:	20000808 	.word	0x20000808
 8000538:	08002694 	.word	0x08002694
 800053c:	00000000 	.word	0x00000000

08000540 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000540:	4a02      	ldr	r2, [pc, #8]	; (800054c <notify2+0xc>)
 8000542:	68d3      	ldr	r3, [r2, #12]
 8000544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000548:	60d3      	str	r3, [r2, #12]
}
 800054a:	4770      	bx	lr
 800054c:	40004400 	.word	0x40004400

08000550 <notify4>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000550:	4a02      	ldr	r2, [pc, #8]	; (800055c <notify4+0xc>)
 8000552:	68d3      	ldr	r3, [r2, #12]
 8000554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000558:	60d3      	str	r3, [r2, #12]
}
 800055a:	4770      	bx	lr
 800055c:	40004c00 	.word	0x40004c00

08000560 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000560:	2320      	movs	r3, #32
 8000562:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <_port_irq_epilogue+0x3c>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800056e:	d102      	bne.n	8000576 <_port_irq_epilogue+0x16>
 8000570:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000574:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000576:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 800057a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800057c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000580:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000582:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <_port_irq_epilogue+0x40>)
 8000588:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800058a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800058c:	6889      	ldr	r1, [r1, #8]
 800058e:	6892      	ldr	r2, [r2, #8]
 8000590:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000592:	bf8c      	ite	hi
 8000594:	4a03      	ldrhi	r2, [pc, #12]	; (80005a4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000596:	4a04      	ldrls	r2, [pc, #16]	; (80005a8 <_port_irq_epilogue+0x48>)
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	20000970 	.word	0x20000970
 80005a4:	080002e7 	.word	0x080002e7
 80005a8:	080002f2 	.word	0x080002f2
 80005ac:	00000000 	.word	0x00000000

080005b0 <chCoreAllocAlignedI>:
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80005b2:	b410      	push	{r4}
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80005b4:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80005b8:	4249      	negs	r1, r1
 80005ba:	1a20      	subs	r0, r4, r0
 80005bc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80005be:	4298      	cmp	r0, r3
 80005c0:	d304      	bcc.n	80005cc <chCoreAllocAlignedI+0x1c>
 80005c2:	4284      	cmp	r4, r0
 80005c4:	d302      	bcc.n	80005cc <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80005c6:	bc10      	pop	{r4}
    return NULL;
  }

  ch_memcore.topmem = prev;
 80005c8:	6050      	str	r0, [r2, #4]
 80005ca:	4770      	bx	lr
    return NULL;
 80005cc:	2000      	movs	r0, #0
 80005ce:	bc10      	pop	{r4}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000b80 	.word	0x20000b80
	...

080005e0 <_stats_increase_irq>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80005e0:	2320      	movs	r3, #32
 80005e2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <_stats_increase_irq+0x1c>)
 80005e8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80005ec:	3301      	adds	r3, #1
 80005ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80005f2:	2300      	movs	r3, #0
 80005f4:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000970 	.word	0x20000970

08000600 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <chTMChainMeasurementToX+0x38>)
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000602:	6842      	ldr	r2, [r0, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8000606:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8000608:	608b      	str	r3, [r1, #8]
  tmp->n++;
 800060a:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800060e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000612:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000614:	18e4      	adds	r4, r4, r3
 8000616:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800061a:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 800061c:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 800061e:	bf88      	it	hi
 8000620:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000622:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000624:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000626:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800062a:	e9c0 3102 	strd	r3, r1, [r0, #8]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 800062e:	bc70      	pop	{r4, r5, r6}
    tmp->best = tmp->last;
 8000630:	bf38      	it	cc
 8000632:	6003      	strcc	r3, [r0, #0]
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e0001000 	.word	0xe0001000
 800063c:	00000000 	.word	0x00000000

08000640 <chTMStopMeasurementX>:
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <chTMStopMeasurementX+0x3c>)
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <chTMStopMeasurementX+0x40>)
 8000644:	6852      	ldr	r2, [r2, #4]
 8000646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  tmp->last = (now - tmp->last) - offset;
 800064a:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800064c:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800064e:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000650:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000654:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000656:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000658:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 800065a:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800065c:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800065e:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000660:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000662:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000664:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000668:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 800066a:	bf88      	it	hi
 800066c:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800066e:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000670:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000674:	bf38      	it	cc
 8000676:	6003      	strcc	r3, [r0, #0]
}
 8000678:	bc30      	pop	{r4, r5}
 800067a:	4770      	bx	lr
 800067c:	e0001000 	.word	0xe0001000
 8000680:	20000970 	.word	0x20000970
	...

08000690 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000690:	4801      	ldr	r0, [pc, #4]	; (8000698 <_stats_stop_measure_crit_isr+0x8>)
 8000692:	f7ff bfd5 	b.w	8000640 <chTMStopMeasurementX>
 8000696:	bf00      	nop
 8000698:	20000a28 	.word	0x20000a28
 800069c:	00000000 	.word	0x00000000

080006a0 <chTMStartMeasurementX>:
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <chTMStartMeasurementX+0x8>)
 80006a2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80006a4:	6083      	str	r3, [r0, #8]
}
 80006a6:	4770      	bx	lr
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	00000000 	.word	0x00000000

080006b0 <_stats_start_measure_crit_isr>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 80006b0:	4801      	ldr	r0, [pc, #4]	; (80006b8 <_stats_start_measure_crit_isr+0x8>)
 80006b2:	f7ff bff5 	b.w	80006a0 <chTMStartMeasurementX>
 80006b6:	bf00      	nop
 80006b8:	20000a28 	.word	0x20000a28
 80006bc:	00000000 	.word	0x00000000

080006c0 <wakeup>:
static void wakeup(void *p) {
 80006c0:	b510      	push	{r4, lr}
 80006c2:	4601      	mov	r1, r0
 80006c4:	2320      	movs	r3, #32
 80006c6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 80006ca:	f7ff fff1 	bl	80006b0 <_stats_start_measure_crit_isr>
  switch (tp->state) {
 80006ce:	f891 3020 	ldrb.w	r3, [r1, #32]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	d80d      	bhi.n	80006f2 <wakeup+0x32>
 80006d6:	e8df f003 	tbb	[pc, r3]
 80006da:	0c1d      	.short	0x0c1d
 80006dc:	0408230c 	.word	0x0408230c
 80006e0:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 80006e2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80006e4:	6893      	ldr	r3, [r2, #8]
 80006e6:	3301      	adds	r3, #1
 80006e8:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80006ea:	e9d1 3200 	ldrd	r3, r2, [r1]
 80006ee:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80006f0:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 80006f2:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 80006f6:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80006f8:	6888      	ldr	r0, [r1, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80006fc:	624c      	str	r4, [r1, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80006fe:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8000702:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	4282      	cmp	r2, r0
 8000708:	d2fb      	bcs.n	8000702 <wakeup+0x42>
  tp->queue.prev             = cp->queue.prev;
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8000710:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8000712:	6059      	str	r1, [r3, #4]
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
 8000714:	f7ff ffbc 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000718:	2300      	movs	r3, #0
 800071a:	f383 8811 	msr	BASEPRI, r3
}
 800071e:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 8000720:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
    break;
 8000726:	e7e4      	b.n	80006f2 <wakeup+0x32>
 8000728:	20000970 	.word	0x20000970
 800072c:	00000000 	.word	0x00000000

08000730 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000730:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000732:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8000736:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800073a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	428a      	cmp	r2, r1
 8000740:	d2fb      	bcs.n	800073a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000748:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800074a:	6058      	str	r0, [r3, #4]
}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000970 	.word	0x20000970
	...

08000760 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000762:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000764:	42a0      	cmp	r0, r4
 8000766:	d021      	beq.n	80007ac <chEvtBroadcastFlagsI+0x4c>
 8000768:	4607      	mov	r7, r0
 800076a:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800076c:	2600      	movs	r6, #0
 800076e:	e004      	b.n	800077a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000770:	2a0b      	cmp	r2, #11
 8000772:	d01c      	beq.n	80007ae <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8000774:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000776:	42a7      	cmp	r7, r4
 8000778:	d018      	beq.n	80007ac <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 800077a:	68e3      	ldr	r3, [r4, #12]
 800077c:	432b      	orrs	r3, r5
 800077e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000780:	b115      	cbz	r5, 8000788 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000782:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000784:	421d      	tst	r5, r3
 8000786:	d0f5      	beq.n	8000774 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8000788:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800078c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800078e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000792:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000794:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000796:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000798:	d1ea      	bne.n	8000770 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800079a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800079c:	4213      	tst	r3, r2
 800079e:	d0e9      	beq.n	8000774 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 80007a0:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80007a2:	f7ff ffc5 	bl	8000730 <chSchReadyI>
    elp = elp->next;
 80007a6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80007a8:	42a7      	cmp	r7, r4
 80007aa:	d1e6      	bne.n	800077a <chEvtBroadcastFlagsI+0x1a>
}
 80007ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80007ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80007b0:	ea32 0303 	bics.w	r3, r2, r3
 80007b4:	d1de      	bne.n	8000774 <chEvtBroadcastFlagsI+0x14>
 80007b6:	e7f3      	b.n	80007a0 <chEvtBroadcastFlagsI+0x40>
	...

080007c0 <_idle_thread>:
}
 80007c0:	e7fe      	b.n	80007c0 <_idle_thread>
 80007c2:	bf00      	nop
	...

080007d0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80007d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 80007d4:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80007d6:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80007da:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80007dc:	05da      	lsls	r2, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 80007de:	4604      	mov	r4, r0
  uint16_t sr = u->SR;
 80007e0:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80007e2:	d479      	bmi.n	80008d8 <serve_interrupt+0x108>
 80007e4:	2320      	movs	r3, #32
 80007e6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80007ea:	f7ff ff61 	bl	80006b0 <_stats_start_measure_crit_isr>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80007ee:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80007f2:	d04f      	beq.n	8000894 <serve_interrupt+0xc4>
  chnAddFlagsI(sdp, sts);
 80007f4:	1d27      	adds	r7, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80007f6:	f104 080c 	add.w	r8, r4, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80007fa:	f04f 0a00 	mov.w	sl, #0
 80007fe:	e008      	b.n	8000812 <serve_interrupt+0x42>
    if (sr & USART_SR_RXNE)
 8000800:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000802:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000806:	d41e      	bmi.n	8000846 <serve_interrupt+0x76>
    sr = u->SR;
 8000808:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800080a:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800080e:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000810:	d040      	beq.n	8000894 <serve_interrupt+0xc4>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000812:	072b      	lsls	r3, r5, #28
 8000814:	d0f4      	beq.n	8000800 <serve_interrupt+0x30>
    sts |= SD_OVERRUN_ERROR;
 8000816:	f015 0f08 	tst.w	r5, #8
 800081a:	bf0c      	ite	eq
 800081c:	2100      	moveq	r1, #0
 800081e:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000820:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8000822:	bf48      	it	mi
 8000824:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000828:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 800082a:	bf48      	it	mi
 800082c:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000830:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 8000832:	bf48      	it	mi
 8000834:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000838:	4638      	mov	r0, r7
 800083a:	f7ff ff91 	bl	8000760 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800083e:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000840:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000844:	d5e0      	bpl.n	8000808 <serve_interrupt+0x38>
  if (iqIsEmptyI(&sdp->iqueue))
 8000846:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000848:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800084c:	b39b      	cbz	r3, 80008b6 <serve_interrupt+0xe6>
  if (!iqIsFullI(iqp)) {
 800084e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000852:	4293      	cmp	r3, r2
 8000854:	d037      	beq.n	80008c6 <serve_interrupt+0xf6>
    iqp->q_counter++;
 8000856:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8000858:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800085a:	3201      	adds	r2, #1
 800085c:	ea05 0b0b 	and.w	fp, r5, fp
 8000860:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8000862:	6221      	str	r1, [r4, #32]
 8000864:	f883 b000 	strb.w	fp, [r3]
    if (iqp->q_wrptr >= iqp->q_top) // if buffer has become full.
 8000868:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800086c:	429a      	cmp	r2, r3
 800086e:	d301      	bcc.n	8000874 <serve_interrupt+0xa4>
      iqp->q_wrptr = iqp->q_buffer;
 8000870:	69a3      	ldr	r3, [r4, #24]
 8000872:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000874:	68e0      	ldr	r0, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000876:	4580      	cmp	r8, r0
 8000878:	d0c6      	beq.n	8000808 <serve_interrupt+0x38>
  tqp->next             = tp->queue.next;
 800087a:	6803      	ldr	r3, [r0, #0]
 800087c:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 800087e:	f8c3 8004 	str.w	r8, [r3, #4]
 8000882:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000886:	f7ff ff53 	bl	8000730 <chSchReadyI>
    sr = u->SR;
 800088a:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800088c:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8000890:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000892:	d1be      	bne.n	8000812 <serve_interrupt+0x42>
  _stats_stop_measure_crit_isr();
 8000894:	f7ff fefc 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000898:	2300      	movs	r3, #0
 800089a:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800089e:	f019 0f80 	tst.w	r9, #128	; 0x80
 80008a2:	d001      	beq.n	80008a8 <serve_interrupt+0xd8>
 80008a4:	062a      	lsls	r2, r5, #24
 80008a6:	d43a      	bmi.n	800091e <serve_interrupt+0x14e>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80008a8:	f019 0f40 	tst.w	r9, #64	; 0x40
 80008ac:	d001      	beq.n	80008b2 <serve_interrupt+0xe2>
 80008ae:	066b      	lsls	r3, r5, #25
 80008b0:	d425      	bmi.n	80008fe <serve_interrupt+0x12e>
}
 80008b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008b6:	2104      	movs	r1, #4
 80008b8:	4638      	mov	r0, r7
 80008ba:	f7ff ff51 	bl	8000760 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80008be:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d1c7      	bne.n	8000856 <serve_interrupt+0x86>
 80008c6:	6962      	ldr	r2, [r4, #20]
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d0c4      	beq.n	8000856 <serve_interrupt+0x86>
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	4638      	mov	r0, r7
 80008d2:	f7ff ff45 	bl	8000760 <chEvtBroadcastFlagsI>
 80008d6:	e797      	b.n	8000808 <serve_interrupt+0x38>
 80008d8:	2320      	movs	r3, #32
 80008da:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 80008de:	f7ff fee7 	bl	80006b0 <_stats_start_measure_crit_isr>
 80008e2:	1d20      	adds	r0, r4, #4
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	f7ff ff3a 	bl	8000760 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80008ec:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80008f0:	6033      	str	r3, [r6, #0]
  _stats_stop_measure_crit_isr();
 80008f2:	f7ff fecd 	bl	8000690 <_stats_stop_measure_crit_isr>
 80008f6:	2300      	movs	r3, #0
 80008f8:	f383 8811 	msr	BASEPRI, r3
 80008fc:	e772      	b.n	80007e4 <serve_interrupt+0x14>
 80008fe:	2320      	movs	r3, #32
 8000900:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000904:	f7ff fed4 	bl	80006b0 <_stats_start_measure_crit_isr>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000908:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800090c:	429a      	cmp	r2, r3
 800090e:	d02f      	beq.n	8000970 <serve_interrupt+0x1a0>
  _stats_stop_measure_crit_isr();
 8000910:	f7ff febe 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000914:	2300      	movs	r3, #0
 8000916:	f383 8811 	msr	BASEPRI, r3
}
 800091a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800091e:	2320      	movs	r3, #32
 8000920:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000924:	f7ff fec4 	bl	80006b0 <_stats_start_measure_crit_isr>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000928:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800092c:	429a      	cmp	r2, r3
    b = oqGetI(&sdp->oqueue);
 800092e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000932:	d02a      	beq.n	800098a <serve_interrupt+0x1ba>
    uint8_t b;

    oqp->q_counter++;
 8000934:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8000936:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8000938:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800093a:	3201      	adds	r2, #1
 800093c:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800093e:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8000940:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8000942:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000946:	d301      	bcc.n	800094c <serve_interrupt+0x17c>
      oqp->q_rdptr = oqp->q_buffer;
 8000948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800094a:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 800094c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800094e:	4287      	cmp	r7, r0
 8000950:	d006      	beq.n	8000960 <serve_interrupt+0x190>
  tqp->next             = tp->queue.next;
 8000952:	6803      	ldr	r3, [r0, #0]
 8000954:	6323      	str	r3, [r4, #48]	; 0x30
  tp->u.rdymsg = msg;
 8000956:	2200      	movs	r2, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000958:	605f      	str	r7, [r3, #4]
 800095a:	6242      	str	r2, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800095c:	f7ff fee8 	bl	8000730 <chSchReadyI>
      u->DR = b;
 8000960:	f8c6 8004 	str.w	r8, [r6, #4]
  _stats_stop_measure_crit_isr();
 8000964:	f7ff fe94 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000968:	2300      	movs	r3, #0
 800096a:	f383 8811 	msr	BASEPRI, r3
 800096e:	e79b      	b.n	80008a8 <serve_interrupt+0xd8>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0cc      	beq.n	8000910 <serve_interrupt+0x140>
 8000976:	1d20      	adds	r0, r4, #4
 8000978:	2110      	movs	r1, #16
 800097a:	f7ff fef1 	bl	8000760 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800097e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000982:	ea09 0303 	and.w	r3, r9, r3
 8000986:	60f3      	str	r3, [r6, #12]
 8000988:	e7c2      	b.n	8000910 <serve_interrupt+0x140>
  if (!oqIsEmptyI(oqp)) {
 800098a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800098c:	2a00      	cmp	r2, #0
 800098e:	d0d1      	beq.n	8000934 <serve_interrupt+0x164>
 8000990:	2108      	movs	r1, #8
 8000992:	1d20      	adds	r0, r4, #4
 8000994:	f7ff fee4 	bl	8000760 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8000998:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800099c:	ea09 0303 	and.w	r3, r9, r3
 80009a0:	60f3      	str	r3, [r6, #12]
 80009a2:	e7df      	b.n	8000964 <serve_interrupt+0x194>
	...

080009b0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80009b0:	f011 0f0c 	tst.w	r1, #12
 80009b4:	d115      	bne.n	80009e2 <i2c_lld_serve_tx_end_irq+0x32>
  I2C_TypeDef *dp = i2cp->i2c;
 80009b6:	e9d0 100c 	ldrd	r1, r0, [r0, #48]	; 0x30
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 80009ba:	680a      	ldr	r2, [r1, #0]
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f023 031f 	bic.w	r3, r3, #31
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80009c2:	b410      	push	{r4}
  dmaStreamDisable(i2cp->dmatx);
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	07db      	lsls	r3, r3, #31
 80009ca:	d4fc      	bmi.n	80009c6 <i2c_lld_serve_tx_end_irq+0x16>
 80009cc:	7a4c      	ldrb	r4, [r1, #9]
 80009ce:	684a      	ldr	r2, [r1, #4]
 80009d0:	233d      	movs	r3, #61	; 0x3d
 80009d2:	40a3      	lsls	r3, r4
 80009d4:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80009d6:	6843      	ldr	r3, [r0, #4]
}
 80009d8:	bc10      	pop	{r4}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6043      	str	r3, [r0, #4]
}
 80009e0:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 80009e2:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80009e4:	4b01      	ldr	r3, [pc, #4]	; (80009ec <i2c_lld_serve_tx_end_irq+0x3c>)
 80009e6:	4a02      	ldr	r2, [pc, #8]	; (80009f0 <i2c_lld_serve_tx_end_irq+0x40>)
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ea:	e7fe      	b.n	80009ea <i2c_lld_serve_tx_end_irq+0x3a>
 80009ec:	20000970 	.word	0x20000970
 80009f0:	08002614 	.word	0x08002614
	...

08000a00 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000a00:	f011 0f0c 	tst.w	r1, #12
 8000a04:	d12e      	bne.n	8000a64 <i2c_lld_serve_rx_end_irq+0x64>
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000a06:	b570      	push	{r4, r5, r6, lr}
  dmaStreamDisable(i2cp->dmarx);
 8000a08:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a0a:	6829      	ldr	r1, [r5, #0]
 8000a0c:	680b      	ldr	r3, [r1, #0]
 8000a0e:	f023 031f 	bic.w	r3, r3, #31
 8000a12:	4604      	mov	r4, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8000a14:	6b40      	ldr	r0, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 8000a16:	600b      	str	r3, [r1, #0]
 8000a18:	680a      	ldr	r2, [r1, #0]
 8000a1a:	f012 0201 	ands.w	r2, r2, #1
 8000a1e:	d1fb      	bne.n	8000a18 <i2c_lld_serve_rx_end_irq+0x18>
 8000a20:	7a6e      	ldrb	r6, [r5, #9]
 8000a22:	6869      	ldr	r1, [r5, #4]
 8000a24:	233d      	movs	r3, #61	; 0x3d
 8000a26:	40b3      	lsls	r3, r6
 8000a28:	600b      	str	r3, [r1, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 8000a2a:	6843      	ldr	r3, [r0, #4]
 8000a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a30:	6043      	str	r3, [r0, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8000a32:	6803      	ldr	r3, [r0, #0]
 8000a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a38:	6003      	str	r3, [r0, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8000a3a:	6803      	ldr	r3, [r0, #0]
 8000a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a40:	6003      	str	r3, [r0, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000a42:	2320      	movs	r3, #32
 8000a44:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000a48:	f7ff fe32 	bl	80006b0 <_stats_start_measure_crit_isr>
  if (*trp != NULL) {
 8000a4c:	69e0      	ldr	r0, [r4, #28]
 8000a4e:	b118      	cbz	r0, 8000a58 <i2c_lld_serve_rx_end_irq+0x58>
    *trp = NULL;
 8000a50:	61e2      	str	r2, [r4, #28]
    tp->u.rdymsg = msg;
 8000a52:	6242      	str	r2, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000a54:	f7ff fe6c 	bl	8000730 <chSchReadyI>
  _stats_stop_measure_crit_isr();
 8000a58:	f7ff fe1a 	bl	8000690 <_stats_stop_measure_crit_isr>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f383 8811 	msr	BASEPRI, r3
}
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
 8000a66:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <i2c_lld_serve_rx_end_irq+0x70>)
 8000a68:	4a02      	ldr	r2, [pc, #8]	; (8000a74 <i2c_lld_serve_rx_end_irq+0x74>)
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a6c:	e7fe      	b.n	8000a6c <i2c_lld_serve_rx_end_irq+0x6c>
 8000a6e:	bf00      	nop
 8000a70:	20000970 	.word	0x20000970
 8000a74:	08002614 	.word	0x08002614
	...

08000a80 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000a80:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 8000a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000a88:	4666      	mov	r6, ip
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000a8a:	f3c2 05c1 	ubfx	r5, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000a8e:	09d7      	lsrs	r7, r2, #7
  uint32_t bit     = 0;
 8000a90:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000a92:	f04f 090f 	mov.w	r9, #15
      m1 = 1 << bit;
 8000a96:	f04f 0801 	mov.w	r8, #1
      m2 = 3 << (bit * 2);
 8000a9a:	f04f 0e03 	mov.w	lr, #3
 8000a9e:	e012      	b.n	8000ac6 <_pal_lld_setgroupmode+0x46>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000aa0:	f8d0 b000 	ldr.w	fp, [r0]
 8000aa4:	ea03 030b 	and.w	r3, r3, fp
 8000aa8:	4333      	orrs	r3, r6
        if (bit < 8)
 8000aaa:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000aac:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000aae:	d83d      	bhi.n	8000b2c <_pal_lld_setgroupmode+0xac>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000ab0:	6a03      	ldr	r3, [r0, #32]
 8000ab2:	ea23 0202 	bic.w	r2, r3, r2
 8000ab6:	ea42 020a 	orr.w	r2, r2, sl
 8000aba:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000abc:	0849      	lsrs	r1, r1, #1
 8000abe:	d033      	beq.n	8000b28 <_pal_lld_setgroupmode+0xa8>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
 8000ac0:	00ad      	lsls	r5, r5, #2
    pupdr <<= 2;
    moder <<= 2;
 8000ac2:	00b6      	lsls	r6, r6, #2
    bit++;
 8000ac4:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 8000ac6:	07cb      	lsls	r3, r1, #31
 8000ac8:	d5f8      	bpl.n	8000abc <_pal_lld_setgroupmode+0x3c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000aca:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000acc:	fa08 f204 	lsl.w	r2, r8, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000ad0:	ea23 0302 	bic.w	r3, r3, r2
 8000ad4:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000ad6:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 8000ad8:	0063      	lsls	r3, r4, #1
 8000ada:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000ade:	ea22 0203 	bic.w	r2, r2, r3
 8000ae2:	432a      	orrs	r2, r5
 8000ae4:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000ae6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000aea:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000aee:	ea2a 0a03 	bic.w	sl, sl, r3
      altrmask = altr << ((bit & 7) * 4);
 8000af2:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000af4:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000af8:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000afc:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000b00:	fa07 fa02 	lsl.w	sl, r7, r2
      m4 = 15 << ((bit & 7) * 4);
 8000b04:	fa09 f202 	lsl.w	r2, r9, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000b08:	d1ca      	bne.n	8000aa0 <_pal_lld_setgroupmode+0x20>
        if (bit < 8)
 8000b0a:	2c07      	cmp	r4, #7
 8000b0c:	d815      	bhi.n	8000b3a <_pal_lld_setgroupmode+0xba>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000b0e:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8000b12:	ea2b 0202 	bic.w	r2, fp, r2
 8000b16:	ea42 020a 	orr.w	r2, r2, sl
 8000b1a:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000b1c:	6802      	ldr	r2, [r0, #0]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	4333      	orrs	r3, r6
    if (!mask)
 8000b22:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000b24:	6003      	str	r3, [r0, #0]
    if (!mask)
 8000b26:	d1cb      	bne.n	8000ac0 <_pal_lld_setgroupmode+0x40>
  }
}
 8000b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000b2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b2e:	ea23 0202 	bic.w	r2, r3, r2
 8000b32:	ea42 020a 	orr.w	r2, r2, sl
 8000b36:	6242      	str	r2, [r0, #36]	; 0x24
 8000b38:	e7c0      	b.n	8000abc <_pal_lld_setgroupmode+0x3c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000b3a:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8000b3e:	ea2b 0202 	bic.w	r2, fp, r2
 8000b42:	ea42 020a 	orr.w	r2, r2, sl
 8000b46:	6242      	str	r2, [r0, #36]	; 0x24
 8000b48:	e7e8      	b.n	8000b1c <_pal_lld_setgroupmode+0x9c>
 8000b4a:	bf00      	nop
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b50:	4a34      	ldr	r2, [pc, #208]	; (8000c24 <stm32_clock_init+0xd4>)
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <stm32_clock_init+0xd8>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000b5c:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8000b5e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000b60:	6813      	ldr	r3, [r2, #0]
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	0799      	lsls	r1, r3, #30
 8000b6c:	d5fc      	bpl.n	8000b68 <stm32_clock_init+0x18>
  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
 // RCC->CFGR |= RCC_CFGR_SW_HSE;//HSE selected
//  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8000b6e:	6893      	ldr	r3, [r2, #8]
 while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8000b70:	492c      	ldr	r1, [pc, #176]	; (8000c24 <stm32_clock_init+0xd4>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8000b72:	f023 0303 	bic.w	r3, r3, #3
 8000b76:	6093      	str	r3, [r2, #8]
 while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8000b78:	688b      	ldr	r3, [r1, #8]
 8000b7a:	f013 030c 	ands.w	r3, r3, #12
 8000b7e:	d1fb      	bne.n	8000b78 <stm32_clock_init+0x28>
                                      /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000b80:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000b82:	4828      	ldr	r0, [pc, #160]	; (8000c24 <stm32_clock_init+0xd4>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000b84:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 8000b88:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000b8a:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8000b8c:	680b      	ldr	r3, [r1, #0]
 8000b8e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000b92:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000b94:	6803      	ldr	r3, [r0, #0]
 8000b96:	039b      	lsls	r3, r3, #14
 8000b98:	d5fc      	bpl.n	8000b94 <stm32_clock_init+0x44>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000b9a:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000b9c:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <stm32_clock_init+0xd4>)
  RCC->CSR |= RCC_CSR_LSION;
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000ba4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000ba6:	0799      	lsls	r1, r3, #30
 8000ba8:	d5fc      	bpl.n	8000ba4 <stm32_clock_init+0x54>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <stm32_clock_init+0xdc>)
 8000bac:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000bae:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000bb0:	491d      	ldr	r1, [pc, #116]	; (8000c28 <stm32_clock_init+0xd8>)
  RCC->CR |= RCC_CR_PLLON;
 8000bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bb6:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000bb8:	684b      	ldr	r3, [r1, #4]
 8000bba:	045a      	lsls	r2, r3, #17
 8000bbc:	d5fc      	bpl.n	8000bb8 <stm32_clock_init+0x68>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000bbe:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <stm32_clock_init+0xd4>)
 8000bc0:	6813      	ldr	r3, [r2, #0]
 8000bc2:	019b      	lsls	r3, r3, #6
 8000bc4:	d5fc      	bpl.n	8000bc0 <stm32_clock_init+0x70>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <stm32_clock_init+0xe0>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000bc8:	491a      	ldr	r1, [pc, #104]	; (8000c34 <stm32_clock_init+0xe4>)
 8000bca:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <stm32_clock_init+0xe8>)
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d01d      	beq.n	8000c10 <stm32_clock_init+0xc0>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <stm32_clock_init+0xec>)
 8000bd6:	f240 7201 	movw	r2, #1793	; 0x701
 8000bda:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <stm32_clock_init+0xec>)
 8000bde:	6813      	ldr	r3, [r2, #0]
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d1fa      	bne.n	8000bde <stm32_clock_init+0x8e>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <stm32_clock_init+0xd4>)
 8000bea:	6893      	ldr	r3, [r2, #8]
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000bf2:	6893      	ldr	r3, [r2, #8]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d1fa      	bne.n	8000bf2 <stm32_clock_init+0xa2>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8000bfc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6453      	str	r3, [r2, #68]	; 0x44
 8000c04:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0a:	6653      	str	r3, [r2, #100]	; 0x64
 8000c0c:	6e53      	ldr	r3, [r2, #100]	; 0x64
}
 8000c0e:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000c10:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <stm32_clock_init+0xf0>)
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <stm32_clock_init+0xf4>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d1dc      	bne.n	8000bd4 <stm32_clock_init+0x84>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <stm32_clock_init+0xec>)
 8000c1c:	f240 1201 	movw	r2, #257	; 0x101
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	e7db      	b.n	8000bdc <stm32_clock_init+0x8c>
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000
 8000c2c:	07412008 	.word	0x07412008
 8000c30:	e0042000 	.word	0xe0042000
 8000c34:	38880000 	.word	0x38880000
 8000c38:	20006411 	.word	0x20006411
 8000c3c:	40023c00 	.word	0x40023c00
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	410fc241 	.word	0x410fc241
	...

08000c50 <_ctl>:
}
 8000c50:	2000      	movs	r0, #0
 8000c52:	4770      	bx	lr
	...

08000c60 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000c60:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000c62:	4c0e      	ldr	r4, [pc, #56]	; (8000c9c <chSchGoSleepS+0x3c>)
 8000c64:	69a5      	ldr	r5, [r4, #24]
  thread_t *tp = tqp->next;
 8000c66:	6821      	ldr	r1, [r4, #0]
  otp->state = newstate;
 8000c68:	f885 0020 	strb.w	r0, [r5, #32]
  tqp->next             = tp->queue.next;
 8000c6c:	680b      	ldr	r3, [r1, #0]
 8000c6e:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8000c70:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000c72:	605c      	str	r4, [r3, #4]
 8000c74:	f881 2020 	strb.w	r2, [r1, #32]
  ch.kernel_stats.n_ctxswc++;
 8000c78:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000c7c:	61a1      	str	r1, [r4, #24]
 8000c7e:	4413      	add	r3, r2
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000c80:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8000c84:	3148      	adds	r1, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 8000c86:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000c8a:	f7ff fcb9 	bl	8000600 <chTMChainMeasurementToX>
  chSysSwitch(currp, otp);
 8000c8e:	69a0      	ldr	r0, [r4, #24]
 8000c90:	4629      	mov	r1, r5
}
 8000c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8000c96:	f7ff bb13 	b.w	80002c0 <_port_switch>
 8000c9a:	bf00      	nop
 8000c9c:	20000970 	.word	0x20000970

08000ca0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8000ca2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000ca4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8000ca6:	d049      	beq.n	8000d3c <chSchGoSleepTimeoutS+0x9c>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000ca8:	4c3f      	ldr	r4, [pc, #252]	; (8000da8 <chSchGoSleepTimeoutS+0x108>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8000caa:	4f40      	ldr	r7, [pc, #256]	; (8000dac <chSchGoSleepTimeoutS+0x10c>)
  vtp->par = par;
 8000cac:	69a3      	ldr	r3, [r4, #24]
 8000cae:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000cb0:	4626      	mov	r6, r4
 8000cb2:	2902      	cmp	r1, #2
 8000cb4:	f856 3f1c 	ldr.w	r3, [r6, #28]!
 8000cb8:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000cba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cbe:	bf38      	it	cc
 8000cc0:	2102      	movcc	r1, #2
 8000cc2:	42b3      	cmp	r3, r6
 8000cc4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8000cc6:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000cc8:	d05b      	beq.n	8000d82 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8000cca:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000ccc:	1bd2      	subs	r2, r2, r7
 8000cce:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000cd0:	d32e      	bcc.n	8000d30 <chSchGoSleepTimeoutS+0x90>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000cd2:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8000cd8:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000cda:	4291      	cmp	r1, r2
 8000cdc:	d904      	bls.n	8000ce8 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8000cde:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8000ce0:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	d3fa      	bcc.n	8000cde <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8000cec:	af01      	add	r7, sp, #4
  vtp->next = p;
 8000cee:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8000cf0:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8000cf2:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8000cf4:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000cfa:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 8000cfe:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000d00:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000d02:	4628      	mov	r0, r5
 8000d04:	f7ff ffac 	bl	8000c60 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000d08:	9b04      	ldr	r3, [sp, #16]
 8000d0a:	b16b      	cbz	r3, 8000d28 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000d0c:	69e3      	ldr	r3, [r4, #28]
 8000d0e:	42bb      	cmp	r3, r7
 8000d10:	d01b      	beq.n	8000d4a <chSchGoSleepTimeoutS+0xaa>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000d12:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000d16:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000d18:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000d1a:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8000d1c:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000d1e:	d003      	beq.n	8000d28 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	9903      	ldr	r1, [sp, #12]
 8000d24:	440a      	add	r2, r1
 8000d26:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8000d28:	69a3      	ldr	r3, [r4, #24]
}
 8000d2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d2c:	b007      	add	sp, #28
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	4291      	cmp	r1, r2
 8000d34:	d2d1      	bcs.n	8000cda <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 8000d36:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d38:	6347      	str	r7, [r0, #52]	; 0x34
 8000d3a:	e7ce      	b.n	8000cda <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 8000d3c:	4c1a      	ldr	r4, [pc, #104]	; (8000da8 <chSchGoSleepTimeoutS+0x108>)
 8000d3e:	f7ff ff8f 	bl	8000c60 <chSchGoSleepS>
  return currp->u.rdymsg;
 8000d42:	69a3      	ldr	r3, [r4, #24]
}
 8000d44:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d46:	b007      	add	sp, #28
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000d4a:	9b01      	ldr	r3, [sp, #4]
 8000d4c:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8000d4e:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000d50:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000d52:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8000d54:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000d56:	d022      	beq.n	8000d9e <chSchGoSleepTimeoutS+0xfe>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8000d5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8000d5e:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8000d60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000d68:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	d9dc      	bls.n	8000d28 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000d72:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000d74:	bf98      	it	ls
 8000d76:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8000d7c:	440a      	add	r2, r1
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d80:	e7d2      	b.n	8000d28 <chSchGoSleepTimeoutS+0x88>
 8000d82:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8000d84:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8000d86:	62a2      	str	r2, [r4, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000d88:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8000d8c:	e9c4 7707 	strd	r7, r7, [r4, #28]
      vtp->delta = delay;
 8000d90:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8000d92:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d94:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d96:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8000d98:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d9a:	60c3      	str	r3, [r0, #12]
 8000d9c:	e7b1      	b.n	8000d02 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 8000d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da2:	60da      	str	r2, [r3, #12]
    return;
 8000da4:	e7c0      	b.n	8000d28 <chSchGoSleepTimeoutS+0x88>
 8000da6:	bf00      	nop
 8000da8:	20000970 	.word	0x20000970
 8000dac:	080006c1 	.word	0x080006c1

08000db0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8000db0:	b161      	cbz	r1, 8000dcc <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8000db4:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8000db6:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8000db8:	6844      	ldr	r4, [r0, #4]
 8000dba:	4603      	mov	r3, r0
 8000dbc:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000dc0:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8000dc2:	6022      	str	r2, [r4, #0]
}
 8000dc4:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8000dc6:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000dc8:	f7ff bf6a 	b.w	8000ca0 <chSchGoSleepTimeoutS>
}
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000970 	.word	0x20000970
	...

08000de0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000de0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8000de4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000de6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000dea:	2300      	movs	r3, #0
 8000dec:	f383 8811 	msr	BASEPRI, r3
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
	...

08000e00 <_stats_stop_measure_crit_thd>:
  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000e00:	4801      	ldr	r0, [pc, #4]	; (8000e08 <_stats_stop_measure_crit_thd+0x8>)
 8000e02:	f7ff bc1d 	b.w	8000640 <chTMStopMeasurementX>
 8000e06:	bf00      	nop
 8000e08:	20000a10 	.word	0x20000a10
 8000e0c:	00000000 	.word	0x00000000

08000e10 <_stats_start_measure_crit_thd>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000e10:	4801      	ldr	r0, [pc, #4]	; (8000e18 <_stats_start_measure_crit_thd+0x8>)
 8000e12:	f7ff bc45 	b.w	80006a0 <chTMStartMeasurementX>
 8000e16:	bf00      	nop
 8000e18:	20000a10 	.word	0x20000a10
 8000e1c:	00000000 	.word	0x00000000

08000e20 <i2cMasterTransmitTimeout.constprop.0>:
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 *
 * @api
 */
msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 8000e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e24:	4683      	mov	fp, r0
 8000e26:	468a      	mov	sl, r1
 8000e28:	4691      	mov	r9, r2
 8000e2a:	4698      	mov	r8, r3
 8000e2c:	2620      	movs	r6, #32
 8000e2e:	f386 8811 	msr	BASEPRI, r6
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8000e32:	4c4b      	ldr	r4, [pc, #300]	; (8000f60 <i2cMasterTransmitTimeout.constprop.0+0x140>)
  _stats_start_measure_crit_thd();
 8000e34:	f7ff ffec 	bl	8000e10 <_stats_start_measure_crit_thd>
 8000e38:	2500      	movs	r5, #0
  i2cp->state = I2C_ACTIVE_TX;
 8000e3a:	2203      	movs	r2, #3

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8000e3c:	231a      	movs	r3, #26
  I2C_TypeDef *dp = i2cp->i2c;
 8000e3e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000e40:	7022      	strb	r2, [r4, #0]
  i2cp->addr = (addr << 1);
 8000e42:	8423      	strh	r3, [r4, #32]
  i2cp->errors = I2C_NO_ERROR;
 8000e44:	60a5      	str	r5, [r4, #8]
  _stats_stop_measure_crit_thd();
 8000e46:	f7ff ffdb 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8000e4a:	f385 8811 	msr	BASEPRI, r5
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8000e4e:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8000e52:	6811      	ldr	r1, [r2, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8000e54:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8000e56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e58:	600a      	str	r2, [r1, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8000e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8000e5c:	f8c1 b00c 	str.w	fp, [r1, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8000e64:	f8c1 a004 	str.w	sl, [r1, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8000e68:	6018      	str	r0, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8000e6a:	f8c3 900c 	str.w	r9, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8000e6e:	f8c3 8004 	str.w	r8, [r3, #4]
 8000e72:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 8000e76:	4691      	mov	r9, r2
 8000e78:	e003      	b.n	8000e82 <i2cMasterTransmitTimeout.constprop.0+0x62>
 8000e7a:	f7ff ffc1 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8000e7e:	f385 8811 	msr	BASEPRI, r5
 8000e82:	f386 8811 	msr	BASEPRI, r6
  _stats_start_measure_crit_thd();
 8000e86:	f7ff ffc3 	bl	8000e10 <_stats_start_measure_crit_thd>
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	0798      	lsls	r0, r3, #30
 8000e8e:	d402      	bmi.n	8000e96 <i2cMasterTransmitTimeout.constprop.0+0x76>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	0599      	lsls	r1, r3, #22
 8000e94:	d52e      	bpl.n	8000ef4 <i2cMasterTransmitTimeout.constprop.0+0xd4>
 8000e96:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8000e9a:	eba3 0308 	sub.w	r3, r3, r8
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 8000e9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ea2:	d3ea      	bcc.n	8000e7a <i2cMasterTransmitTimeout.constprop.0+0x5a>
      dmaStreamDisable(i2cp->dmatx);
 8000ea4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000ea6:	6803      	ldr	r3, [r0, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f022 021f 	bic.w	r2, r2, #31
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	07d2      	lsls	r2, r2, #31
 8000eb4:	d4fc      	bmi.n	8000eb0 <i2cMasterTransmitTimeout.constprop.0+0x90>
 8000eb6:	7a45      	ldrb	r5, [r0, #9]
      dmaStreamDisable(i2cp->dmarx);
 8000eb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      dmaStreamDisable(i2cp->dmatx);
 8000eba:	6840      	ldr	r0, [r0, #4]
      dmaStreamDisable(i2cp->dmarx);
 8000ebc:	6813      	ldr	r3, [r2, #0]
      dmaStreamDisable(i2cp->dmatx);
 8000ebe:	213d      	movs	r1, #61	; 0x3d
 8000ec0:	40a9      	lsls	r1, r5
 8000ec2:	6001      	str	r1, [r0, #0]
      dmaStreamDisable(i2cp->dmarx);
 8000ec4:	6819      	ldr	r1, [r3, #0]
 8000ec6:	f021 011f 	bic.w	r1, r1, #31
 8000eca:	6019      	str	r1, [r3, #0]
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	07cf      	lsls	r7, r1, #31
 8000ed0:	d4fc      	bmi.n	8000ecc <i2cMasterTransmitTimeout.constprop.0+0xac>
 8000ed2:	7a51      	ldrb	r1, [r2, #9]
 8000ed4:	6852      	ldr	r2, [r2, #4]
 8000ed6:	233d      	movs	r3, #61	; 0x3d
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	f04f 35ff 	mov.w	r5, #4294967295
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	7023      	strb	r3, [r4, #0]
  _stats_stop_measure_crit_thd();
 8000ee4:	f7ff ff8c 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8000eee:	4628      	mov	r0, r5
 8000ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000ef4:	687b      	ldr	r3, [r7, #4]
  return ch.rlist.current;
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <i2cMasterTransmitTimeout.constprop.0+0x144>)
  tp->u.wttrp = trp;
 8000ef8:	481b      	ldr	r0, [pc, #108]	; (8000f68 <i2cMasterTransmitTimeout.constprop.0+0x148>)
 8000efa:	6992      	ldr	r2, [r2, #24]
 8000efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f00:	607b      	str	r3, [r7, #4]
  dp->CR1 |= I2C_CR1_START;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f08:	603b      	str	r3, [r7, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8000f0a:	210a      	movs	r1, #10
  tp->u.wttrp = trp;
 8000f0c:	6250      	str	r0, [r2, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8000f0e:	2003      	movs	r0, #3
  *trp = tp;
 8000f10:	61e2      	str	r2, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8000f12:	f7ff fec5 	bl	8000ca0 <chSchGoSleepTimeoutS>

  /* Waits for the operation completion or a timeout.*/
  msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
  if (msg != MSG_OK) {
 8000f16:	4605      	mov	r5, r0
 8000f18:	b300      	cbz	r0, 8000f5c <i2cMasterTransmitTimeout.constprop.0+0x13c>
    dmaStreamDisable(i2cp->dmatx);
 8000f1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f1c:	6802      	ldr	r2, [r0, #0]
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	f023 031f 	bic.w	r3, r3, #31
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	07de      	lsls	r6, r3, #31
 8000f2a:	d4fc      	bmi.n	8000f26 <i2cMasterTransmitTimeout.constprop.0+0x106>
 8000f2c:	7a42      	ldrb	r2, [r0, #9]
    dmaStreamDisable(i2cp->dmarx);
 8000f2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmatx);
 8000f30:	6840      	ldr	r0, [r0, #4]
 8000f32:	233d      	movs	r3, #61	; 0x3d
 8000f34:	4093      	lsls	r3, r2
    dmaStreamDisable(i2cp->dmarx);
 8000f36:	680a      	ldr	r2, [r1, #0]
    dmaStreamDisable(i2cp->dmatx);
 8000f38:	6003      	str	r3, [r0, #0]
    dmaStreamDisable(i2cp->dmarx);
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	f023 031f 	bic.w	r3, r3, #31
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	07d8      	lsls	r0, r3, #31
 8000f46:	d4fc      	bmi.n	8000f42 <i2cMasterTransmitTimeout.constprop.0+0x122>
 8000f48:	7a48      	ldrb	r0, [r1, #9]
 8000f4a:	684a      	ldr	r2, [r1, #4]
 8000f4c:	233d      	movs	r3, #61	; 0x3d
 8000f4e:	4083      	lsls	r3, r0
    i2cp->state = I2C_READY;
 8000f50:	1c69      	adds	r1, r5, #1
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	bf0c      	ite	eq
 8000f56:	2305      	moveq	r3, #5
 8000f58:	2302      	movne	r3, #2
 8000f5a:	e7c2      	b.n	8000ee2 <i2cMasterTransmitTimeout.constprop.0+0xc2>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e7c0      	b.n	8000ee2 <i2cMasterTransmitTimeout.constprop.0+0xc2>
 8000f60:	20000808 	.word	0x20000808
 8000f64:	20000970 	.word	0x20000970
 8000f68:	20000824 	.word	0x20000824
 8000f6c:	00000000 	.word	0x00000000

08000f70 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000f70:	b568      	push	{r3, r5, r6, lr}
 8000f72:	4605      	mov	r5, r0
 8000f74:	2320      	movs	r3, #32
 8000f76:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000f7a:	f7ff ff49 	bl	8000e10 <_stats_start_measure_crit_thd>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <chCoreAllocFromTop+0x44>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f80:	e9d0 3600 	ldrd	r3, r6, [r0]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000f84:	4249      	negs	r1, r1
 8000f86:	1b75      	subs	r5, r6, r5
 8000f88:	400d      	ands	r5, r1
  prev = p - offset;
 8000f8a:	1aaa      	subs	r2, r5, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d309      	bcc.n	8000fa4 <chCoreAllocFromTop+0x34>
 8000f90:	4296      	cmp	r6, r2
 8000f92:	d307      	bcc.n	8000fa4 <chCoreAllocFromTop+0x34>
  ch_memcore.topmem = prev;
 8000f94:	6042      	str	r2, [r0, #4]
  _stats_stop_measure_crit_thd();
 8000f96:	f7ff ff33 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	bd68      	pop	{r3, r5, r6, pc}
 8000fa4:	f7ff ff2c 	bl	8000e00 <_stats_stop_measure_crit_thd>
    return NULL;
 8000fa8:	2500      	movs	r5, #0
 8000faa:	2300      	movs	r3, #0
 8000fac:	f383 8811 	msr	BASEPRI, r3
}
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	bd68      	pop	{r3, r5, r6, pc}
 8000fb4:	20000b80 	.word	0x20000b80
	...

08000fc0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8000fc0:	b508      	push	{r3, lr}
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8000fca:	f7ff ff21 	bl	8000e10 <_stats_start_measure_crit_thd>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8000fce:	2008      	movs	r0, #8
 8000fd0:	f7ff fe66 	bl	8000ca0 <chSchGoSleepTimeoutS>
  _stats_stop_measure_crit_thd();
 8000fd4:	f7ff ff14 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f383 8811 	msr	BASEPRI, r3
}
 8000fde:	bd08      	pop	{r3, pc}

08000fe0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8000fea:	69c7      	ldr	r7, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8000fec:	4604      	mov	r4, r0
 8000fee:	f04f 0920 	mov.w	r9, #32
 8000ff2:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8000ff6:	f7ff ff0b 	bl	8000e10 <_stats_start_measure_crit_thd>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000ffa:	b38a      	cbz	r2, 8001060 <oqWriteTimeout+0x80>
 8000ffc:	9d03      	ldr	r5, [sp, #12]
 8000ffe:	460e      	mov	r6, r1
 8001000:	f04f 0a00 	mov.w	sl, #0
 8001004:	4688      	mov	r8, r1
  if (n > oqGetEmptyI(oqp)) {
 8001006:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001008:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 800100c:	429d      	cmp	r5, r3
    n = oqGetEmptyI(oqp);
 800100e:	bf8c      	ite	hi
 8001010:	68a6      	ldrhi	r6, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8001012:	462e      	movls	r6, r5
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001014:	1a12      	subs	r2, r2, r0
  if (n < s1) {
 8001016:	42b2      	cmp	r2, r6
 8001018:	d840      	bhi.n	800109c <oqWriteTimeout+0xbc>
  else if (n > s1) {
 800101a:	d22b      	bcs.n	8001074 <oqWriteTimeout+0x94>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800101c:	4641      	mov	r1, r8
    s2 = n - s1;
 800101e:	eba6 0b02 	sub.w	fp, r6, r2
 8001022:	9201      	str	r2, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001024:	f7ff f968 	bl	80002f8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001028:	9a01      	ldr	r2, [sp, #4]
 800102a:	68e0      	ldr	r0, [r4, #12]
 800102c:	eb08 0102 	add.w	r1, r8, r2
 8001030:	465a      	mov	r2, fp
 8001032:	f7ff f961 	bl	80002f8 <memcpy>
  oqp->q_counter -= n;
 8001036:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8001038:	68e2      	ldr	r2, [r4, #12]
  oqp->q_counter -= n;
 800103a:	1b9b      	subs	r3, r3, r6
    oqp->q_wrptr = oqp->q_buffer + s2;
 800103c:	445a      	add	r2, fp
 800103e:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8001040:	60a3      	str	r3, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001042:	b10f      	cbz	r7, 8001048 <oqWriteTimeout+0x68>
        nfy(oqp);
 8001044:	4620      	mov	r0, r4
 8001046:	47b8      	blx	r7
  _stats_stop_measure_crit_thd();
 8001048:	f7ff feda 	bl	8000e00 <_stats_stop_measure_crit_thd>
 800104c:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8001050:	1bad      	subs	r5, r5, r6
      bp += done;
 8001052:	44b0      	add	r8, r6
 8001054:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8001058:	f7ff feda 	bl	8000e10 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 800105c:	2d00      	cmp	r5, #0
 800105e:	d1d2      	bne.n	8001006 <oqWriteTimeout+0x26>
  if (n > oqGetEmptyI(oqp)) {
 8001060:	9d03      	ldr	r5, [sp, #12]
  _stats_stop_measure_crit_thd();
 8001062:	f7ff fecd 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8001066:	2300      	movs	r3, #0
 8001068:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 800106c:	4628      	mov	r0, r5
 800106e:	b005      	add	sp, #20
 8001070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001074:	4632      	mov	r2, r6
 8001076:	4641      	mov	r1, r8
 8001078:	f7ff f93e 	bl	80002f8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800107c:	68e3      	ldr	r3, [r4, #12]
 800107e:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8001080:	68a3      	ldr	r3, [r4, #8]
 8001082:	1b9b      	subs	r3, r3, r6
 8001084:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8001086:	2e00      	cmp	r6, #0
 8001088:	d1db      	bne.n	8001042 <oqWriteTimeout+0x62>
  return chThdEnqueueTimeoutS(tqp, timeout);
 800108a:	9902      	ldr	r1, [sp, #8]
 800108c:	4620      	mov	r0, r4
 800108e:	f7ff fe8f 	bl	8000db0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001092:	2800      	cmp	r0, #0
 8001094:	d0b7      	beq.n	8001006 <oqWriteTimeout+0x26>
 8001096:	9b03      	ldr	r3, [sp, #12]
 8001098:	1b5d      	subs	r5, r3, r5
 800109a:	e7e2      	b.n	8001062 <oqWriteTimeout+0x82>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800109c:	4632      	mov	r2, r6
 800109e:	4641      	mov	r1, r8
 80010a0:	f7ff f92a 	bl	80002f8 <memcpy>
    oqp->q_wrptr += n;
 80010a4:	6963      	ldr	r3, [r4, #20]
 80010a6:	4433      	add	r3, r6
 80010a8:	6163      	str	r3, [r4, #20]
 80010aa:	e7e9      	b.n	8001080 <oqWriteTimeout+0xa0>
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80010b0:	3030      	adds	r0, #48	; 0x30
 80010b2:	f7ff bf95 	b.w	8000fe0 <oqWriteTimeout>
 80010b6:	bf00      	nop
	...

080010c0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, TIME_INFINITE);
 80010c0:	3030      	adds	r0, #48	; 0x30
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	f7ff bf8b 	b.w	8000fe0 <oqWriteTimeout>
 80010ca:	bf00      	nop
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80010d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010d4:	2320      	movs	r3, #32
 80010d6:	4605      	mov	r5, r0
 80010d8:	4688      	mov	r8, r1
 80010da:	4617      	mov	r7, r2
 80010dc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80010e0:	f7ff fe96 	bl	8000e10 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80010e4:	e003      	b.n	80010ee <oqPutTimeout+0x1e>
 80010e6:	f7ff fe63 	bl	8000db0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80010ea:	1e04      	subs	r4, r0, #0
 80010ec:	db1e      	blt.n	800112c <oqPutTimeout+0x5c>
  while (oqIsFullI(oqp)) {
 80010ee:	68ae      	ldr	r6, [r5, #8]
 80010f0:	4639      	mov	r1, r7
 80010f2:	4628      	mov	r0, r5
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d0f6      	beq.n	80010e6 <oqPutTimeout+0x16>
  *oqp->q_wrptr++ = b;
 80010f8:	696a      	ldr	r2, [r5, #20]
  oqp->q_counter--;
 80010fa:	68ab      	ldr	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 80010fc:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80010fe:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001100:	6169      	str	r1, [r5, #20]
  oqp->q_counter--;
 8001102:	60ab      	str	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 8001104:	f882 8000 	strb.w	r8, [r2]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001108:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 800110c:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800110e:	bf24      	itt	cs
 8001110:	68eb      	ldrcs	r3, [r5, #12]
 8001112:	616b      	strcs	r3, [r5, #20]
  if (oqp->q_notify != NULL) {
 8001114:	69eb      	ldr	r3, [r5, #28]
 8001116:	b103      	cbz	r3, 800111a <oqPutTimeout+0x4a>
    oqp->q_notify(oqp);
 8001118:	4798      	blx	r3
  _stats_stop_measure_crit_thd();
 800111a:	f7ff fe71 	bl	8000e00 <_stats_stop_measure_crit_thd>
 800111e:	2000      	movs	r0, #0
 8001120:	f380 8811 	msr	BASEPRI, r0
 8001124:	4604      	mov	r4, r0
}
 8001126:	4620      	mov	r0, r4
 8001128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800112c:	f7ff fe68 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8001130:	f386 8811 	msr	BASEPRI, r6
 8001134:	4620      	mov	r0, r4
 8001136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800113a:	bf00      	nop
 800113c:	0000      	movs	r0, r0
	...

08001140 <println.constprop.0>:
static void println(char *p) {

  while (*p) {
    sdPut(&SD2, *p++);
  }
  sdWriteTimeout(&SD2, (uint8_t *)"\r\n", 2, TIME_INFINITE);
 8001140:	4903      	ldr	r1, [pc, #12]	; (8001150 <println.constprop.0+0x10>)
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <println.constprop.0+0x14>)
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2202      	movs	r2, #2
 800114a:	f7ff bf49 	b.w	8000fe0 <oqWriteTimeout>
 800114e:	bf00      	nop
 8001150:	08002620 	.word	0x08002620
 8001154:	20000870 	.word	0x20000870
	...

08001160 <printn>:
}

/**
 *
 */
static void printn(int16_t n) {
 8001160:	b570      	push	{r4, r5, r6, lr}
  char buf[16], *p;

  if (n > 0)
 8001162:	1e04      	subs	r4, r0, #0
static void printn(int16_t n) {
 8001164:	b084      	sub	sp, #16
    sdPut(&SD2, '+');
 8001166:	f04f 32ff 	mov.w	r2, #4294967295
  if (n > 0)
 800116a:	dd27      	ble.n	80011bc <printn+0x5c>
    sdPut(&SD2, '+');
 800116c:	481d      	ldr	r0, [pc, #116]	; (80011e4 <printn+0x84>)
 800116e:	212b      	movs	r1, #43	; 0x2b
 8001170:	f7ff ffae 	bl	80010d0 <oqPutTimeout>
static void printn(int16_t n) {
 8001174:	466d      	mov	r5, sp
  if (!n)
    sdPut(&SD2, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8001176:	481c      	ldr	r0, [pc, #112]	; (80011e8 <printn+0x88>)
static void printn(int16_t n) {
 8001178:	462a      	mov	r2, r5
      *p++ = (n % 10) + '0', n /= 10;
 800117a:	fb80 3104 	smull	r3, r1, r0, r4
 800117e:	17e3      	asrs	r3, r4, #31
 8001180:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8001184:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001188:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 800118c:	3130      	adds	r1, #48	; 0x30
 800118e:	b2c9      	uxtb	r1, r1
 8001190:	b21c      	sxth	r4, r3
 8001192:	4613      	mov	r3, r2
 8001194:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8001198:	2c00      	cmp	r4, #0
 800119a:	d1ee      	bne.n	800117a <printn+0x1a>
    while (p > buf)
 800119c:	42aa      	cmp	r2, r5
 800119e:	d90b      	bls.n	80011b8 <printn+0x58>
      sdPut(&SD2, *--p);
 80011a0:	4e10      	ldr	r6, [pc, #64]	; (80011e4 <printn+0x84>)
 80011a2:	461c      	mov	r4, r3
 80011a4:	e001      	b.n	80011aa <printn+0x4a>
 80011a6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	4630      	mov	r0, r6
 80011b0:	f7ff ff8e 	bl	80010d0 <oqPutTimeout>
    while (p > buf)
 80011b4:	42a5      	cmp	r5, r4
 80011b6:	d1f6      	bne.n	80011a6 <printn+0x46>
  }
}
 80011b8:	b004      	add	sp, #16
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
    sdPut(&SD2, '-');
 80011bc:	212d      	movs	r1, #45	; 0x2d
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <printn+0x84>)
 80011c0:	f7ff ff86 	bl	80010d0 <oqPutTimeout>
    n = abs(n);
 80011c4:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 80011c8:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 80011cc:	b20c      	sxth	r4, r1
  if (!n)
 80011ce:	2c00      	cmp	r4, #0
 80011d0:	d1d0      	bne.n	8001174 <printn+0x14>
    sdPut(&SD2, '0');
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <printn+0x84>)
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	2130      	movs	r1, #48	; 0x30
}
 80011da:	b004      	add	sp, #16
 80011dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sdPut(&SD2, '0');
 80011e0:	f7ff bf76 	b.w	80010d0 <oqPutTimeout>
 80011e4:	20000870 	.word	0x20000870
 80011e8:	66666667 	.word	0x66666667
 80011ec:	00000000 	.word	0x00000000

080011f0 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <main+0x98>)
  PWR->CR |= PWR_CR_DBP;
 80011f2:	4826      	ldr	r0, [pc, #152]	; (800128c <main+0x9c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80011f4:	691a      	ldr	r2, [r3, #16]
 80011f6:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 80011fa:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
#define gb_LCD_NOBACKLIGHT       0x00
#define gb_display_rate 50


int main(void)
{
 80011fe:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800120a:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800120c:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001210:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	615c      	str	r4, [r3, #20]
 8001216:	2200      	movs	r2, #0
 8001218:	6959      	ldr	r1, [r3, #20]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	6959      	ldr	r1, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800121e:	6a19      	ldr	r1, [r3, #32]
 8001220:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8001224:	6219      	str	r1, [r3, #32]
 8001226:	6a19      	ldr	r1, [r3, #32]
 8001228:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800122c:	6219      	str	r1, [r3, #32]
 800122e:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8001230:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001232:	625c      	str	r4, [r3, #36]	; 0x24
 8001234:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
 8001238:	6a59      	ldr	r1, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 800123a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800123c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001240:	6419      	str	r1, [r3, #64]	; 0x40
 8001242:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001244:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001248:	6619      	str	r1, [r3, #96]	; 0x60
 800124a:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800124c:	6801      	ldr	r1, [r0, #0]
 800124e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001252:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001254:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001256:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800125a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800125e:	b087      	sub	sp, #28
 8001260:	d003      	beq.n	800126a <main+0x7a>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001262:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001266:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001268:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <main+0x9c>)
  dma.allocated_mask = 0U;
 800126c:	4908      	ldr	r1, [pc, #32]	; (8001290 <main+0xa0>)
 800126e:	6842      	ldr	r2, [r0, #4]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <main+0xa4>)
 8001272:	4c09      	ldr	r4, [pc, #36]	; (8001298 <main+0xa8>)
 8001274:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001278:	2500      	movs	r5, #0
 800127a:	6042      	str	r2, [r0, #4]
 800127c:	460a      	mov	r2, r1
 800127e:	600d      	str	r5, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001280:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8001284:	e00c      	b.n	80012a0 <main+0xb0>
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000
 8001290:	20000ba4 	.word	0x20000ba4
 8001294:	080026a0 	.word	0x080026a0
 8001298:	40026010 	.word	0x40026010
 800129c:	f853 4c0c 	ldr.w	r4, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80012a0:	6025      	str	r5, [r4, #0]
    dma.streams[i].func = NULL;
 80012a2:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80012a4:	4299      	cmp	r1, r3
    dma.streams[i].func = NULL;
 80012a6:	6055      	str	r5, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80012a8:	f102 0208 	add.w	r2, r2, #8
 80012ac:	d1f6      	bne.n	800129c <main+0xac>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80012ae:	4fcb      	ldr	r7, [pc, #812]	; (80015dc <main+0x3ec>)
  i2cp->state  = I2C_STOP;
 80012b0:	f8df 939c 	ldr.w	r9, [pc, #924]	; 8001650 <main+0x460>
  DMA1->LIFCR = 0xFFFFFFFFU;
 80012b4:	49ca      	ldr	r1, [pc, #808]	; (80015e0 <main+0x3f0>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 80012b6:	4acb      	ldr	r2, [pc, #812]	; (80015e4 <main+0x3f4>)
  I2CD3.i2c    = I2C3;
 80012b8:	f8df c398 	ldr.w	ip, [pc, #920]	; 8001654 <main+0x464>
  i2cp->config = NULL;
 80012bc:	f8c9 5004 	str.w	r5, [r9, #4]
 80012c0:	2360      	movs	r3, #96	; 0x60
  DMA1->LIFCR = 0xFFFFFFFFU;
 80012c2:	f04f 38ff 	mov.w	r8, #4294967295
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80012c6:	2040      	movs	r0, #64	; 0x40
 80012c8:	f8c1 8008 	str.w	r8, [r1, #8]
 80012cc:	f04f 0b80 	mov.w	fp, #128	; 0x80
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80012d0:	f8c9 5014 	str.w	r5, [r9, #20]
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1; //assigning USART pointer to address of USART port base register
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80012d4:	4ec4      	ldr	r6, [pc, #784]	; (80015e8 <main+0x3f8>)
  DMA1->HIFCR = 0xFFFFFFFFU;
 80012d6:	f8c1 800c 	str.w	r8, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80012da:	f8c2 8008 	str.w	r8, [r2, #8]
 80012de:	f44f 7100 	mov.w	r1, #512	; 0x200
  I2CD3.thread = NULL;
 80012e2:	f8c9 501c 	str.w	r5, [r9, #28]
  DMA2->HIFCR = 0xFFFFFFFFU;
 80012e6:	f8c2 800c 	str.w	r8, [r2, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80012ea:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80012ee:	f44f 7280 	mov.w	r2, #256	; 0x100
  I2CD3.i2c    = I2C3;
 80012f2:	f8c9 c034 	str.w	ip, [r9, #52]	; 0x34
 80012f6:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80012fa:	6038      	str	r0, [r7, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80012fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001300:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 8001304:	4cb9      	ldr	r4, [pc, #740]	; (80015ec <main+0x3fc>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001306:	f8c7 b180 	str.w	fp, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800130a:	f8c7 b000 	str.w	fp, [r7]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800130e:	f887 3308 	strb.w	r3, [r7, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001312:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001316:	603a      	str	r2, [r7, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001318:	f887 3309 	strb.w	r3, [r7, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800131c:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001320:	6039      	str	r1, [r7, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001322:	f887 330a 	strb.w	r3, [r7, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001326:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800132a:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800132e:	6038      	str	r0, [r7, #0]
  tqp->next = (thread_t *)tqp;
 8001330:	f109 000c 	add.w	r0, r9, #12
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001334:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
  i2cp->state  = I2C_STOP;
 8001338:	f04f 0a01 	mov.w	sl, #1
 800133c:	f8c9 000c 	str.w	r0, [r9, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001340:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
  tqp->prev = (thread_t *)tqp;
 8001344:	f8c9 0010 	str.w	r0, [r9, #16]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001348:	6039      	str	r1, [r7, #0]
  sdObjectInit(&SD2, NULL, notify2);
 800134a:	4630      	mov	r0, r6
 800134c:	49a8      	ldr	r1, [pc, #672]	; (80015f0 <main+0x400>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800134e:	f887 3328 	strb.w	r3, [r7, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001352:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	f889 a000 	strb.w	sl, [r9]
  I2CD3.dmatx  = NULL;
 800135c:	e9c9 550b 	strd	r5, r5, [r9, #44]	; 0x2c
 8001360:	f7ff f866 	bl	8000430 <sdObjectInit.constprop.0>
  SD2.usart = USART2;
 8001364:	4ba3      	ldr	r3, [pc, #652]	; (80015f4 <main+0x404>)
  sdObjectInit(&SD4, NULL, notify4);
 8001366:	49a4      	ldr	r1, [pc, #656]	; (80015f8 <main+0x408>)
  SD2.usart = USART2;
 8001368:	6773      	str	r3, [r6, #116]	; 0x74
  sdObjectInit(&SD4, NULL, notify4);
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff f860 	bl	8000430 <sdObjectInit.constprop.0>
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001370:	4ba2      	ldr	r3, [pc, #648]	; (80015fc <main+0x40c>)
  SD4.usart = UART4;
 8001372:	49a3      	ldr	r1, [pc, #652]	; (8001600 <main+0x410>)
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 8001374:	4aa3      	ldr	r2, [pc, #652]	; (8001604 <main+0x414>)
  SPID2.dmarx     = NULL;
  SPID2.dmatx     = NULL;
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8001376:	48a4      	ldr	r0, [pc, #656]	; (8001608 <main+0x418>)
 8001378:	6761      	str	r1, [r4, #116]	; 0x74
  SPID2.spi       = SPI2;
 800137a:	61da      	str	r2, [r3, #28]
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 800137c:	49a3      	ldr	r1, [pc, #652]	; (800160c <main+0x41c>)
 800137e:	615d      	str	r5, [r3, #20]
  tqp->next = (thread_t *)tqp;
 8001380:	f103 020c 	add.w	r2, r3, #12
  tqp->prev = (thread_t *)tqp;
 8001384:	e9c3 2203 	strd	r2, r2, [r3, #12]
 8001388:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800138c:	e9c3 5501 	strd	r5, r5, [r3, #4]
  SPID2.dmatx     = NULL;
 8001390:	e9c3 5508 	strd	r5, r5, [r3, #32]
  spip->state = SPI_STOP;
 8001394:	f883 a000 	strb.w	sl, [r3]
 * @note    You can add your board-specific code here.
 */
void boardInit(void)
{

  stm32_clock_init();
 8001398:	f7ff fbda 	bl	8000b50 <stm32_clock_init>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800139c:	4b9c      	ldr	r3, [pc, #624]	; (8001610 <main+0x420>)
  tqp->next = (thread_t *)tqp;
 800139e:	4c9d      	ldr	r4, [pc, #628]	; (8001614 <main+0x424>)
 80013a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80013a2:	489d      	ldr	r0, [pc, #628]	; (8001618 <main+0x428>)
  ch_memcore.basemem = __heap_base__;
 80013a4:	499d      	ldr	r1, [pc, #628]	; (800161c <main+0x42c>)
 80013a6:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 8001658 <main+0x468>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80013aa:	f8df e2b0 	ldr.w	lr, [pc, #688]	; 800165c <main+0x46c>
  ST_ENABLE_CLOCK();
 80013ae:	ea42 020a 	orr.w	r2, r2, sl
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
 80013b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  tqp->prev = (thread_t *)tqp;
 80013b6:	6064      	str	r4, [r4, #4]
 80013b8:	ea42 020a 	orr.w	r2, r2, sl
 80013bc:	661a      	str	r2, [r3, #96]	; 0x60
 80013be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 80013c0:	6883      	ldr	r3, [r0, #8]
 80013c2:	4a97      	ldr	r2, [pc, #604]	; (8001620 <main+0x430>)
  ch.rlist.prio = NOPRIO;
 80013c4:	60a5      	str	r5, [r4, #8]
 80013c6:	ea43 030a 	orr.w	r3, r3, sl
 80013ca:	6083      	str	r3, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	f640 407f 	movw	r0, #3199	; 0xc7f
 80013d4:	6298      	str	r0, [r3, #40]	; 0x28
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80013d6:	6124      	str	r4, [r4, #16]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80013dc:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  ch.rlist.older = (thread_t *)&ch.rlist;
 80013e0:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->CCMR1  = 0;
 80013e2:	619d      	str	r5, [r3, #24]
  ch.vtlist.delta = (sysinterval_t)-1;
 80013e4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  STM32_ST_TIM->CCR[0] = 0;
 80013e8:	635d      	str	r5, [r3, #52]	; 0x34
  ch.vtlist.lasttime = (systime_t)0;
 80013ea:	62a5      	str	r5, [r4, #40]	; 0x28
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 80013ec:	60dd      	str	r5, [r3, #12]
  H_NEXT(&default_heap.header) = NULL;
 80013ee:	6055      	str	r5, [r2, #4]
  STM32_ST_TIM->CR2    = 0;
 80013f0:	605d      	str	r5, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 80013f2:	6095      	str	r5, [r2, #8]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80013f4:	f8c3 a014 	str.w	sl, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80013f8:	f8c3 a000 	str.w	sl, [r3]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80013fc:	f104 031c 	add.w	r3, r4, #28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001400:	f887 b31c 	strb.w	fp, [r7, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001404:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8001408:	61e3      	str	r3, [r4, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800140a:	6038      	str	r0, [r7, #0]
  ch_memcore.topmem  = __heap_end__;
 800140c:	4885      	ldr	r0, [pc, #532]	; (8001624 <main+0x434>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 800140e:	6223      	str	r3, [r4, #32]
  tqp->next = (thread_t *)tqp;
 8001410:	4b85      	ldr	r3, [pc, #532]	; (8001628 <main+0x438>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001412:	f8c2 e000 	str.w	lr, [r2]
 8001416:	e9c1 c000 	strd	ip, r0, [r1]
 800141a:	f102 070c 	add.w	r7, r2, #12
  tmp->cumulative = (rttime_t)0;
 800141e:	2000      	movs	r0, #0
 8001420:	2100      	movs	r1, #0
 8001422:	6024      	str	r4, [r4, #0]
 8001424:	60d7      	str	r7, [r2, #12]
 8001426:	e9cd 0104 	strd	r0, r1, [sp, #16]
  tmp->best       = (rtcnt_t)-1;
 800142a:	f8cd 8000 	str.w	r8, [sp]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 800142e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8001432:	f103 0840 	add.w	r8, r3, #64	; 0x40
 8001436:	f103 0110 	add.w	r1, r3, #16
  tqp->prev = (thread_t *)tqp;
 800143a:	e9c3 3300 	strd	r3, r3, [r3]
 800143e:	e9c3 080f 	strd	r0, r8, [r3, #60]	; 0x3c
 8001442:	6117      	str	r7, [r2, #16]
 8001444:	6155      	str	r5, [r2, #20]
  tmp->last       = (rtcnt_t)0;
 8001446:	e9cd 5501 	strd	r5, r5, [sp, #4]
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
  mp->provider = provider;
 800144a:	4a78      	ldr	r2, [pc, #480]	; (800162c <main+0x43c>)
  ch.tm.offset = (rtcnt_t)0;
 800144c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  mp->object_size = size;
 8001450:	f04f 0a14 	mov.w	sl, #20
 8001454:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 8001458:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 800145c:	271c      	movs	r7, #28
  tmp->n          = (ucnt_t)0;
 800145e:	9503      	str	r5, [sp, #12]
 8001460:	609d      	str	r5, [r3, #8]
  mp->next = NULL;
 8001462:	615d      	str	r5, [r3, #20]
 8001464:	62dd      	str	r5, [r3, #44]	; 0x2c
 8001466:	6119      	str	r1, [r3, #16]
  mp->align = align;
 8001468:	2504      	movs	r5, #4
 800146a:	f103 0144 	add.w	r1, r3, #68	; 0x44
  mp->object_size = size;
 800146e:	f8c3 a018 	str.w	sl, [r3, #24]
 8001472:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
 8001476:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 800147a:	631f      	str	r7, [r3, #48]	; 0x30
 800147c:	6459      	str	r1, [r3, #68]	; 0x44
  mp->align = align;
 800147e:	61dd      	str	r5, [r3, #28]
 8001480:	635d      	str	r5, [r3, #52]	; 0x34
  mp->provider = provider;
 8001482:	621a      	str	r2, [r3, #32]
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 8001486:	4668      	mov	r0, sp
 8001488:	f7ff f90a 	bl	80006a0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800148c:	4668      	mov	r0, sp
 800148e:	f7ff f8d7 	bl	8000640 <chTMStopMeasurementX>
  } while (i > 0U);
 8001492:	3d01      	subs	r5, #1
 8001494:	d1f7      	bne.n	8001486 <main+0x296>
  ch.tm.offset = tm.best;
 8001496:	9a00      	ldr	r2, [sp, #0]
  REG_INSERT(tp);
 8001498:	4b65      	ldr	r3, [pc, #404]	; (8001630 <main+0x440>)
 800149a:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800149e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  tp->prio      = prio;
 80014a2:	2280      	movs	r2, #128	; 0x80
  tmp->best       = (rtcnt_t)-1;
 80014a4:	f04f 37ff 	mov.w	r7, #4294967295
  tmp->cumulative = (rttime_t)0;
 80014a8:	2000      	movs	r0, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	63a2      	str	r2, [r4, #56]	; 0x38
  tp->realprio  = prio;
 80014ae:	66e2      	str	r2, [r4, #108]	; 0x6c
  tp->name      = name;
 80014b0:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8001660 <main+0x470>
  tmp->best       = (rtcnt_t)-1;
 80014b4:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  tp->refs      = (trefs_t)1;
 80014b8:	2201      	movs	r2, #1
  REG_INSERT(tp);
 80014ba:	e9c4 4c10 	strd	r4, ip, [r4, #64]	; 0x40
 80014be:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
  tp->name      = name;
 80014c2:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
  tmp->last       = (rtcnt_t)0;
 80014c6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80014ca:	e9c4 552f 	strd	r5, r5, [r4, #188]	; 0xbc
  tp->epending  = (eventmask_t)0;
 80014ce:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
  tmp->cumulative = (rttime_t)0;
 80014d2:	e9c4 012c 	strd	r0, r1, [r4, #176]	; 0xb0
 80014d6:	e9c4 0132 	strd	r0, r1, [r4, #200]	; 0xc8
  ch.kernel_stats.n_irq = (ucnt_t)0;
 80014da:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 80014de:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
  tmp->n          = (ucnt_t)0;
 80014e2:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 80014e6:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
  tp->flags     = CH_FLAG_MODE_STATIC;
 80014ea:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  tp->refs      = (trefs_t)1;
 80014ee:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
  tlp->next = (thread_t *)tlp;
 80014f2:	f103 0e28 	add.w	lr, r3, #40	; 0x28
  REG_INSERT(tp);
 80014f6:	f8cc 3010 	str.w	r3, [ip, #16]
  tqp->next = (thread_t *)tqp;
 80014fa:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
  tmp->worst      = (rtcnt_t)0;
 80014fe:	e9c4 751e 	strd	r7, r5, [r4, #120]	; 0x78
 8001502:	e9c4 ec16 	strd	lr, ip, [r4, #88]	; 0x58
 8001506:	6163      	str	r3, [r4, #20]
  tmp->last       = (rtcnt_t)0;
 8001508:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tqp->prev = (thread_t *)tqp;
 800150c:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 8001510:	2720      	movs	r7, #32
  tmp->n          = (ucnt_t)0;
 8001512:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  tmp->cumulative = (rttime_t)0;
 8001516:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800151a:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 800151c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  currp->wabase = NULL;
 8001520:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001522:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 8001526:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <main+0x444>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800152a:	4a43      	ldr	r2, [pc, #268]	; (8001638 <main+0x448>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	68d9      	ldr	r1, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800152e:	f8df e134 	ldr.w	lr, [pc, #308]	; 8001664 <main+0x474>
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001532:	f8df c134 	ldr.w	ip, [pc, #308]	; 8001668 <main+0x478>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 800153a:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 800153c:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800153e:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001540:	f8de 200c 	ldr.w	r2, [lr, #12]
  chTMStartMeasurementX(&currp->stats);
 8001544:	69a0      	ldr	r0, [r4, #24]
 8001546:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800154a:	f8ce 200c 	str.w	r2, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800154e:	f8dc 2000 	ldr.w	r2, [ip]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	2110      	movs	r1, #16
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	f8cc 2000 	str.w	r2, [ip]
 800155c:	3048      	adds	r0, #72	; 0x48
 800155e:	77d9      	strb	r1, [r3, #31]
 8001560:	f883 7022 	strb.w	r7, [r3, #34]	; 0x22
 8001564:	f7ff f89c 	bl	80006a0 <chTMStartMeasurementX>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001568:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 800156c:	b662      	cpsie	i
 800156e:	4a33      	ldr	r2, [pc, #204]	; (800163c <main+0x44c>)
    *startp++ = v;
 8001570:	2055      	movs	r0, #85	; 0x55
 8001572:	4613      	mov	r3, r2
 8001574:	f102 01f8 	add.w	r1, r2, #248	; 0xf8
 8001578:	f803 0b01 	strb.w	r0, [r3], #1
  while (startp < endp) {
 800157c:	428b      	cmp	r3, r1
 800157e:	d1fb      	bne.n	8001578 <main+0x388>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001580:	2320      	movs	r3, #32
 8001582:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001586:	f7ff fc43 	bl	8000e10 <_stats_start_measure_crit_thd>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800158a:	492d      	ldr	r1, [pc, #180]	; (8001640 <main+0x450>)
 800158c:	482d      	ldr	r0, [pc, #180]	; (8001644 <main+0x454>)
  REG_INSERT(tp);
 800158e:	6965      	ldr	r5, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <main+0x458>)
  tp->name      = name;
 8001592:	4f2e      	ldr	r7, [pc, #184]	; (800164c <main+0x45c>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001594:	6750      	str	r0, [r2, #116]	; 0x74
  tp->state     = CH_STATE_WTSTART;
 8001596:	2002      	movs	r0, #2
 8001598:	f8a2 00b8 	strh.w	r0, [r2, #184]	; 0xb8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800159c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  tp->prio      = prio;
 80015a0:	2001      	movs	r0, #1
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80015a2:	2300      	movs	r3, #0
  tp->name      = name;
 80015a4:	f8c2 70b0 	str.w	r7, [r2, #176]	; 0xb0
  REG_INSERT(tp);
 80015a8:	f101 0724 	add.w	r7, r1, #36	; 0x24
  tp->prio      = prio;
 80015ac:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  tp->realprio  = prio;
 80015b0:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
  tp->refs      = (trefs_t)1;
 80015b4:	f882 00ba 	strb.w	r0, [r2, #186]	; 0xba
  tp->epending  = (eventmask_t)0;
 80015b8:	e9c2 3333 	strd	r3, r3, [r2, #204]	; 0xcc
  REG_INSERT(tp);
 80015bc:	f8c2 50ac 	str.w	r5, [r2, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80015c0:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
  tp->wabase = tdp->wbase;
 80015c4:	f8c2 20b4 	str.w	r2, [r2, #180]	; 0xb4
  REG_INSERT(tp);
 80015c8:	f8c2 40a8 	str.w	r4, [r2, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80015cc:	6793      	str	r3, [r2, #120]	; 0x78
  REG_INSERT(tp);
 80015ce:	612f      	str	r7, [r5, #16]
  tmp->last       = (rtcnt_t)0;
 80015d0:	e9c2 3339 	strd	r3, r3, [r2, #228]	; 0xe4
  tmp->best       = (rtcnt_t)-1;
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
  thread_t *otp = currp;
 80015d8:	69a5      	ldr	r5, [r4, #24]
 80015da:	e047      	b.n	800166c <main+0x47c>
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	40026000 	.word	0x40026000
 80015e4:	40026400 	.word	0x40026400
 80015e8:	20000840 	.word	0x20000840
 80015ec:	200008bc 	.word	0x200008bc
 80015f0:	08000541 	.word	0x08000541
 80015f4:	40004400 	.word	0x40004400
 80015f8:	08000551 	.word	0x08000551
 80015fc:	20000938 	.word	0x20000938
 8001600:	40004c00 	.word	0x40004c00
 8001604:	40003800 	.word	0x40003800
 8001608:	00010016 	.word	0x00010016
 800160c:	00010046 	.word	0x00010046
 8001610:	40023800 	.word	0x40023800
 8001614:	20000970 	.word	0x20000970
 8001618:	e0042000 	.word	0xe0042000
 800161c:	20000b80 	.word	0x20000b80
 8001620:	20000b88 	.word	0x20000b88
 8001624:	20020000 	.word	0x20020000
 8001628:	20000a40 	.word	0x20000a40
 800162c:	080005b1 	.word	0x080005b1
 8001630:	200009a0 	.word	0x200009a0
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	05fa0300 	.word	0x05fa0300
 800163c:	20000a88 	.word	0x20000a88
 8001640:	20000afc 	.word	0x20000afc
 8001644:	080007c1 	.word	0x080007c1
 8001648:	080002d1 	.word	0x080002d1
 800164c:	0800267c 	.word	0x0800267c
 8001650:	20000808 	.word	0x20000808
 8001654:	40005c00 	.word	0x40005c00
 8001658:	20000c38 	.word	0x20000c38
 800165c:	08000f71 	.word	0x08000f71
 8001660:	08002754 	.word	0x08002754
 8001664:	e000edf0 	.word	0xe000edf0
 8001668:	e0001000 	.word	0xe0001000
 800166c:	f8c2 00e0 	str.w	r0, [r2, #224]	; 0xe0
  tmp->n          = (ucnt_t)0;
 8001670:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
  ntp->u.rdymsg = msg;
 8001674:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
  tlp->next = (thread_t *)tlp;
 8001678:	f101 004c 	add.w	r0, r1, #76	; 0x4c
  if (ntp->prio <= otp->prio) {
 800167c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8001680:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
  tqp->next = (thread_t *)tqp;
 8001684:	3150      	adds	r1, #80	; 0x50
  tqp->prev = (thread_t *)tqp;
 8001686:	e9c2 1131 	strd	r1, r1, [r2, #196]	; 0xc4
  tmp->cumulative = (rttime_t)0;
 800168a:	2000      	movs	r0, #0
 800168c:	2100      	movs	r1, #0
 800168e:	e9c2 013c 	strd	r0, r1, [r2, #240]	; 0xf0
 8001692:	6167      	str	r7, [r4, #20]
 8001694:	f1bc 0f00 	cmp.w	ip, #0
 8001698:	f000 81d1 	beq.w	8001a3e <main+0x84e>
  cp = (thread_t *)&ch.rlist.queue;
 800169c:	49c3      	ldr	r1, [pc, #780]	; (80019ac <main+0x7bc>)
  tp->state = CH_STATE_READY;
 800169e:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
    cp = cp->queue.next;
 80016a2:	6809      	ldr	r1, [r1, #0]
  } while (cp->prio >= tp->prio);
 80016a4:	688b      	ldr	r3, [r1, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1fb      	bne.n	80016a2 <main+0x4b2>
  tp->queue.next             = cp;
 80016aa:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
  tp->queue.prev             = cp->queue.prev;
 80016ae:	684b      	ldr	r3, [r1, #4]
 80016b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  tp->queue.prev->queue.next = tp;
 80016b4:	601f      	str	r7, [r3, #0]
  cp->queue.prev             = tp;
 80016b6:	604f      	str	r7, [r1, #4]
  _stats_stop_measure_crit_thd();
 80016b8:	f7ff fba2 	bl	8000e00 <_stats_stop_measure_crit_thd>
 80016bc:	2300      	movs	r3, #0
 80016be:	f383 8811 	msr	BASEPRI, r3
 80016c2:	2320      	movs	r3, #32
 80016c4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80016c8:	f7ff fba2 	bl	8000e10 <_stats_start_measure_crit_thd>
  if (i2cp->state == I2C_STOP) {
 80016cc:	f899 3000 	ldrb.w	r3, [r9]
  i2cp->config = config;
 80016d0:	4ab7      	ldr	r2, [pc, #732]	; (80019b0 <main+0x7c0>)
  I2C_TypeDef *dp = i2cp->i2c;
 80016d2:	f8d9 4034 	ldr.w	r4, [r9, #52]	; 0x34
 80016d6:	f8c9 2004 	str.w	r2, [r9, #4]
  if (i2cp->state == I2C_STOP) {
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d141      	bne.n	8001762 <main+0x572>
      rccResetI2C3();
 80016de:	4db5      	ldr	r5, [pc, #724]	; (80019b4 <main+0x7c4>)
 80016e0:	49b5      	ldr	r1, [pc, #724]	; (80019b8 <main+0x7c8>)
 80016e2:	6a2b      	ldr	r3, [r5, #32]
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C3_RX_DMA_CHANNEL) |
 80016e4:	4fb5      	ldr	r7, [pc, #724]	; (80019bc <main+0x7cc>)
      rccResetI2C3();
 80016e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016ea:	622b      	str	r3, [r5, #32]
 80016ec:	6a2b      	ldr	r3, [r5, #32]
 80016ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016f2:	622b      	str	r3, [r5, #32]
 80016f4:	6a28      	ldr	r0, [r5, #32]
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80016f6:	f240 4256 	movw	r2, #1110	; 0x456
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80016fa:	f240 4316 	movw	r3, #1046	; 0x416
 80016fe:	2002      	movs	r0, #2
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8001700:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8001704:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 8001708:	f7fe fec2 	bl	8000490 <dmaStreamAllocI.part.0.constprop.0>
 800170c:	49ac      	ldr	r1, [pc, #688]	; (80019c0 <main+0x7d0>)
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C3_RX_DMA_STREAM,
 800170e:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8001712:	2004      	movs	r0, #4
 8001714:	f7fe febc 	bl	8000490 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableI2C3(true);
 8001718:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C3_TX_DMA_STREAM,
 800171a:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
      rccEnableI2C3(true);
 800171e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001722:	642b      	str	r3, [r5, #64]	; 0x40
 8001724:	6e28      	ldr	r0, [r5, #96]	; 0x60
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C3_RX_DMA_CHANNEL) |
 8001726:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C3_TX_DMA_CHANNEL) |
 800172a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800172e:	4ba5      	ldr	r3, [pc, #660]	; (80019c4 <main+0x7d4>)
      rccEnableI2C3(true);
 8001730:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001734:	6628      	str	r0, [r5, #96]	; 0x60
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C3_RX_DMA_CHANNEL) |
 8001736:	4339      	orrs	r1, r7
 8001738:	2050      	movs	r0, #80	; 0x50
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C3_TX_DMA_CHANNEL) |
 800173a:	433a      	orrs	r2, r7
      rccEnableI2C3(true);
 800173c:	6e2d      	ldr	r5, [r5, #96]	; 0x60
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C3_RX_DMA_CHANNEL) |
 800173e:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
 8001742:	f883 0348 	strb.w	r0, [r3, #840]	; 0x348
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001746:	f44f 7180 	mov.w	r1, #256	; 0x100
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C3_TX_DMA_CHANNEL) |
 800174a:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
 800174e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001752:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001756:	6099      	str	r1, [r3, #8]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001758:	f883 0349 	strb.w	r0, [r3, #841]	; 0x349
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800175c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001760:	609a      	str	r2, [r3, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8001762:	e9d9 230b 	ldrd	r2, r3, [r9, #44]	; 0x2c
  i2c_lld_set_clock(i2cp);
 8001766:	f8d9 1004 	ldr.w	r1, [r9, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800176a:	681d      	ldr	r5, [r3, #0]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800176c:	6817      	ldr	r7, [r2, #0]
  int32_t clock_speed = i2cp->config->clock_speed;
 800176e:	6848      	ldr	r0, [r1, #4]
  i2c_lld_set_clock(i2cp);
 8001770:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
  if (clock_speed <= 100000) {
 8001774:	f8df c28c 	ldr.w	ip, [pc, #652]	; 8001a04 <main+0x814>
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8001778:	f104 0310 	add.w	r3, r4, #16
 800177c:	60bb      	str	r3, [r7, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800177e:	60ab      	str	r3, [r5, #8]
  dp->CR1 = I2C_CR1_SWRST;
 8001780:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8001784:	f44f 6510 	mov.w	r5, #2304	; 0x900
  dp->CR1 = 0;
 8001788:	2300      	movs	r3, #0
  dp->CR1 = I2C_CR1_SWRST;
 800178a:	6027      	str	r7, [r4, #0]
  dp->CR1 = 0;
 800178c:	6023      	str	r3, [r4, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 800178e:	6065      	str	r5, [r4, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8001790:	6855      	ldr	r5, [r2, #4]
 8001792:	f64f 77c0 	movw	r7, #65472	; 0xffc0
 8001796:	403d      	ands	r5, r7
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8001798:	7a0f      	ldrb	r7, [r1, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800179a:	6055      	str	r5, [r2, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800179c:	6855      	ldr	r5, [r2, #4]
  if (clock_speed <= 100000) {
 800179e:	4560      	cmp	r0, ip
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80017a0:	f045 0520 	orr.w	r5, r5, #32
 80017a4:	6055      	str	r5, [r2, #4]
  if (clock_speed <= 100000) {
 80017a6:	f300 816a 	bgt.w	8001a7e <main+0x88e>
    dp->TRISE = I2C_CLK_FREQ + 1;
 80017aa:	2521      	movs	r5, #33	; 0x21
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80017ac:	4b86      	ldr	r3, [pc, #536]	; (80019c8 <main+0x7d8>)
    dp->TRISE = I2C_CLK_FREQ + 1;
 80017ae:	6215      	str	r5, [r2, #32]
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80017b0:	0040      	lsls	r0, r0, #1
 80017b2:	fbb3 f3f0 	udiv	r3, r3, r0
    regCCR |= (clock_div & I2C_CCR_CCR);
 80017b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  dp->CCR = regCCR;
 80017ba:	61d3      	str	r3, [r2, #28]
  i2copmode_t opmode = i2cp->config->op_mode;
 80017bc:	7809      	ldrb	r1, [r1, #0]
  regCR1 = dp->CR1;
 80017be:	6813      	ldr	r3, [r2, #0]
  switch (opmode) {
 80017c0:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 80017c2:	b29b      	uxth	r3, r3
  switch (opmode) {
 80017c4:	f000 81b2 	beq.w	8001b2c <main+0x93c>
 80017c8:	2903      	cmp	r1, #3
 80017ca:	f000 81ac 	beq.w	8001b26 <main+0x936>
 80017ce:	2901      	cmp	r1, #1
 80017d0:	f000 818e 	beq.w	8001af0 <main+0x900>
  dp->CR1 = regCR1;
 80017d4:	6013      	str	r3, [r2, #0]
  dp->CR1 |= I2C_CR1_PE;
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6023      	str	r3, [r4, #0]
  i2cp->state = I2C_READY;
 80017de:	2302      	movs	r3, #2
 80017e0:	f889 3000 	strb.w	r3, [r9]
  _stats_stop_measure_crit_thd();
 80017e4:	f7ff fb0c 	bl	8000e00 <_stats_stop_measure_crit_thd>
 80017e8:	2300      	movs	r3, #0
 80017ea:	f383 8811 	msr	BASEPRI, r3
 80017ee:	2320      	movs	r3, #32
 80017f0:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80017f4:	f7ff fb0c 	bl	8000e10 <_stats_start_measure_crit_thd>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80017f8:	7a33      	ldrb	r3, [r6, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d111      	bne.n	8001822 <main+0x632>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <main+0x7c4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001800:	4a70      	ldr	r2, [pc, #448]	; (80019c4 <main+0x7d4>)
 8001802:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001804:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001808:	6419      	str	r1, [r3, #64]	; 0x40
 800180a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800180c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001810:	6619      	str	r1, [r3, #96]	; 0x60
 8001812:	20c0      	movs	r0, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001818:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800181c:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001820:	6051      	str	r1, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 8001822:	6f73      	ldr	r3, [r6, #116]	; 0x74
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001824:	2001      	movs	r0, #1
  u->BRR = fck;
 8001826:	f240 1515 	movw	r5, #277	; 0x115
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800182a:	2240      	movs	r2, #64	; 0x40
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800182c:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 8001830:	2400      	movs	r4, #0
  u->BRR = fck;
 8001832:	609d      	str	r5, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001834:	611a      	str	r2, [r3, #16]
  sdp->state = SD_READY;
 8001836:	2502      	movs	r5, #2
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001838:	6158      	str	r0, [r3, #20]
    sdp->rxmask = 0xFF;
 800183a:	22ff      	movs	r2, #255	; 0xff
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800183c:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 800183e:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8001840:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001842:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8001844:	f886 2078 	strb.w	r2, [r6, #120]	; 0x78
 8001848:	7235      	strb	r5, [r6, #8]
  _stats_stop_measure_crit_thd();
 800184a:	f7ff fad9 	bl	8000e00 <_stats_stop_measure_crit_thd>
 800184e:	f384 8811 	msr	BASEPRI, r4
      /*
       * Activates the serial driver 2 using the driver default configuration.
       * PA2(TX) and PA3(RX) are routed to USART2.
       */
      sdStart(&SD2, &serial_terminal);
      palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8001852:	485e      	ldr	r0, [pc, #376]	; (80019cc <main+0x7dc>)
         */
      palSetPadMode(GPIOA, GPIOA_PIN8, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST);    /* I2C_SCK PA8 */
      palSetPadMode(GPIOC,GPIOC_PIN9,  PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST);    /* I2C_SDA PC9 */
      /* Prepare the Magnetometer*/
     // i2cAcquireBus(&I2CD3);
       status = i2cMasterTransmitTimeout(&I2CD3,DeviceAddress,setReset,2,NULL,0,10); //Write Register 0BH by 0x01 (Define Set/Reset period)
 8001854:	4e5e      	ldr	r6, [pc, #376]	; (80019d0 <main+0x7e0>)
    sdPut(&SD2, *p++);
 8001856:	4f5f      	ldr	r7, [pc, #380]	; (80019d4 <main+0x7e4>)
      palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8001858:	f240 3282 	movw	r2, #898	; 0x382
 800185c:	2104      	movs	r1, #4
 800185e:	f7ff f90f 	bl	8000a80 <_pal_lld_setgroupmode>
      palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8001862:	485a      	ldr	r0, [pc, #360]	; (80019cc <main+0x7dc>)
 8001864:	f240 3282 	movw	r2, #898	; 0x382
 8001868:	2108      	movs	r1, #8
 800186a:	f7ff f909 	bl	8000a80 <_pal_lld_setgroupmode>
      sdWrite(&SD2, (unsigned char*)"Write a String\n", 15);
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	4959      	ldr	r1, [pc, #356]	; (80019d8 <main+0x7e8>)
 8001874:	4857      	ldr	r0, [pc, #348]	; (80019d4 <main+0x7e4>)
 8001876:	220f      	movs	r2, #15
 8001878:	f7ff fbb2 	bl	8000fe0 <oqWriteTimeout>
      palSetPadMode(GPIOA, GPIOA_PIN8, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST);    /* I2C_SCK PA8 */
 800187c:	4853      	ldr	r0, [pc, #332]	; (80019cc <main+0x7dc>)
 800187e:	f240 221a 	movw	r2, #538	; 0x21a
 8001882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001886:	f7ff f8fb 	bl	8000a80 <_pal_lld_setgroupmode>
      palSetPadMode(GPIOC,GPIOC_PIN9,  PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST);    /* I2C_SDA PC9 */
 800188a:	4854      	ldr	r0, [pc, #336]	; (80019dc <main+0x7ec>)
 800188c:	f240 221a 	movw	r2, #538	; 0x21a
 8001890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001894:	f7ff f8f4 	bl	8000a80 <_pal_lld_setgroupmode>
       status = i2cMasterTransmitTimeout(&I2CD3,DeviceAddress,setReset,2,NULL,0,10); //Write Register 0BH by 0x01 (Define Set/Reset period)
 8001898:	4623      	mov	r3, r4
 800189a:	4622      	mov	r2, r4
 800189c:	4629      	mov	r1, r5
 800189e:	4850      	ldr	r0, [pc, #320]	; (80019e0 <main+0x7f0>)
 80018a0:	f7ff fabe 	bl	8000e20 <i2cMasterTransmitTimeout.constprop.0>
  while (*p) {
 80018a4:	2173      	movs	r1, #115	; 0x73
       status = i2cMasterTransmitTimeout(&I2CD3,DeviceAddress,setReset,2,NULL,0,10); //Write Register 0BH by 0x01 (Define Set/Reset period)
 80018a6:	4604      	mov	r4, r0
    sdPut(&SD2, *p++);
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	4638      	mov	r0, r7
 80018ae:	f7ff fc0f 	bl	80010d0 <oqPutTimeout>
  while (*p) {
 80018b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80018b6:	2900      	cmp	r1, #0
 80018b8:	d1f6      	bne.n	80018a8 <main+0x6b8>
      //status = i2cMasterTransmit(&I2CD3,DeviceAddress,setReset,2,rxData,0);
     // status = i2cMasterTransmitTimeout(&I2CD3,DeviceAddress,cr1,2,NULL,0,10);     // Write Register 09H by 0x1D (Define OSR = 512, Full Scale Range = 8 Gauss, ODR = 200Hz, set continuous measurement mode
    //  i2cReleaseBus(&I2CD3);
      //status = i2cMasterTransmit(&I2CD3,DeviceAddress,cr1,2,rxData,0);
      print("status1 & 2:");
      printn(status);
 80018ba:	b220      	sxth	r0, r4
 80018bc:	f7ff fc50 	bl	8001160 <printn>
      println("");
      if (status != MSG_OK)
      {
            errors = i2cGetErrors(&I2CD3);
 80018c0:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001a08 <main+0x818>
      println("");
 80018c4:	f7ff fc3c 	bl	8001140 <println.constprop.0>
      if (status != MSG_OK)
 80018c8:	2c00      	cmp	r4, #0
 80018ca:	f040 8115 	bne.w	8001af8 <main+0x908>
            print("Errors: ");
            printn(errors);
            println("");
       }

      chThdSleepMilliseconds(100);
 80018ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018d2:	4e44      	ldr	r6, [pc, #272]	; (80019e4 <main+0x7f4>)
 80018d4:	f8df b134 	ldr.w	fp, [pc, #308]	; 8001a0c <main+0x81c>
    sdPut(&SD2, *p++);
 80018d8:	4c3e      	ldr	r4, [pc, #248]	; (80019d4 <main+0x7e4>)
      chThdSleepMilliseconds(100);
 80018da:	f7ff fb71 	bl	8000fc0 <chThdSleep>
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
          while (true) {
            //    i2cAcquireBus(&I2CD3);
                status = i2cMasterTransmitTimeout(&I2CD3, DeviceAddress, &StatusReg,1,rxData,1,10); // Check status register 06H[0]
 80018de:	4637      	mov	r7, r6
 80018e0:	4d41      	ldr	r5, [pc, #260]	; (80019e8 <main+0x7f8>)
 80018e2:	2301      	movs	r3, #1
 80018e4:	4619      	mov	r1, r3
 80018e6:	463a      	mov	r2, r7
 80018e8:	4628      	mov	r0, r5
 80018ea:	f7ff fa99 	bl	8000e20 <i2cMasterTransmitTimeout.constprop.0>
               // i2cReleaseBus(&I2CD3);
                if (status != MSG_OK)
 80018ee:	2800      	cmp	r0, #0
 80018f0:	f040 80d1 	bne.w	8001a96 <main+0x8a6>
 80018f4:	f8df a118 	ldr.w	sl, [pc, #280]	; 8001a10 <main+0x820>
  while (*p) {
 80018f8:	2161      	movs	r1, #97	; 0x61
    sdPut(&SD2, *p++);
 80018fa:	f04f 32ff 	mov.w	r2, #4294967295
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff fbe6 	bl	80010d0 <oqPutTimeout>
  while (*p) {
 8001904:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001908:	2900      	cmp	r1, #0
 800190a:	d1f6      	bne.n	80018fa <main+0x70a>
                   println("");
                }
                else
                {
                  print("all is clear!");
                  println("");
 800190c:	f7ff fc18 	bl	8001140 <println.constprop.0>

                }


                if((rxData[0]&0x01) == 1){  // checking Drdy bit if '1' means ready to read.
 8001910:	7833      	ldrb	r3, [r6, #0]
 8001912:	07db      	lsls	r3, r3, #31
 8001914:	d5e5      	bpl.n	80018e2 <main+0x6f2>
                      palTogglePad(GPIOD, GPIOD_LED4);
 8001916:	4a35      	ldr	r2, [pc, #212]	; (80019ec <main+0x7fc>)
 8001918:	6953      	ldr	r3, [r2, #20]
 800191a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800191e:	6153      	str	r3, [r2, #20]
                      chThdSleepMilliseconds(500);
 8001920:	f241 3088 	movw	r0, #5000	; 0x1388
 8001924:	f7ff fb4c 	bl	8000fc0 <chThdSleep>
                    //  i2cAcquireBus(&I2CD3);
                      status = i2cMasterTransmitTimeout(&I2CD3, DeviceAddress, 0x00,1,rxData,6,10); //Reading Mag X,Y,Z registers .
 8001928:	2306      	movs	r3, #6
 800192a:	463a      	mov	r2, r7
 800192c:	2101      	movs	r1, #1
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fa76 	bl	8000e20 <i2cMasterTransmitTimeout.constprop.0>
                      //status = i2cMasterTransmit(&I2CD3, DeviceAddress, 0x00,1,rxData,6);
                    //  i2cReleaseBus(&I2CD3);
                      if (status != MSG_OK){
 8001934:	2800      	cmp	r0, #0
 8001936:	f040 80c5 	bne.w	8001ac4 <main+0x8d4>
                            errors = i2cGetErrors(&I2CD3);
                            print("Errors2: ");
                            printn(errors);
                            println("");
                       }
                      X_Axis=rxData[1]<<8 |rxData[0];
 800193a:	f896 c001 	ldrb.w	ip, [r6, #1]
 800193e:	7831      	ldrb	r1, [r6, #0]
                      Y_Axis=rxData[3]<<8 |rxData[2];
 8001940:	78f5      	ldrb	r5, [r6, #3]
 8001942:	78b2      	ldrb	r2, [r6, #2]
                      Z_Axis=rxData[5]<<8 |rxData[4];
 8001944:	7970      	ldrb	r0, [r6, #5]
 8001946:	7933      	ldrb	r3, [r6, #4]
                      X_Axis=rxData[1]<<8 |rxData[0];
 8001948:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 800194c:	f8ab 1000 	strh.w	r1, [fp]
                      Y_Axis=rxData[3]<<8 |rxData[2];
 8001950:	4927      	ldr	r1, [pc, #156]	; (80019f0 <main+0x800>)
 8001952:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001956:	800a      	strh	r2, [r1, #0]
                      Z_Axis=rxData[5]<<8 |rxData[4];
 8001958:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <main+0x804>)
 800195a:	4d27      	ldr	r5, [pc, #156]	; (80019f8 <main+0x808>)
 800195c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001960:	8013      	strh	r3, [r2, #0]
  while (*p) {
 8001962:	2158      	movs	r1, #88	; 0x58
    sdPut(&SD2, *p++);
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff fbb1 	bl	80010d0 <oqPutTimeout>
  while (*p) {
 800196e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001972:	2900      	cmp	r1, #0
 8001974:	d1f6      	bne.n	8001964 <main+0x774>
                      print("X: ");
                      printn(X_Axis);
 8001976:	f9bb 0000 	ldrsh.w	r0, [fp]
                      println("");
 800197a:	4d20      	ldr	r5, [pc, #128]	; (80019fc <main+0x80c>)
                      printn(X_Axis);
 800197c:	f7ff fbf0 	bl	8001160 <printn>
                      println("");
 8001980:	f7ff fbde 	bl	8001140 <println.constprop.0>
  while (*p) {
 8001984:	2120      	movs	r1, #32
    sdPut(&SD2, *p++);
 8001986:	f04f 32ff 	mov.w	r2, #4294967295
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fba0 	bl	80010d0 <oqPutTimeout>
  while (*p) {
 8001990:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001994:	2900      	cmp	r1, #0
 8001996:	d1f6      	bne.n	8001986 <main+0x796>
                      print(" Y: ");
                      printn(Y_Axis);
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <main+0x800>)
                      println("");
 800199a:	4d19      	ldr	r5, [pc, #100]	; (8001a00 <main+0x810>)
                      printn(Y_Axis);
 800199c:	f9b3 0000 	ldrsh.w	r0, [r3]
 80019a0:	f7ff fbde 	bl	8001160 <printn>
                      println("");
 80019a4:	f7ff fbcc 	bl	8001140 <println.constprop.0>
  while (*p) {
 80019a8:	2120      	movs	r1, #32
 80019aa:	e033      	b.n	8001a14 <main+0x824>
 80019ac:	20000970 	.word	0x20000970
 80019b0:	0800276c 	.word	0x0800276c
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08000a01 	.word	0x08000a01
 80019bc:	06030000 	.word	0x06030000
 80019c0:	080009b1 	.word	0x080009b1
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	01e84800 	.word	0x01e84800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	08002624 	.word	0x08002624
 80019d4:	20000870 	.word	0x20000870
 80019d8:	08002684 	.word	0x08002684
 80019dc:	40020800 	.word	0x40020800
 80019e0:	20000804 	.word	0x20000804
 80019e4:	20000c2c 	.word	0x20000c2c
 80019e8:	20000800 	.word	0x20000800
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	2000096a 	.word	0x2000096a
 80019f4:	2000096c 	.word	0x2000096c
 80019f8:	08002668 	.word	0x08002668
 80019fc:	0800266c 	.word	0x0800266c
 8001a00:	08002674 	.word	0x08002674
 8001a04:	000186a0 	.word	0x000186a0
 8001a08:	20000c28 	.word	0x20000c28
 8001a0c:	20000968 	.word	0x20000968
 8001a10:	0800264c 	.word	0x0800264c
    sdPut(&SD2, *p++);
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f7ff fb59 	bl	80010d0 <oqPutTimeout>
  while (*p) {
 8001a1e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001a22:	2900      	cmp	r1, #0
 8001a24:	d1f6      	bne.n	8001a14 <main+0x824>
                      print(" Z: ");
                      printn(Z_Axis);
 8001a26:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <main+0x978>)
 8001a28:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001a2c:	f7ff fb98 	bl	8001160 <printn>
                      println("");
 8001a30:	f7ff fb86 	bl	8001140 <println.constprop.0>
                      chThdSleepMilliseconds(1000);
 8001a34:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a38:	f7ff fac2 	bl	8000fc0 <chThdSleep>
 8001a3c:	e750      	b.n	80018e0 <main+0x6f0>
  cp = (thread_t *)&ch.rlist.queue;
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <main+0x97c>)
  tp->state = CH_STATE_READY;
 8001a40:	f885 c020 	strb.w	ip, [r5, #32]
    cp = cp->queue.next;
 8001a44:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	d1fb      	bne.n	8001a44 <main+0x854>
  tp->queue.prev             = cp->queue.prev;
 8001a4c:	6858      	ldr	r0, [r3, #4]
  ch.kernel_stats.n_ctxswc++;
 8001a4e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8001a52:	e9c5 3000 	strd	r3, r0, [r5]
  tp->queue.prev->queue.next = tp;
 8001a56:	6005      	str	r5, [r0, #0]
  cp->queue.prev             = tp;
 8001a58:	605d      	str	r5, [r3, #4]
    ntp->state = CH_STATE_CURRENT;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f101 0c01 	add.w	ip, r1, #1
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8001a60:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8001a64:	4942      	ldr	r1, [pc, #264]	; (8001b70 <main+0x980>)
 8001a66:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
    currp = ntp;
 8001a6a:	61a7      	str	r7, [r4, #24]
  ch.kernel_stats.n_ctxswc++;
 8001a6c:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8001a70:	f7fe fdc6 	bl	8000600 <chTMChainMeasurementToX>
    chSysSwitch(ntp, otp);
 8001a74:	483f      	ldr	r0, [pc, #252]	; (8001b74 <main+0x984>)
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fc22 	bl	80002c0 <_port_switch>
 8001a7c:	e61c      	b.n	80016b8 <main+0x4c8>
  else if (clock_speed <= 400000) {
 8001a7e:	4d3e      	ldr	r5, [pc, #248]	; (8001b78 <main+0x988>)
 8001a80:	42a8      	cmp	r0, r5
 8001a82:	f73f ae9a 	bgt.w	80017ba <main+0x5ca>
    if (duty == FAST_DUTY_CYCLE_2) {
 8001a86:	2f02      	cmp	r7, #2
 8001a88:	d056      	beq.n	8001b38 <main+0x948>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8001a8a:	2f03      	cmp	r7, #3
 8001a8c:	d061      	beq.n	8001b52 <main+0x962>
  regCCR = 0;
 8001a8e:	461d      	mov	r5, r3
  clock_div = I2C_CCR_CCR;
 8001a90:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001a94:	e057      	b.n	8001b46 <main+0x956>
                   errors = i2cGetErrors(&I2CD3);
 8001a96:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001a9a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8001b8c <main+0x99c>
 8001a9e:	f8c8 3000 	str.w	r3, [r8]
  while (*p) {
 8001aa2:	2145      	movs	r1, #69	; 0x45
    sdPut(&SD2, *p++);
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff fb11 	bl	80010d0 <oqPutTimeout>
  while (*p) {
 8001aae:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001ab2:	2900      	cmp	r1, #0
 8001ab4:	d1f6      	bne.n	8001aa4 <main+0x8b4>
                   printn(errors);
 8001ab6:	f9b8 0000 	ldrsh.w	r0, [r8]
 8001aba:	f7ff fb51 	bl	8001160 <printn>
                   println("");
 8001abe:	f7ff fb3f 	bl	8001140 <println.constprop.0>
 8001ac2:	e725      	b.n	8001910 <main+0x720>
                            errors = i2cGetErrors(&I2CD3);
 8001ac4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001ac8:	4d2c      	ldr	r5, [pc, #176]	; (8001b7c <main+0x98c>)
 8001aca:	f8c8 3000 	str.w	r3, [r8]
  while (*p) {
 8001ace:	2145      	movs	r1, #69	; 0x45
    sdPut(&SD2, *p++);
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff fafb 	bl	80010d0 <oqPutTimeout>
  while (*p) {
 8001ada:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001ade:	2900      	cmp	r1, #0
 8001ae0:	d1f6      	bne.n	8001ad0 <main+0x8e0>
                            printn(errors);
 8001ae2:	f9b8 0000 	ldrsh.w	r0, [r8]
 8001ae6:	f7ff fb3b 	bl	8001160 <printn>
                            println("");
 8001aea:	f7ff fb29 	bl	8001140 <println.constprop.0>
 8001aee:	e724      	b.n	800193a <main+0x74a>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8001af0:	f023 030a 	bic.w	r3, r3, #10
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	e66d      	b.n	80017d4 <main+0x5e4>
            errors = i2cGetErrors(&I2CD3);
 8001af8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001afc:	4c20      	ldr	r4, [pc, #128]	; (8001b80 <main+0x990>)
    sdPut(&SD2, *p++);
 8001afe:	4d21      	ldr	r5, [pc, #132]	; (8001b84 <main+0x994>)
            errors = i2cGetErrors(&I2CD3);
 8001b00:	f8c8 3000 	str.w	r3, [r8]
  while (*p) {
 8001b04:	2145      	movs	r1, #69	; 0x45
    sdPut(&SD2, *p++);
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	f7ff fae0 	bl	80010d0 <oqPutTimeout>
  while (*p) {
 8001b10:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001b14:	2900      	cmp	r1, #0
 8001b16:	d1f6      	bne.n	8001b06 <main+0x916>
            printn(errors);
 8001b18:	f9b8 0000 	ldrsh.w	r0, [r8]
 8001b1c:	f7ff fb20 	bl	8001160 <printn>
            println("");
 8001b20:	f7ff fb0e 	bl	8001140 <println.constprop.0>
 8001b24:	e6d3      	b.n	80018ce <main+0x6de>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8001b26:	f043 030a 	orr.w	r3, r3, #10
 8001b2a:	e653      	b.n	80017d4 <main+0x5e4>
 8001b2c:	f023 0308 	bic.w	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	e64d      	b.n	80017d4 <main+0x5e4>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8001b38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  regCCR = 0;
 8001b3c:	461d      	mov	r5, r3
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <main+0x998>)
 8001b40:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b44:	b29b      	uxth	r3, r3
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8001b46:	432b      	orrs	r3, r5
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8001b48:	200a      	movs	r0, #10
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8001b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8001b4e:	6210      	str	r0, [r2, #32]
 8001b50:	e633      	b.n	80017ba <main+0x5ca>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8001b52:	2319      	movs	r3, #25
 8001b54:	fb03 f000 	mul.w	r0, r3, r0
      regCCR |= I2C_CCR_DUTY;
 8001b58:	f44f 4580 	mov.w	r5, #16384	; 0x4000
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <main+0x998>)
 8001b5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b62:	b29b      	uxth	r3, r3
      regCCR |= I2C_CCR_DUTY;
 8001b64:	e7ef      	b.n	8001b46 <main+0x956>
 8001b66:	bf00      	nop
 8001b68:	2000096c 	.word	0x2000096c
 8001b6c:	20000970 	.word	0x20000970
 8001b70:	20000b68 	.word	0x20000b68
 8001b74:	20000b20 	.word	0x20000b20
 8001b78:	00061a80 	.word	0x00061a80
 8001b7c:	0800265c 	.word	0x0800265c
 8001b80:	08002634 	.word	0x08002634
 8001b84:	20000870 	.word	0x20000870
 8001b88:	01e84800 	.word	0x01e84800
 8001b8c:	08002640 	.word	0x08002640

08001b90 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001b90:	3030      	adds	r0, #48	; 0x30
 8001b92:	f7ff ba9d 	b.w	80010d0 <oqPutTimeout>
 8001b96:	bf00      	nop
	...

08001ba0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001ba0:	3030      	adds	r0, #48	; 0x30
 8001ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba6:	f7ff ba93 	b.w	80010d0 <oqPutTimeout>
 8001baa:	bf00      	nop
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8001bba:	69c7      	ldr	r7, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	f04f 0920 	mov.w	r9, #32
 8001bc2:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8001bc6:	f7ff f923 	bl	8000e10 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d031      	beq.n	8001c32 <iqReadTimeout+0x82>
 8001bce:	9d03      	ldr	r5, [sp, #12]
 8001bd0:	460e      	mov	r6, r1
 8001bd2:	f04f 0a00 	mov.w	sl, #0
 8001bd6:	4688      	mov	r8, r1
  if (n > iqGetFullI(iqp)) {
 8001bd8:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001bda:	69a1      	ldr	r1, [r4, #24]
 8001bdc:	6922      	ldr	r2, [r4, #16]
  if (n > iqGetFullI(iqp)) {
 8001bde:	429d      	cmp	r5, r3
    n = iqGetFullI(iqp);
 8001be0:	bf8c      	ite	hi
 8001be2:	68a6      	ldrhi	r6, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8001be4:	462e      	movls	r6, r5
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001be6:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 8001be8:	42b2      	cmp	r2, r6
 8001bea:	d840      	bhi.n	8001c6e <iqReadTimeout+0xbe>
  else if (n > s1) {
 8001bec:	d22b      	bcs.n	8001c46 <iqReadTimeout+0x96>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001bee:	4640      	mov	r0, r8
    s2 = n - s1;
 8001bf0:	eba6 0b02 	sub.w	fp, r6, r2
 8001bf4:	9201      	str	r2, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001bf6:	f7fe fb7f 	bl	80002f8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001bfa:	9a01      	ldr	r2, [sp, #4]
 8001bfc:	68e1      	ldr	r1, [r4, #12]
 8001bfe:	eb08 0002 	add.w	r0, r8, r2
 8001c02:	465a      	mov	r2, fp
 8001c04:	f7fe fb78 	bl	80002f8 <memcpy>
  iqp->q_counter -= n;
 8001c08:	68a3      	ldr	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8001c0a:	68e2      	ldr	r2, [r4, #12]
  iqp->q_counter -= n;
 8001c0c:	1b9b      	subs	r3, r3, r6
    iqp->q_rdptr = iqp->q_buffer + s2;
 8001c0e:	445a      	add	r2, fp
 8001c10:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8001c12:	60a3      	str	r3, [r4, #8]
      if (nfy != NULL) {
 8001c14:	b10f      	cbz	r7, 8001c1a <iqReadTimeout+0x6a>
        nfy(iqp);
 8001c16:	4620      	mov	r0, r4
 8001c18:	47b8      	blx	r7
  _stats_stop_measure_crit_thd();
 8001c1a:	f7ff f8f1 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8001c1e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8001c22:	1bad      	subs	r5, r5, r6
      bp += done;
 8001c24:	44b0      	add	r8, r6
 8001c26:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 8001c2a:	f7ff f8f1 	bl	8000e10 <_stats_start_measure_crit_thd>
  while (n > 0U) {
 8001c2e:	2d00      	cmp	r5, #0
 8001c30:	d1d2      	bne.n	8001bd8 <iqReadTimeout+0x28>
  if (n > iqGetFullI(iqp)) {
 8001c32:	9d03      	ldr	r5, [sp, #12]
  _stats_stop_measure_crit_thd();
 8001c34:	f7ff f8e4 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f383 8811 	msr	BASEPRI, r3
}
 8001c3e:	4628      	mov	r0, r5
 8001c40:	b005      	add	sp, #20
 8001c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001c46:	4632      	mov	r2, r6
 8001c48:	4640      	mov	r0, r8
 8001c4a:	f7fe fb55 	bl	80002f8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8001c4e:	68e3      	ldr	r3, [r4, #12]
 8001c50:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8001c52:	68a3      	ldr	r3, [r4, #8]
 8001c54:	1b9b      	subs	r3, r3, r6
 8001c56:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8001c58:	2e00      	cmp	r6, #0
 8001c5a:	d1db      	bne.n	8001c14 <iqReadTimeout+0x64>
 8001c5c:	9902      	ldr	r1, [sp, #8]
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff f8a6 	bl	8000db0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001c64:	2800      	cmp	r0, #0
 8001c66:	d0b7      	beq.n	8001bd8 <iqReadTimeout+0x28>
 8001c68:	9b03      	ldr	r3, [sp, #12]
 8001c6a:	1b5d      	subs	r5, r3, r5
 8001c6c:	e7e2      	b.n	8001c34 <iqReadTimeout+0x84>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001c6e:	4632      	mov	r2, r6
 8001c70:	4640      	mov	r0, r8
 8001c72:	f7fe fb41 	bl	80002f8 <memcpy>
    iqp->q_rdptr += n;
 8001c76:	69a3      	ldr	r3, [r4, #24]
 8001c78:	4433      	add	r3, r6
 8001c7a:	61a3      	str	r3, [r4, #24]
 8001c7c:	e7e9      	b.n	8001c52 <iqReadTimeout+0xa2>
 8001c7e:	bf00      	nop

08001c80 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001c80:	300c      	adds	r0, #12
 8001c82:	f7ff bf95 	b.w	8001bb0 <iqReadTimeout>
 8001c86:	bf00      	nop
	...

08001c90 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, TIME_INFINITE);
 8001c90:	300c      	adds	r0, #12
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	f7ff bf8b 	b.w	8001bb0 <iqReadTimeout>
 8001c9a:	bf00      	nop
 8001c9c:	0000      	movs	r0, r0
	...

08001ca0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	460f      	mov	r7, r1
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001cac:	f7ff f8b0 	bl	8000e10 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001cb0:	e003      	b.n	8001cba <iqGetTimeout+0x1a>
 8001cb2:	f7ff f87d 	bl	8000db0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001cb6:	1e04      	subs	r4, r0, #0
 8001cb8:	db1c      	blt.n	8001cf4 <iqGetTimeout+0x54>
  while (iqIsEmptyI(iqp)) {
 8001cba:	68ae      	ldr	r6, [r5, #8]
 8001cbc:	4639      	mov	r1, r7
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	2e00      	cmp	r6, #0
 8001cc2:	d0f6      	beq.n	8001cb2 <iqGetTimeout+0x12>
  b = *iqp->q_rdptr++;
 8001cc4:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8001cc6:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001cc8:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8001cca:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001ccc:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001cce:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001cd0:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8001cd2:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001cd4:	bf28      	it	cs
 8001cd6:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001cd8:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001cda:	bf28      	it	cs
 8001cdc:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8001cde:	69eb      	ldr	r3, [r5, #28]
 8001ce0:	b10b      	cbz	r3, 8001ce6 <iqGetTimeout+0x46>
    iqp->q_notify(iqp);
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	4798      	blx	r3
  _stats_stop_measure_crit_thd();
 8001ce6:	f7ff f88b 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8001cea:	2300      	movs	r3, #0
 8001cec:	f383 8811 	msr	BASEPRI, r3
}
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cf4:	f7ff f884 	bl	8000e00 <_stats_stop_measure_crit_thd>
 8001cf8:	f386 8811 	msr	BASEPRI, r6
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d00 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001d00:	300c      	adds	r0, #12
 8001d02:	f7ff bfcd 	b.w	8001ca0 <iqGetTimeout>
 8001d06:	bf00      	nop
	...

08001d10 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001d10:	300c      	adds	r0, #12
 8001d12:	f04f 31ff 	mov.w	r1, #4294967295
 8001d16:	f7ff bfc3 	b.w	8001ca0 <iqGetTimeout>
 8001d1a:	bf00      	nop
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <chThdExit>:
void chThdExit(msg_t msg) {
 8001d20:	b538      	push	{r3, r4, r5, lr}
 8001d22:	4602      	mov	r2, r0
 8001d24:	2320      	movs	r3, #32
 8001d26:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8001d2a:	f7ff f871 	bl	8000e10 <_stats_start_measure_crit_thd>
  thread_t *tp = currp;
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <chThdExit+0x4c>)
 8001d30:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001d32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001d34:	6262      	str	r2, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001d36:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001d3a:	42a8      	cmp	r0, r5
 8001d3c:	d006      	beq.n	8001d4c <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 8001d3e:	6803      	ldr	r3, [r0, #0]
 8001d40:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001d42:	f7fe fcf5 	bl	8000730 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001d46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001d48:	42a8      	cmp	r0, r5
 8001d4a:	d1f8      	bne.n	8001d3e <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 8001d4c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001d50:	b93b      	cbnz	r3, 8001d62 <chThdExit+0x42>
 8001d52:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001d56:	079b      	lsls	r3, r3, #30
 8001d58:	d103      	bne.n	8001d62 <chThdExit+0x42>
    REG_REMOVE(tp);
 8001d5a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001d5e:	6113      	str	r3, [r2, #16]
 8001d60:	615a      	str	r2, [r3, #20]
}
 8001d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8001d66:	200f      	movs	r0, #15
 8001d68:	f7fe bf7a 	b.w	8000c60 <chSchGoSleepS>
 8001d6c:	20000970 	.word	0x20000970

08001d70 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001d70:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8001d72:	4c14      	ldr	r4, [pc, #80]	; (8001dc4 <chSchDoReschedule+0x54>)
  thread_t *tp = tqp->next;
 8001d74:	6821      	ldr	r1, [r4, #0]
 8001d76:	69a5      	ldr	r5, [r4, #24]
  tqp->next             = tp->queue.next;
 8001d78:	680b      	ldr	r3, [r1, #0]
 8001d7a:	6023      	str	r3, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001d7c:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8001d7e:	605c      	str	r4, [r3, #4]
 8001d80:	f881 2020 	strb.w	r2, [r1, #32]
  tp->state = CH_STATE_READY;
 8001d84:	2200      	movs	r2, #0

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8001d86:	68a8      	ldr	r0, [r5, #8]
  tp->state = CH_STATE_READY;
 8001d88:	f885 2020 	strb.w	r2, [r5, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001d8c:	61a1      	str	r1, [r4, #24]
  cp = (thread_t *)&ch.rlist.queue;
 8001d8e:	e000      	b.n	8001d92 <chSchDoReschedule+0x22>
 8001d90:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	4290      	cmp	r0, r2
 8001d96:	d3fb      	bcc.n	8001d90 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8001d98:	6858      	ldr	r0, [r3, #4]
  ch.kernel_stats.n_ctxswc++;
 8001d9a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8001d9e:	6068      	str	r0, [r5, #4]
  tp->queue.next             = cp;
 8001da0:	602b      	str	r3, [r5, #0]
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8001da2:	3148      	adds	r1, #72	; 0x48
  tp->queue.prev->queue.next = tp;
 8001da4:	6005      	str	r5, [r0, #0]
  ch.kernel_stats.n_ctxswc++;
 8001da6:	3201      	adds	r2, #1
  cp->queue.prev             = tp;
 8001da8:	605d      	str	r5, [r3, #4]
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8001daa:	f105 0048 	add.w	r0, r5, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 8001dae:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8001db2:	f7fe fc25 	bl	8000600 <chTMChainMeasurementToX>
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001db6:	69a0      	ldr	r0, [r4, #24]
 8001db8:	4629      	mov	r1, r5
}
 8001dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8001dbe:	f7fe ba7f 	b.w	80002c0 <_port_switch>
 8001dc2:	bf00      	nop
 8001dc4:	20000970 	.word	0x20000970
	...

08001dd0 <__early_init>:
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <__early_init+0x11c>)
  gpiop->OTYPER  = config->otyper;
 8001dd2:	4947      	ldr	r1, [pc, #284]	; (8001ef0 <__early_init+0x120>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001dd4:	6913      	ldr	r3, [r2, #16]
  gpiop->PUPDR   = config->pupdr;
 8001dd6:	f8df c150 	ldr.w	ip, [pc, #336]	; 8001f28 <__early_init+0x158>
  gpiop->OTYPER  = config->otyper;
 8001dda:	4846      	ldr	r0, [pc, #280]	; (8001ef4 <__early_init+0x124>)
void __early_init(void) {
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001dde:	f240 16ff 	movw	r6, #511	; 0x1ff
 8001de2:	4333      	orrs	r3, r6
 8001de4:	6113      	str	r3, [r2, #16]
 8001de6:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001de8:	4d43      	ldr	r5, [pc, #268]	; (8001ef8 <__early_init+0x128>)
  gpiop->AFRL    = config->afrl;
 8001dea:	f8df e140 	ldr.w	lr, [pc, #320]	; 8001f2c <__early_init+0x15c>
  gpiop->OTYPER  = config->otyper;
 8001dee:	4c43      	ldr	r4, [pc, #268]	; (8001efc <__early_init+0x12c>)
 8001df0:	4f43      	ldr	r7, [pc, #268]	; (8001f00 <__early_init+0x130>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001df2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6113      	str	r3, [r2, #16]
 8001dfc:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001dfe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e00:	4333      	orrs	r3, r6
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e06:	4333      	orrs	r3, r6
 8001e08:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8001e0a:	f46f 46a8 	mvn.w	r6, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8001e0e:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001e10:	6d12      	ldr	r2, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001e12:	604b      	str	r3, [r1, #4]
  gpiop->ODR     = config->odr;
 8001e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8001e18:	608e      	str	r6, [r1, #8]
  gpiop->AFRH    = config->afrh;
 8001e1a:	4e3a      	ldr	r6, [pc, #232]	; (8001f04 <__early_init+0x134>)
  gpiop->PUPDR   = config->pupdr;
 8001e1c:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8001e20:	614a      	str	r2, [r1, #20]
  gpiop->MODER   = config->moder;
 8001e22:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8001f30 <__early_init+0x160>
  gpiop->AFRL    = config->afrl;
 8001e26:	f8c1 e020 	str.w	lr, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001e2a:	624e      	str	r6, [r1, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8001e2c:	f44f 7610 	mov.w	r6, #576	; 0x240
  gpiop->MODER   = config->moder;
 8001e30:	f8c1 c000 	str.w	ip, [r1]
  gpiop->OTYPER  = config->otyper;
 8001e34:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001e36:	f04f 31ff 	mov.w	r1, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8001e3a:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8001f34 <__early_init+0x164>
  gpiop->OSPEEDR = config->ospeedr;
 8001e3e:	60a9      	str	r1, [r5, #8]
  gpiop->AFRL    = config->afrl;
 8001e40:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 8001e44:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
 8001e48:	616a      	str	r2, [r5, #20]
  gpiop->AFRH    = config->afrh;
 8001e4a:	f04f 0c40 	mov.w	ip, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 8001e4e:	622e      	str	r6, [r5, #32]
  gpiop->MODER   = config->moder;
 8001e50:	4e2d      	ldr	r6, [pc, #180]	; (8001f08 <__early_init+0x138>)
  gpiop->AFRH    = config->afrh;
 8001e52:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001e56:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 8001e58:	f105 55a2 	add.w	r5, r5, #339738624	; 0x14400000
 8001e5c:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
 8001e60:	f505 75aa 	add.w	r5, r5, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 8001e64:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001e66:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e68:	60e5      	str	r5, [r4, #12]
  gpiop->AFRL    = config->afrl;
 8001e6a:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8001e6e:	6162      	str	r2, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001e70:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001e72:	4d26      	ldr	r5, [pc, #152]	; (8001f0c <__early_init+0x13c>)
 8001e74:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001e76:	4d26      	ldr	r5, [pc, #152]	; (8001f10 <__early_init+0x140>)
 8001e78:	6025      	str	r5, [r4, #0]
  gpiop->PUPDR   = config->pupdr;
 8001e7a:	4c26      	ldr	r4, [pc, #152]	; (8001f14 <__early_init+0x144>)
  gpiop->OTYPER  = config->otyper;
 8001e7c:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001e7e:	6081      	str	r1, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e80:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8001e82:	f640 74ff 	movw	r4, #4095	; 0xfff
 8001e86:	6144      	str	r4, [r0, #20]
  gpiop->MODER   = config->moder;
 8001e88:	4c23      	ldr	r4, [pc, #140]	; (8001f18 <__early_init+0x148>)
  gpiop->AFRL    = config->afrl;
 8001e8a:	6203      	str	r3, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 8001e8c:	4e23      	ldr	r6, [pc, #140]	; (8001f1c <__early_init+0x14c>)
  gpiop->AFRH    = config->afrh;
 8001e8e:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8001e90:	4d23      	ldr	r5, [pc, #140]	; (8001f20 <__early_init+0x150>)
  gpiop->MODER   = config->moder;
 8001e92:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8001e94:	4c23      	ldr	r4, [pc, #140]	; (8001f24 <__early_init+0x154>)
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
  gpiop->OSPEEDR = config->ospeedr;
 8001e9c:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8001e9e:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8001ea0:	617a      	str	r2, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8001ea2:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001ea6:	f8c7 c000 	str.w	ip, [r7]
  gpiop->OTYPER  = config->otyper;
 8001eaa:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001eac:	60b1      	str	r1, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001eae:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8001eb0:	6172      	str	r2, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001eb2:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8001eb4:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001eb6:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8001eb8:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001eba:	60a9      	str	r1, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001ebc:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8001ebe:	616a      	str	r2, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8001ec0:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001ec2:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001ec4:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8001ec6:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001ec8:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001eca:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8001ecc:	6162      	str	r2, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001ece:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001ed0:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001ed2:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8001ed4:	6043      	str	r3, [r0, #4]
}
 8001ed6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  gpiop->OSPEEDR = config->ospeedr;
 8001eda:	6081      	str	r1, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001edc:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 8001ede:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8001ee0:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001ee2:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001ee4:	6003      	str	r3, [r0, #0]
  stm32_clock_init();
 8001ee6:	f7fe be33 	b.w	8000b50 <stm32_clock_init>
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	000aaa00 	.word	0x000aaa00
 8001f08:	00082080 	.word	0x00082080
 8001f0c:	00060600 	.word	0x00060600
 8001f10:	02208001 	.word	0x02208001
 8001f14:	00555055 	.word	0x00555055
 8001f18:	55000100 	.word	0x55000100
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40010054 	.word	0x40010054
 8001f2c:	55560000 	.word	0x55560000
 8001f30:	2aa0aa00 	.word	0x2aa0aa00
 8001f34:	55514515 	.word	0x55514515
	...

08001f40 <Vector110>:
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8001f40:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8001f42:	f7fe fb4d 	bl	80005e0 <_stats_increase_irq>
  serve_interrupt(&SD4);
 8001f46:	4803      	ldr	r0, [pc, #12]	; (8001f54 <Vector110+0x14>)
 8001f48:	f7fe fc42 	bl	80007d0 <serve_interrupt>
}
 8001f4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001f50:	f7fe bb06 	b.w	8000560 <_port_irq_epilogue>
 8001f54:	200008bc 	.word	0x200008bc
	...

08001f60 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001f60:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8001f62:	f7fe fb3d 	bl	80005e0 <_stats_increase_irq>
  serve_interrupt(&SD2);
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <VectorD8+0x14>)
 8001f68:	f7fe fc32 	bl	80007d0 <serve_interrupt>
}
 8001f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001f70:	f7fe baf6 	b.w	8000560 <_port_irq_epilogue>
 8001f74:	20000840 	.word	0x20000840
	...

08001f80 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8001f84:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 8001f88:	f7fe fb2a 	bl	80005e0 <_stats_increase_irq>
  sr  = timp->SR;
 8001f8c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001f8e:	68ea      	ldr	r2, [r5, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8001f94:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001f96:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8001f98:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8001f9a:	d403      	bmi.n	8001fa4 <VectorB0+0x24>
}
 8001f9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001fa0:	f7fe bade 	b.w	8000560 <_port_irq_epilogue>
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8001faa:	4e26      	ldr	r6, [pc, #152]	; (8002044 <VectorB0+0xc4>)
  _stats_start_measure_crit_isr();
 8001fac:	f7fe fb80 	bl	80006b0 <_stats_start_measure_crit_isr>
 8001fb0:	69f4      	ldr	r4, [r6, #28]
 8001fb2:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001fb4:	6ab3      	ldr	r3, [r6, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8001fb6:	68a2      	ldr	r2, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8001fb8:	eba0 0903 	sub.w	r9, r0, r3
 8001fbc:	454a      	cmp	r2, r9
 8001fbe:	f106 0a1c 	add.w	sl, r6, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8001fc2:	bf98      	it	ls
 8001fc4:	2700      	movls	r7, #0
    if (nowdelta < vtp->delta) {
 8001fc6:	d825      	bhi.n	8002014 <VectorB0+0x94>
 8001fc8:	f04f 0820 	mov.w	r8, #32
 8001fcc:	e000      	b.n	8001fd0 <VectorB0+0x50>
 8001fce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001fd0:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 8001fd2:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 8001fd6:	4413      	add	r3, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001fd8:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8001fda:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001fdc:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 8001fe0:	61f1      	str	r1, [r6, #28]
      vtp->func = NULL;
 8001fe2:	60e7      	str	r7, [r4, #12]
  STM32_ST_TIM->DIER = 0U;
 8001fe4:	bf08      	it	eq
 8001fe6:	60ef      	streq	r7, [r5, #12]
      nowdelta -= vtp->delta;
 8001fe8:	eba9 0902 	sub.w	r9, r9, r2
  _stats_stop_measure_crit_isr();
 8001fec:	f7fe fb50 	bl	8000690 <_stats_stop_measure_crit_isr>
 8001ff0:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8001ff4:	6920      	ldr	r0, [r4, #16]
 8001ff6:	47d8      	blx	fp
 8001ff8:	f388 8811 	msr	BASEPRI, r8
  _stats_start_measure_crit_isr();
 8001ffc:	f7fe fb58 	bl	80006b0 <_stats_start_measure_crit_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8002000:	69f4      	ldr	r4, [r6, #28]
    }
    while (vtp->delta <= nowdelta);
 8002002:	68a2      	ldr	r2, [r4, #8]
 8002004:	4591      	cmp	r9, r2
 8002006:	d2e2      	bcs.n	8001fce <VectorB0+0x4e>
  return (systime_t)STM32_ST_TIM->CNT;
 8002008:	6a68      	ldr	r0, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800200a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800200c:	eba0 0903 	sub.w	r9, r0, r3
    if (nowdelta < vtp->delta) {
 8002010:	4591      	cmp	r9, r2
 8002012:	d2d9      	bcs.n	8001fc8 <VectorB0+0x48>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002014:	4554      	cmp	r4, sl
 8002016:	d00b      	beq.n	8002030 <VectorB0+0xb0>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8002018:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.lasttime += nowdelta;
 800201a:	62b0      	str	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800201c:	1a12      	subs	r2, r2, r0
 800201e:	4413      	add	r3, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002020:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8002024:	2b02      	cmp	r3, #2
 8002026:	bf2c      	ite	cs
 8002028:	18c0      	addcs	r0, r0, r3
 800202a:	3002      	addcc	r0, #2
 800202c:	60a3      	str	r3, [r4, #8]
 800202e:	6350      	str	r0, [r2, #52]	; 0x34
  _stats_stop_measure_crit_isr();
 8002030:	f7fe fb2e 	bl	8000690 <_stats_stop_measure_crit_isr>
 8002034:	2300      	movs	r3, #0
 8002036:	f383 8811 	msr	BASEPRI, r3
}
 800203a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 800203e:	f7fe ba8f 	b.w	8000560 <_port_irq_epilogue>
 8002042:	bf00      	nop
 8002044:	20000970 	.word	0x20000970
	...

08002050 <Vector164>:
  uint16_t sr = I2CD3.i2c->SR1;
 8002050:	493b      	ldr	r1, [pc, #236]	; (8002140 <Vector164+0xf0>)
OSAL_IRQ_HANDLER(STM32_I2C3_ERROR_HANDLER) {
 8002052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD3.i2c->SR1;
 8002054:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002056:	695c      	ldr	r4, [r3, #20]
  OSAL_IRQ_PROLOGUE();
 8002058:	f7fe fac2 	bl	80005e0 <_stats_increase_irq>
  I2CD3.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800205c:	e9d1 500c 	ldrd	r5, r0, [r1, #48]	; 0x30
 8002060:	f404 425f 	and.w	r2, r4, #57088	; 0xdf00
  dmaStreamDisable(i2cp->dmatx);
 8002064:	682b      	ldr	r3, [r5, #0]
  I2CD3.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002066:	43d2      	mvns	r2, r2
 8002068:	6142      	str	r2, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f022 021f 	bic.w	r2, r2, #31
 8002070:	601a      	str	r2, [r3, #0]
  uint16_t sr = I2CD3.i2c->SR1;
 8002072:	b2a2      	uxth	r2, r4
  dmaStreamDisable(i2cp->dmatx);
 8002074:	681e      	ldr	r6, [r3, #0]
 8002076:	07f6      	lsls	r6, r6, #31
 8002078:	d4fc      	bmi.n	8002074 <Vector164+0x24>
 800207a:	f895 c009 	ldrb.w	ip, [r5, #9]
  dmaStreamDisable(i2cp->dmarx);
 800207e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8002080:	686f      	ldr	r7, [r5, #4]
  dmaStreamDisable(i2cp->dmarx);
 8002082:	6835      	ldr	r5, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 8002084:	233d      	movs	r3, #61	; 0x3d
 8002086:	fa03 f30c 	lsl.w	r3, r3, ip
 800208a:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800208c:	682b      	ldr	r3, [r5, #0]
 800208e:	f023 031f 	bic.w	r3, r3, #31
 8002092:	602b      	str	r3, [r5, #0]
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	f013 0301 	ands.w	r3, r3, #1
 800209a:	d1fb      	bne.n	8002094 <Vector164+0x44>
 800209c:	7a77      	ldrb	r7, [r6, #9]
 800209e:	6876      	ldr	r6, [r6, #4]
 80020a0:	253d      	movs	r5, #61	; 0x3d
 80020a2:	40bd      	lsls	r5, r7
 80020a4:	6035      	str	r5, [r6, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 80020a6:	05d7      	lsls	r7, r2, #23
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 80020a8:	bf41      	itttt	mi
 80020aa:	6945      	ldrmi	r5, [r0, #20]
 80020ac:	f425 7580 	bicmi.w	r5, r5, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 80020b0:	2301      	movmi	r3, #1
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 80020b2:	6145      	strmi	r5, [r0, #20]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80020b4:	0596      	lsls	r6, r2, #22
    i2cp->errors |= I2C_BUS_ERROR;
 80020b6:	608b      	str	r3, [r1, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80020b8:	bf44      	itt	mi
 80020ba:	f043 0302 	orrmi.w	r3, r3, #2
 80020be:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80020c0:	0555      	lsls	r5, r2, #21
 80020c2:	d50a      	bpl.n	80020da <Vector164+0x8a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80020c4:	6845      	ldr	r5, [r0, #4]
 80020c6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80020ca:	6045      	str	r5, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80020cc:	6805      	ldr	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80020ce:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80020d2:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80020d6:	6005      	str	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80020d8:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80020da:	0517      	lsls	r7, r2, #20
    i2cp->errors |= I2C_OVERRUN;
 80020dc:	bf44      	itt	mi
 80020de:	f043 0308 	orrmi.w	r3, r3, #8
 80020e2:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80020e4:	0456      	lsls	r6, r2, #17
    i2cp->errors |= I2C_TIMEOUT;
 80020e6:	bf44      	itt	mi
 80020e8:	f043 0320 	orrmi.w	r3, r3, #32
 80020ec:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80020ee:	04d5      	lsls	r5, r2, #19
 80020f0:	d51e      	bpl.n	8002130 <Vector164+0xe0>
    i2cp->errors |= I2C_PEC_ERROR;
 80020f2:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80020f6:	0420      	lsls	r0, r4, #16
    i2cp->errors |= I2C_PEC_ERROR;
 80020f8:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80020fa:	d502      	bpl.n	8002102 <Vector164+0xb2>
    i2cp->errors |= I2C_SMB_ALERT;
 80020fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002100:	608b      	str	r3, [r1, #8]
 8002102:	2320      	movs	r3, #32
 8002104:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8002108:	f7fe fad2 	bl	80006b0 <_stats_start_measure_crit_isr>
  if (*trp != NULL) {
 800210c:	69c8      	ldr	r0, [r1, #28]
 800210e:	b130      	cbz	r0, 800211e <Vector164+0xce>
    tp->u.rdymsg = msg;
 8002110:	f06f 0301 	mvn.w	r3, #1
 8002114:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61cb      	str	r3, [r1, #28]
    (void) chSchReadyI(tp);
 800211a:	f7fe fb09 	bl	8000730 <chSchReadyI>
  _stats_stop_measure_crit_isr();
 800211e:	f7fe fab7 	bl	8000690 <_stats_stop_measure_crit_isr>
 8002122:	2300      	movs	r3, #0
 8002124:	f383 8811 	msr	BASEPRI, r3
}
 8002128:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800212c:	f7fe ba18 	b.w	8000560 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002130:	0422      	lsls	r2, r4, #16
 8002132:	d4e3      	bmi.n	80020fc <Vector164+0xac>
  if (i2cp->errors != I2C_NO_ERROR)
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e4      	bne.n	8002102 <Vector164+0xb2>
}
 8002138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800213c:	f7fe ba10 	b.w	8000560 <_port_irq_epilogue>
 8002140:	20000808 	.word	0x20000808
	...

08002150 <Vector160>:
OSAL_IRQ_HANDLER(STM32_I2C3_EVENT_HANDLER) {
 8002150:	b538      	push	{r3, r4, r5, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8002152:	4948      	ldr	r1, [pc, #288]	; (8002274 <Vector160+0x124>)
  OSAL_IRQ_PROLOGUE();
 8002154:	f7fe fa44 	bl	80005e0 <_stats_increase_irq>
  I2C_TypeDef *dp = i2cp->i2c;
 8002158:	6b4c      	ldr	r4, [r1, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800215a:	4a47      	ldr	r2, [pc, #284]	; (8002278 <Vector160+0x128>)
  uint32_t regSR2 = dp->SR2;
 800215c:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800215e:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002160:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002164:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002168:	4293      	cmp	r3, r2
 800216a:	d066      	beq.n	800223a <Vector160+0xea>
 800216c:	d833      	bhi.n	80021d6 <Vector160+0x86>
 800216e:	3a07      	subs	r2, #7
 8002170:	4293      	cmp	r3, r2
 8002172:	d024      	beq.n	80021be <Vector160+0x6e>
 8002174:	3201      	adds	r2, #1
 8002176:	4293      	cmp	r3, r2
 8002178:	d11e      	bne.n	80021b8 <Vector160+0x68>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800217a:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800217c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800217e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8002182:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002184:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800218e:	6862      	ldr	r2, [r4, #4]
 8002190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002194:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d949      	bls.n	8002230 <Vector160+0xe0>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800219c:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 80021a0:	bf18      	it	ne
 80021a2:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 80021a4:	05eb      	lsls	r3, r5, #23
 80021a6:	d503      	bpl.n	80021b0 <Vector160+0x60>
    dp->SR1 &= ~I2C_SR1_BERR;
 80021a8:	6963      	ldr	r3, [r4, #20]
 80021aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ae:	6163      	str	r3, [r4, #20]
}
 80021b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80021b4:	f7fe b9d4 	b.w	8000560 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80021b8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80021bc:	d1ee      	bne.n	800219c <Vector160+0x4c>
    if ((i2cp->addr >> 8) > 0) {
 80021be:	8c0b      	ldrh	r3, [r1, #32]
 80021c0:	0a1a      	lsrs	r2, r3, #8
 80021c2:	d03d      	beq.n	8002240 <Vector160+0xf0>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80021c4:	f002 0206 	and.w	r2, r2, #6
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80021d2:	6123      	str	r3, [r4, #16]
 80021d4:	e7e2      	b.n	800219c <Vector160+0x4c>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80021d6:	4a29      	ldr	r2, [pc, #164]	; (800227c <Vector160+0x12c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d039      	beq.n	8002250 <Vector160+0x100>
 80021dc:	3202      	adds	r2, #2
 80021de:	4293      	cmp	r3, r2
 80021e0:	d1dc      	bne.n	800219c <Vector160+0x4c>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80021e2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    (void)dp->DR; /* clear BTF.*/
 80021e4:	6922      	ldr	r2, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	b142      	cbz	r2, 80021fe <Vector160+0xae>
      i2cp->addr |= 0x01;
 80021ec:	8c0a      	ldrh	r2, [r1, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80021ee:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 80021f0:	f042 0201 	orr.w	r2, r2, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80021f4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 80021f8:	840a      	strh	r2, [r1, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80021fa:	6023      	str	r3, [r4, #0]
 80021fc:	e7d8      	b.n	80021b0 <Vector160+0x60>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80021fe:	6863      	ldr	r3, [r4, #4]
 8002200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002204:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220c:	6023      	str	r3, [r4, #0]
 800220e:	2320      	movs	r3, #32
 8002210:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8002214:	f7fe fa4c 	bl	80006b0 <_stats_start_measure_crit_isr>
  if (*trp != NULL) {
 8002218:	69c8      	ldr	r0, [r1, #28]
 800221a:	b118      	cbz	r0, 8002224 <Vector160+0xd4>
    tp->u.rdymsg = msg;
 800221c:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 800221e:	61ca      	str	r2, [r1, #28]
    (void) chSchReadyI(tp);
 8002220:	f7fe fa86 	bl	8000730 <chSchReadyI>
  _stats_stop_measure_crit_isr();
 8002224:	f7fe fa34 	bl	8000690 <_stats_stop_measure_crit_isr>
 8002228:	2300      	movs	r3, #0
 800222a:	f383 8811 	msr	BASEPRI, r3
 800222e:	e7b5      	b.n	800219c <Vector160+0x4c>
      dp->CR1 &= ~I2C_CR1_ACK;
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002236:	6023      	str	r3, [r4, #0]
 8002238:	e7b0      	b.n	800219c <Vector160+0x4c>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800223a:	8c0b      	ldrh	r3, [r1, #32]
 800223c:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8002240:	6123      	str	r3, [r4, #16]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002242:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8002246:	bf18      	it	ne
 8002248:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 800224a:	05eb      	lsls	r3, r5, #23
 800224c:	d5b0      	bpl.n	80021b0 <Vector160+0x60>
 800224e:	e7ab      	b.n	80021a8 <Vector160+0x58>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002250:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002252:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8002258:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800225a:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6013      	str	r3, [r2, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002264:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8002268:	bf18      	it	ne
 800226a:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 800226c:	05eb      	lsls	r3, r5, #23
 800226e:	d59f      	bpl.n	80021b0 <Vector160+0x60>
 8002270:	e79a      	b.n	80021a8 <Vector160+0x58>
 8002272:	bf00      	nop
 8002274:	20000808 	.word	0x20000808
 8002278:	00030008 	.word	0x00030008
 800227c:	00070082 	.word	0x00070082

08002280 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002280:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002282:	f7fe f9ad 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <Vector158+0x28>)
  if (dma.streams[15].func)
 8002288:	4808      	ldr	r0, [pc, #32]	; (80022ac <Vector158+0x2c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800228a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 800228c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800228e:	0d89      	lsrs	r1, r1, #22
 8002290:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8002294:	058c      	lsls	r4, r1, #22
 8002296:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8002298:	b112      	cbz	r2, 80022a0 <Vector158+0x20>
    dma.streams[15].func(dma.streams[15].param, flags);
 800229a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800229e:	4790      	blx	r2
}
 80022a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80022a4:	f7fe b95c 	b.w	8000560 <_port_irq_epilogue>
 80022a8:	40026400 	.word	0x40026400
 80022ac:	20000ba4 	.word	0x20000ba4

080022b0 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80022b0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80022b2:	f7fe f995 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <Vector154+0x28>)
  if (dma.streams[14].func)
 80022b8:	4808      	ldr	r0, [pc, #32]	; (80022dc <Vector154+0x2c>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80022ba:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 80022bc:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80022be:	0c09      	lsrs	r1, r1, #16
 80022c0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 80022c4:	040c      	lsls	r4, r1, #16
 80022c6:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 80022c8:	b10a      	cbz	r2, 80022ce <Vector154+0x1e>
    dma.streams[14].func(dma.streams[14].param, flags);
 80022ca:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80022cc:	4790      	blx	r2
}
 80022ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80022d2:	f7fe b945 	b.w	8000560 <_port_irq_epilogue>
 80022d6:	bf00      	nop
 80022d8:	40026400 	.word	0x40026400
 80022dc:	20000ba4 	.word	0x20000ba4

080022e0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80022e0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80022e2:	f7fe f97d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <Vector150+0x28>)
  if (dma.streams[13].func)
 80022e8:	4808      	ldr	r0, [pc, #32]	; (800230c <Vector150+0x2c>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80022ea:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 80022ec:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80022ee:	0989      	lsrs	r1, r1, #6
 80022f0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 80022f4:	018c      	lsls	r4, r1, #6
 80022f6:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80022f8:	b10a      	cbz	r2, 80022fe <Vector150+0x1e>
    dma.streams[13].func(dma.streams[13].param, flags);
 80022fa:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80022fc:	4790      	blx	r2
}
 80022fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002302:	f7fe b92d 	b.w	8000560 <_port_irq_epilogue>
 8002306:	bf00      	nop
 8002308:	40026400 	.word	0x40026400
 800230c:	20000ba4 	.word	0x20000ba4

08002310 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002310:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002312:	f7fe f965 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <Vector130+0x24>)
  if (dma.streams[12].func)
 8002318:	4807      	ldr	r0, [pc, #28]	; (8002338 <Vector130+0x28>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800231a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 800231c:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800231e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002322:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8002324:	b10a      	cbz	r2, 800232a <Vector130+0x1a>
    dma.streams[12].func(dma.streams[12].param, flags);
 8002326:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8002328:	4790      	blx	r2
}
 800232a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800232e:	f7fe b917 	b.w	8000560 <_port_irq_epilogue>
 8002332:	bf00      	nop
 8002334:	40026400 	.word	0x40026400
 8002338:	20000ba4 	.word	0x20000ba4
 800233c:	00000000 	.word	0x00000000

08002340 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002340:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002342:	f7fe f94d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <Vector12C+0x28>)
  if (dma.streams[11].func)
 8002348:	4808      	ldr	r0, [pc, #32]	; (800236c <Vector12C+0x2c>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800234a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 800234c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800234e:	0d89      	lsrs	r1, r1, #22
 8002350:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8002354:	058c      	lsls	r4, r1, #22
 8002356:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8002358:	b10a      	cbz	r2, 800235e <Vector12C+0x1e>
    dma.streams[11].func(dma.streams[11].param, flags);
 800235a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800235c:	4790      	blx	r2
}
 800235e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002362:	f7fe b8fd 	b.w	8000560 <_port_irq_epilogue>
 8002366:	bf00      	nop
 8002368:	40026400 	.word	0x40026400
 800236c:	20000ba4 	.word	0x20000ba4

08002370 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002370:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002372:	f7fe f935 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <Vector128+0x28>)
  if (dma.streams[10].func)
 8002378:	4808      	ldr	r0, [pc, #32]	; (800239c <Vector128+0x2c>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800237a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 800237c:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800237e:	0c09      	lsrs	r1, r1, #16
 8002380:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8002384:	040c      	lsls	r4, r1, #16
 8002386:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8002388:	b10a      	cbz	r2, 800238e <Vector128+0x1e>
    dma.streams[10].func(dma.streams[10].param, flags);
 800238a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800238c:	4790      	blx	r2
}
 800238e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002392:	f7fe b8e5 	b.w	8000560 <_port_irq_epilogue>
 8002396:	bf00      	nop
 8002398:	40026400 	.word	0x40026400
 800239c:	20000ba4 	.word	0x20000ba4

080023a0 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80023a0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80023a2:	f7fe f91d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <Vector124+0x28>)
  if (dma.streams[9].func)
 80023a8:	4808      	ldr	r0, [pc, #32]	; (80023cc <Vector124+0x2c>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023aa:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 80023ac:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023ae:	0989      	lsrs	r1, r1, #6
 80023b0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 80023b4:	018c      	lsls	r4, r1, #6
 80023b6:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 80023b8:	b10a      	cbz	r2, 80023be <Vector124+0x1e>
    dma.streams[9].func(dma.streams[9].param, flags);
 80023ba:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80023bc:	4790      	blx	r2
}
 80023be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80023c2:	f7fe b8cd 	b.w	8000560 <_port_irq_epilogue>
 80023c6:	bf00      	nop
 80023c8:	40026400 	.word	0x40026400
 80023cc:	20000ba4 	.word	0x20000ba4

080023d0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80023d0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80023d2:	f7fe f905 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <Vector120+0x24>)
  if (dma.streams[8].func)
 80023d8:	4807      	ldr	r0, [pc, #28]	; (80023f8 <Vector120+0x28>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80023da:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 80023dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80023de:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80023e2:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 80023e4:	b10a      	cbz	r2, 80023ea <Vector120+0x1a>
    dma.streams[8].func(dma.streams[8].param, flags);
 80023e6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80023e8:	4790      	blx	r2
}
 80023ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80023ee:	f7fe b8b7 	b.w	8000560 <_port_irq_epilogue>
 80023f2:	bf00      	nop
 80023f4:	40026400 	.word	0x40026400
 80023f8:	20000ba4 	.word	0x20000ba4
 80023fc:	00000000 	.word	0x00000000

08002400 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002400:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002402:	f7fe f8ed 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <VectorFC+0x28>)
  if (dma.streams[7].func)
 8002408:	4808      	ldr	r0, [pc, #32]	; (800242c <VectorFC+0x2c>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800240a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 800240c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800240e:	0d89      	lsrs	r1, r1, #22
 8002410:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 8002414:	058c      	lsls	r4, r1, #22
 8002416:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8002418:	b10a      	cbz	r2, 800241e <VectorFC+0x1e>
    dma.streams[7].func(dma.streams[7].param, flags);
 800241a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800241c:	4790      	blx	r2
}
 800241e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002422:	f7fe b89d 	b.w	8000560 <_port_irq_epilogue>
 8002426:	bf00      	nop
 8002428:	40026000 	.word	0x40026000
 800242c:	20000ba4 	.word	0x20000ba4

08002430 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002430:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002432:	f7fe f8d5 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <Vector84+0x28>)
  if (dma.streams[6].func)
 8002438:	4808      	ldr	r0, [pc, #32]	; (800245c <Vector84+0x2c>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800243a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 800243c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800243e:	0c09      	lsrs	r1, r1, #16
 8002440:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 8002444:	040c      	lsls	r4, r1, #16
 8002446:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8002448:	b10a      	cbz	r2, 800244e <Vector84+0x1e>
    dma.streams[6].func(dma.streams[6].param, flags);
 800244a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800244c:	4790      	blx	r2
}
 800244e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002452:	f7fe b885 	b.w	8000560 <_port_irq_epilogue>
 8002456:	bf00      	nop
 8002458:	40026000 	.word	0x40026000
 800245c:	20000ba4 	.word	0x20000ba4

08002460 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002460:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002462:	f7fe f8bd 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <Vector80+0x28>)
  if (dma.streams[5].func)
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <Vector80+0x2c>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800246a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 800246c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800246e:	0989      	lsrs	r1, r1, #6
 8002470:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8002474:	018c      	lsls	r4, r1, #6
 8002476:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8002478:	b10a      	cbz	r2, 800247e <Vector80+0x1e>
    dma.streams[5].func(dma.streams[5].param, flags);
 800247a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800247c:	4790      	blx	r2
}
 800247e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002482:	f7fe b86d 	b.w	8000560 <_port_irq_epilogue>
 8002486:	bf00      	nop
 8002488:	40026000 	.word	0x40026000
 800248c:	20000ba4 	.word	0x20000ba4

08002490 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002490:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002492:	f7fe f8a5 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <Vector7C+0x24>)
  if (dma.streams[4].func)
 8002498:	4807      	ldr	r0, [pc, #28]	; (80024b8 <Vector7C+0x28>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800249a:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 800249c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800249e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80024a2:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80024a4:	b10a      	cbz	r2, 80024aa <Vector7C+0x1a>
    dma.streams[4].func(dma.streams[4].param, flags);
 80024a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80024a8:	4790      	blx	r2
}
 80024aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80024ae:	f7fe b857 	b.w	8000560 <_port_irq_epilogue>
 80024b2:	bf00      	nop
 80024b4:	40026000 	.word	0x40026000
 80024b8:	20000ba4 	.word	0x20000ba4
 80024bc:	00000000 	.word	0x00000000

080024c0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80024c0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80024c2:	f7fe f88d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <Vector78+0x28>)
  if (dma.streams[3].func)
 80024c8:	4808      	ldr	r0, [pc, #32]	; (80024ec <Vector78+0x2c>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80024ca:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 80024cc:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80024ce:	0d89      	lsrs	r1, r1, #22
 80024d0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80024d4:	058c      	lsls	r4, r1, #22
 80024d6:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 80024d8:	b10a      	cbz	r2, 80024de <Vector78+0x1e>
    dma.streams[3].func(dma.streams[3].param, flags);
 80024da:	6a00      	ldr	r0, [r0, #32]
 80024dc:	4790      	blx	r2
}
 80024de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80024e2:	f7fe b83d 	b.w	8000560 <_port_irq_epilogue>
 80024e6:	bf00      	nop
 80024e8:	40026000 	.word	0x40026000
 80024ec:	20000ba4 	.word	0x20000ba4

080024f0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80024f0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80024f2:	f7fe f875 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <Vector74+0x28>)
  if (dma.streams[2].func)
 80024f8:	4808      	ldr	r0, [pc, #32]	; (800251c <Vector74+0x2c>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80024fa:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80024fc:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80024fe:	0c09      	lsrs	r1, r1, #16
 8002500:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 8002504:	040c      	lsls	r4, r1, #16
 8002506:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8002508:	b10a      	cbz	r2, 800250e <Vector74+0x1e>
    dma.streams[2].func(dma.streams[2].param, flags);
 800250a:	6980      	ldr	r0, [r0, #24]
 800250c:	4790      	blx	r2
}
 800250e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002512:	f7fe b825 	b.w	8000560 <_port_irq_epilogue>
 8002516:	bf00      	nop
 8002518:	40026000 	.word	0x40026000
 800251c:	20000ba4 	.word	0x20000ba4

08002520 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002520:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002522:	f7fe f85d 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <Vector70+0x28>)
  if (dma.streams[1].func)
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <Vector70+0x2c>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800252a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 800252c:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800252e:	0989      	lsrs	r1, r1, #6
 8002530:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 8002534:	018c      	lsls	r4, r1, #6
 8002536:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8002538:	b10a      	cbz	r2, 800253e <Vector70+0x1e>
    dma.streams[1].func(dma.streams[1].param, flags);
 800253a:	6900      	ldr	r0, [r0, #16]
 800253c:	4790      	blx	r2
}
 800253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002542:	f7fe b80d 	b.w	8000560 <_port_irq_epilogue>
 8002546:	bf00      	nop
 8002548:	40026000 	.word	0x40026000
 800254c:	20000ba4 	.word	0x20000ba4

08002550 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002550:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002552:	f7fe f845 	bl	80005e0 <_stats_increase_irq>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <Vector6C+0x24>)
  if (dma.streams[0].func)
 8002558:	4807      	ldr	r0, [pc, #28]	; (8002578 <Vector6C+0x28>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800255a:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 800255c:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800255e:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002562:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8002564:	b10a      	cbz	r2, 800256a <Vector6C+0x1a>
    dma.streams[0].func(dma.streams[0].param, flags);
 8002566:	6880      	ldr	r0, [r0, #8]
 8002568:	4790      	blx	r2
}
 800256a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800256e:	f7fd bff7 	b.w	8000560 <_port_irq_epilogue>
 8002572:	bf00      	nop
 8002574:	40026000 	.word	0x40026000
 8002578:	20000ba4 	.word	0x20000ba4
 800257c:	00000000 	.word	0x00000000

08002580 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002580:	b4f0      	push	{r4, r5, r6, r7}
 8002582:	4f14      	ldr	r7, [pc, #80]	; (80025d4 <__init_ram_areas+0x54>)
 8002584:	4d14      	ldr	r5, [pc, #80]	; (80025d8 <__init_ram_areas+0x58>)
 8002586:	4815      	ldr	r0, [pc, #84]	; (80025dc <__init_ram_areas+0x5c>)
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <__init_ram_areas+0x60>)
 800258a:	4916      	ldr	r1, [pc, #88]	; (80025e4 <__init_ram_areas+0x64>)
 800258c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002590:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8002592:	4298      	cmp	r0, r3
 8002594:	d911      	bls.n	80025ba <__init_ram_areas+0x3a>
 8002596:	3904      	subs	r1, #4
 8002598:	461a      	mov	r2, r3
      *p = *tp;
 800259a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800259e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 80025a2:	4290      	cmp	r0, r2
 80025a4:	d8f9      	bhi.n	800259a <__init_ram_areas+0x1a>
 80025a6:	1e42      	subs	r2, r0, #1
 80025a8:	1ad2      	subs	r2, r2, r3
 80025aa:	f022 0203 	bic.w	r2, r2, #3
 80025ae:	3204      	adds	r2, #4
 80025b0:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 80025b2:	429d      	cmp	r5, r3
 80025b4:	d903      	bls.n	80025be <__init_ram_areas+0x3e>
      *p = 0;
 80025b6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80025ba:	429d      	cmp	r5, r3
 80025bc:	d8fb      	bhi.n	80025b6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80025be:	4567      	cmp	r7, ip
 80025c0:	d005      	beq.n	80025ce <__init_ram_areas+0x4e>
 80025c2:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 80025c6:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 80025ca:	3710      	adds	r7, #16
 80025cc:	e7e1      	b.n	8002592 <__init_ram_areas+0x12>
#endif
}
 80025ce:	bcf0      	pop	{r4, r5, r6, r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	08002778 	.word	0x08002778
 80025d8:	20000c34 	.word	0x20000c34
 80025dc:	20000c34 	.word	0x20000c34
 80025e0:	20000c34 	.word	0x20000c34
 80025e4:	08002828 	.word	0x08002828
	...

080025f0 <__default_exit>:
  while (true) {
 80025f0:	e7fe      	b.n	80025f0 <__default_exit>
 80025f2:	bf00      	nop
	...

08002600 <__late_init>:
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
	...

08002610 <__core_init>:
}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
