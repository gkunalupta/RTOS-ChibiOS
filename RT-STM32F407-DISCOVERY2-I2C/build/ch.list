
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08001181 	.word	0x08001181
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080033d1 	.word	0x080033d1
 8000070:	08003391 	.word	0x08003391
 8000074:	08003351 	.word	0x08003351
 8000078:	08003311 	.word	0x08003311
 800007c:	080032d1 	.word	0x080032d1
 8000080:	08003291 	.word	0x08003291
 8000084:	08003251 	.word	0x08003251
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08002cb1 	.word	0x08002cb1
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08002c91 	.word	0x08002c91
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	08003211 	.word	0x08003211
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	08002c71 	.word	0x08002c71
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080031d1 	.word	0x080031d1
 8000124:	08003191 	.word	0x08003191
 8000128:	08003151 	.word	0x08003151
 800012c:	08003111 	.word	0x08003111
 8000130:	080030d1 	.word	0x080030d1
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	08003091 	.word	0x08003091
 8000154:	08003051 	.word	0x08003051
 8000158:	08003011 	.word	0x08003011
 800015c:	080002bb 	.word	0x080002bb
 8000160:	08002ed1 	.word	0x08002ed1
 8000164:	08002dc1 	.word	0x08002dc1
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f003 f94c 	bl	80034a0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f002 fbfa 	bl	8002a00 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f003 f8de 	bl	8003410 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f003 f91c 	bl	8003490 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f001 fc6a 	bl	8001b40 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f003 b900 	b.w	8003480 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	08003900 	.word	0x08003900
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000808 	.word	0x20000808
                ldr     r1, =__bss_base__
 80002a0:	20000808 	.word	0x20000808
                ldr     r2, =__bss_end__
 80002a4:	20000c2c 	.word	0x20000c2c
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002d0:	f000 ffa6 	bl	8001220 <_dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002d4:	f000 ff64 	bl	80011a0 <_stats_stop_measure_crit_thd>
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d8:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002da:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002de:	4628      	mov	r0, r5
                blx     r4
 80002e0:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002e2:	2000      	movs	r0, #0
                bl      chThdExit
 80002e4:	f001 fa9c 	bl	8001820 <chThdExit>

080002e8 <_zombies>:
_zombies:       b       _zombies
 80002e8:	e7fe      	b.n	80002e8 <_zombies>

080002ea <_port_switch_from_isr>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch_from_isr
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
 80002ea:	f000 ff61 	bl	80011b0 <_stats_start_measure_crit_thd>
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 80002ee:	f000 ffc7 	bl	8001280 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 80002f2:	f000 ff65 	bl	80011c0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002f6:	f000 ff93 	bl	8001220 <_dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      _stats_stop_measure_crit_thd
 80002fa:	f000 ff51 	bl	80011a0 <_stats_stop_measure_crit_thd>

080002fe <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002fe:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000300:	e7fe      	b.n	8000300 <_port_exit_from_isr+0x2>
	...

08000304 <memcpy>:
 8000304:	4684      	mov	ip, r0
 8000306:	ea41 0300 	orr.w	r3, r1, r0
 800030a:	f013 0303 	ands.w	r3, r3, #3
 800030e:	d16d      	bne.n	80003ec <memcpy+0xe8>
 8000310:	3a40      	subs	r2, #64	; 0x40
 8000312:	d341      	bcc.n	8000398 <memcpy+0x94>
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	3a40      	subs	r2, #64	; 0x40
 8000396:	d2bd      	bcs.n	8000314 <memcpy+0x10>
 8000398:	3230      	adds	r2, #48	; 0x30
 800039a:	d311      	bcc.n	80003c0 <memcpy+0xbc>
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	3a10      	subs	r2, #16
 80003be:	d2ed      	bcs.n	800039c <memcpy+0x98>
 80003c0:	320c      	adds	r2, #12
 80003c2:	d305      	bcc.n	80003d0 <memcpy+0xcc>
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	3a04      	subs	r2, #4
 80003ce:	d2f9      	bcs.n	80003c4 <memcpy+0xc0>
 80003d0:	3204      	adds	r2, #4
 80003d2:	d008      	beq.n	80003e6 <memcpy+0xe2>
 80003d4:	07d2      	lsls	r2, r2, #31
 80003d6:	bf1c      	itt	ne
 80003d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003dc:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e0:	d301      	bcc.n	80003e6 <memcpy+0xe2>
 80003e2:	880b      	ldrh	r3, [r1, #0]
 80003e4:	8003      	strh	r3, [r0, #0]
 80003e6:	4660      	mov	r0, ip
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	2a08      	cmp	r2, #8
 80003ee:	d313      	bcc.n	8000418 <memcpy+0x114>
 80003f0:	078b      	lsls	r3, r1, #30
 80003f2:	d08d      	beq.n	8000310 <memcpy+0xc>
 80003f4:	f010 0303 	ands.w	r3, r0, #3
 80003f8:	d08a      	beq.n	8000310 <memcpy+0xc>
 80003fa:	f1c3 0304 	rsb	r3, r3, #4
 80003fe:	1ad2      	subs	r2, r2, r3
 8000400:	07db      	lsls	r3, r3, #31
 8000402:	bf1c      	itt	ne
 8000404:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000408:	f800 3b01 	strbne.w	r3, [r0], #1
 800040c:	d380      	bcc.n	8000310 <memcpy+0xc>
 800040e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000412:	f820 3b02 	strh.w	r3, [r0], #2
 8000416:	e77b      	b.n	8000310 <memcpy+0xc>
 8000418:	3a04      	subs	r2, #4
 800041a:	d3d9      	bcc.n	80003d0 <memcpy+0xcc>
 800041c:	3a01      	subs	r2, #1
 800041e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000422:	f800 3b01 	strb.w	r3, [r0], #1
 8000426:	d2f9      	bcs.n	800041c <memcpy+0x118>
 8000428:	780b      	ldrb	r3, [r1, #0]
 800042a:	7003      	strb	r3, [r0, #0]
 800042c:	784b      	ldrb	r3, [r1, #1]
 800042e:	7043      	strb	r3, [r0, #1]
 8000430:	788b      	ldrb	r3, [r1, #2]
 8000432:	7083      	strb	r3, [r0, #2]
 8000434:	4660      	mov	r0, ip
 8000436:	4770      	bx	lr
	...

08000440 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify)
 8000440:	b4f0      	push	{r4, r5, r6, r7}
{

  sdp->vmt = &vmt;
 8000442:	4603      	mov	r3, r0
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <sdObjectInit.constprop.0+0x50>)
 8000446:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800044a:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800044c:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800044e:	2710      	movs	r7, #16
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000450:	f100 0674 	add.w	r6, r0, #116	; 0x74
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000454:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000458:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 800045a:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;   // q_top is pointer which points to frst location after buffer, so bp(which is address pointer to
 800045c:	f100 0364 	add.w	r3, r0, #100	; 0x64
  sdp->state = SD_STOP;
 8000460:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000462:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000466:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 800046a:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 800046c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8000470:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8000472:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8000474:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8000476:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 800047a:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 800047c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8000480:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8000484:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8000486:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;// q_buffer will always store the pointer to buffer which will store input data
 8000488:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;   // q_top is pointer which points to frst location after buffer, so bp(which is address pointer to
 800048a:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 800048c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800048e:	4770      	bx	lr
 8000490:	080038d8 	.word	0x080038d8
	...

080004a0 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80004a0:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 80004a2:	4c27      	ldr	r4, [pc, #156]	; (8000540 <dmaStreamAllocI.part.0.constprop.0+0xa0>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80004a4:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 80004a6:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 80004a8:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 80004aa:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 80004ac:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 80004ae:	bf18      	it	ne
 80004b0:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 80004b2:	d001      	beq.n	80004b8 <dmaStreamAllocI.part.0.constprop.0+0x18>
}
 80004b4:	bcf0      	pop	{r4, r5, r6, r7}
 80004b6:	4770      	bx	lr
        rccEnableDMA1(true);
 80004b8:	4d22      	ldr	r5, [pc, #136]	; (8000544 <dmaStreamAllocI.part.0.constprop.0+0xa4>)
      dma.allocated_mask  |= mask;
 80004ba:	4302      	orrs	r2, r0
 80004bc:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 80004be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
      dma.streams[i].param = param;
 80004c0:	4821      	ldr	r0, [pc, #132]	; (8000548 <dmaStreamAllocI.part.0.constprop.0+0xa8>)
      dma.streams[i].func  = func;
 80004c2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
        rccEnableDMA1(true);
 80004c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dma.streams[i].param = param;
 80004ca:	e9c4 1001 	strd	r1, r0, [r4, #4]
        rccEnableDMA1(true);
 80004ce:	632a      	str	r2, [r5, #48]	; 0x30
 80004d0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004d2:	491e      	ldr	r1, [pc, #120]	; (800054c <dmaStreamAllocI.part.0.constprop.0+0xac>)
 80004d4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
        rccEnableDMA1(true);
 80004d8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dmaStreamDisable(dmastp);
 80004dc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
        rccEnableDMA1(true);
 80004e0:	652a      	str	r2, [r5, #80]	; 0x50
 80004e2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80004e4:	6832      	ldr	r2, [r6, #0]
 80004e6:	f022 021f 	bic.w	r2, r2, #31
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004ea:	eb01 0080 	add.w	r0, r1, r0, lsl #2
      dmaStreamDisable(dmastp);
 80004ee:	6032      	str	r2, [r6, #0]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80004f0:	005c      	lsls	r4, r3, #1
      dmaStreamDisable(dmastp);
 80004f2:	6832      	ldr	r2, [r6, #0]
 80004f4:	f012 0201 	ands.w	r2, r2, #1
 80004f8:	d1fb      	bne.n	80004f2 <dmaStreamAllocI.part.0.constprop.0+0x52>
 80004fa:	4423      	add	r3, r4
 80004fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000500:	243d      	movs	r4, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 8000502:	7ad9      	ldrb	r1, [r3, #11]
      dmaStreamDisable(dmastp);
 8000504:	7a5d      	ldrb	r5, [r3, #9]
 8000506:	685f      	ldr	r7, [r3, #4]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000508:	094b      	lsrs	r3, r1, #5
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	40ac      	lsls	r4, r5
 800050e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000512:	f101 4560 	add.w	r5, r1, #3758096384	; 0xe0000000
 8000516:	603c      	str	r4, [r7, #0]
 8000518:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800051c:	2401      	movs	r4, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800051e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000522:	f001 011f 	and.w	r1, r1, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8000526:	6032      	str	r2, [r6, #0]
 8000528:	fa04 f101 	lsl.w	r1, r4, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800052c:	2250      	movs	r2, #80	; 0x50
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800052e:	2421      	movs	r4, #33	; 0x21
 8000530:	6174      	str	r4, [r6, #20]
 8000532:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000536:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800053a:	6019      	str	r1, [r3, #0]
 800053c:	e7ba      	b.n	80004b4 <dmaStreamAllocI.part.0.constprop.0+0x14>
 800053e:	bf00      	nop
 8000540:	20000ba4 	.word	0x20000ba4
 8000544:	40023800 	.word	0x40023800
 8000548:	20000808 	.word	0x20000808
 800054c:	08003774 	.word	0x08003774

08000550 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000550:	4a02      	ldr	r2, [pc, #8]	; (800055c <notify2+0xc>)
 8000552:	68d3      	ldr	r3, [r2, #12]
 8000554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000558:	60d3      	str	r3, [r2, #12]
}
 800055a:	4770      	bx	lr
 800055c:	40004400 	.word	0x40004400

08000560 <notify4>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000560:	4a02      	ldr	r2, [pc, #8]	; (800056c <notify4+0xc>)
 8000562:	68d3      	ldr	r3, [r2, #12]
 8000564:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000568:	60d3      	str	r3, [r2, #12]
}
 800056a:	4770      	bx	lr
 800056c:	40004c00 	.word	0x40004c00

08000570 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000570:	2320      	movs	r3, #32
 8000572:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <_port_irq_epilogue+0x3c>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800057e:	d102      	bne.n	8000586 <_port_irq_epilogue+0x16>
 8000580:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000584:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000586:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 800058a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800058c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000590:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000592:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <_port_irq_epilogue+0x40>)
 8000598:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800059a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800059c:	6889      	ldr	r1, [r1, #8]
 800059e:	6892      	ldr	r2, [r2, #8]
 80005a0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80005a2:	bf8c      	ite	hi
 80005a4:	4a03      	ldrhi	r2, [pc, #12]	; (80005b4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80005a6:	4a04      	ldrls	r2, [pc, #16]	; (80005b8 <_port_irq_epilogue+0x48>)
 80005a8:	619a      	str	r2, [r3, #24]
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	20000968 	.word	0x20000968
 80005b4:	080002eb 	.word	0x080002eb
 80005b8:	080002fe 	.word	0x080002fe
 80005bc:	00000000 	.word	0x00000000

080005c0 <_stats_increase_irq>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80005c0:	2320      	movs	r3, #32
 80005c2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <_stats_increase_irq+0x1c>)
 80005c8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 80005cc:	3301      	adds	r3, #1
 80005ce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80005d2:	2300      	movs	r3, #0
 80005d4:	f383 8811 	msr	BASEPRI, r3
  port_unlock_from_isr();
}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000968 	.word	0x20000968

080005e0 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <chTMChainMeasurementToX+0x38>)
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80005e2:	6842      	ldr	r2, [r0, #4]
 80005e4:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 80005e6:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 80005e8:	608b      	str	r3, [r1, #8]
  tmp->n++;
 80005ea:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80005ee:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80005f2:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 80005f4:	18e4      	adds	r4, r4, r3
 80005f6:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80005fa:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80005fc:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80005fe:	bf88      	it	hi
 8000600:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000602:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000604:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000606:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800060a:	e9c0 3102 	strd	r3, r1, [r0, #8]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 800060e:	bc70      	pop	{r4, r5, r6}
    tmp->best = tmp->last;
 8000610:	bf38      	it	cc
 8000612:	6003      	strcc	r3, [r0, #0]
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000
 800061c:	00000000 	.word	0x00000000

08000620 <chTMStopMeasurementX>:
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <chTMStopMeasurementX+0x3c>)
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <chTMStopMeasurementX+0x40>)
 8000624:	6852      	ldr	r2, [r2, #4]
 8000626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
  tmp->last = (now - tmp->last) - offset;
 800062a:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800062c:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800062e:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000630:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000634:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000636:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000638:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 800063a:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800063c:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800063e:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000640:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000642:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000644:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000648:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 800064a:	bf88      	it	hi
 800064c:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800064e:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000650:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000654:	bf38      	it	cc
 8000656:	6003      	strcc	r3, [r0, #0]
}
 8000658:	bc30      	pop	{r4, r5}
 800065a:	4770      	bx	lr
 800065c:	e0001000 	.word	0xe0001000
 8000660:	20000968 	.word	0x20000968
	...

08000670 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000670:	4801      	ldr	r0, [pc, #4]	; (8000678 <_stats_stop_measure_crit_isr+0x8>)
 8000672:	f7ff bfd5 	b.w	8000620 <chTMStopMeasurementX>
 8000676:	bf00      	nop
 8000678:	20000a28 	.word	0x20000a28
 800067c:	00000000 	.word	0x00000000

08000680 <chTMStartMeasurementX>:
 8000680:	4b01      	ldr	r3, [pc, #4]	; (8000688 <chTMStartMeasurementX+0x8>)
 8000682:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000684:	6083      	str	r3, [r0, #8]
}
 8000686:	4770      	bx	lr
 8000688:	e0001000 	.word	0xe0001000
 800068c:	00000000 	.word	0x00000000

08000690 <_stats_start_measure_crit_isr>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8000690:	4801      	ldr	r0, [pc, #4]	; (8000698 <_stats_start_measure_crit_isr+0x8>)
 8000692:	f7ff bff5 	b.w	8000680 <chTMStartMeasurementX>
 8000696:	bf00      	nop
 8000698:	20000a28 	.word	0x20000a28
 800069c:	00000000 	.word	0x00000000

080006a0 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <chDbgCheckClassS+0x18>)
 80006a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a4:	b91a      	cbnz	r2, 80006ae <chDbgCheckClassS+0xe>
 80006a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	dd00      	ble.n	80006ae <chDbgCheckClassS+0xe>
    chSysHalt("SV#11");
  }
}
 80006ac:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 80006ae:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80006b0:	4a02      	ldr	r2, [pc, #8]	; (80006bc <chDbgCheckClassS+0x1c>)
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Halt hook code, usually empty.*/
  CH_CFG_SYSTEM_HALT_HOOK(reason);

  /* Harmless infinite loop.*/
  while (true) {
 80006b4:	e7fe      	b.n	80006b4 <chDbgCheckClassS+0x14>
 80006b6:	bf00      	nop
 80006b8:	20000968 	.word	0x20000968
 80006bc:	080034a4 	.word	0x080034a4

080006c0 <chDbgCheckClassI>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <chDbgCheckClassI+0x18>)
 80006c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	db03      	blt.n	80006d0 <chDbgCheckClassI+0x10>
 80006c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ca:	2a00      	cmp	r2, #0
 80006cc:	dd00      	ble.n	80006d0 <chDbgCheckClassI+0x10>
}
 80006ce:	4770      	bx	lr
 80006d0:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80006d2:	4a02      	ldr	r2, [pc, #8]	; (80006dc <chDbgCheckClassI+0x1c>)
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80006d6:	e7fe      	b.n	80006d6 <chDbgCheckClassI+0x16>
 80006d8:	20000968 	.word	0x20000968
 80006dc:	080034ac 	.word	0x080034ac

080006e0 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	4615      	mov	r5, r2
  uint8_t *p, *prev;

  chDbgCheckClassI();
 80006e4:	f7ff ffec 	bl	80006c0 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 80006e8:	b179      	cbz	r1, 800070a <chCoreAllocFromTopI+0x2a>
 80006ea:	1e4b      	subs	r3, r1, #1
 80006ec:	400b      	ands	r3, r1
 80006ee:	d10c      	bne.n	800070a <chCoreAllocFromTopI+0x2a>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006f0:	4e09      	ldr	r6, [pc, #36]	; (8000718 <chCoreAllocFromTopI+0x38>)
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006f2:	e9d6 4700 	ldrd	r4, r7, [r6]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006f6:	4249      	negs	r1, r1
 80006f8:	1a38      	subs	r0, r7, r0
 80006fa:	4008      	ands	r0, r1
  prev = p - offset;
 80006fc:	1b45      	subs	r5, r0, r5
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006fe:	42ac      	cmp	r4, r5
 8000700:	d808      	bhi.n	8000714 <chCoreAllocFromTopI+0x34>
 8000702:	42af      	cmp	r7, r5
 8000704:	d306      	bcc.n	8000714 <chCoreAllocFromTopI+0x34>
    return NULL;
  }

  ch_memcore.topmem = prev;
 8000706:	6075      	str	r5, [r6, #4]

  return p;
}
 8000708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800070a:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <chCoreAllocFromTopI+0x3c>)
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <chCoreAllocFromTopI+0x40>)
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000712:	e7fe      	b.n	8000712 <chCoreAllocFromTopI+0x32>
    return NULL;
 8000714:	4618      	mov	r0, r3
}
 8000716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000718:	20000b80 	.word	0x20000b80
 800071c:	20000968 	.word	0x20000968
 8000720:	0800360c 	.word	0x0800360c
	...

08000730 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	f7ff bfd5 	b.w	80006e0 <chCoreAllocFromTopI>
 8000736:	bf00      	nop
	...

08000740 <chSchReadyAheadI>:
thread_t *chSchReadyAheadI(thread_t *tp) {
 8000740:	b508      	push	{r3, lr}
  chDbgCheckClassI();
 8000742:	f7ff ffbd 	bl	80006c0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000746:	b1c0      	cbz	r0, 800077a <chSchReadyAheadI+0x3a>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8000748:	f890 3020 	ldrb.w	r3, [r0, #32]
 800074c:	b183      	cbz	r3, 8000770 <chSchReadyAheadI+0x30>
 800074e:	2b0f      	cmp	r3, #15
 8000750:	d00e      	beq.n	8000770 <chSchReadyAheadI+0x30>
  tp->state = CH_STATE_READY;
 8000752:	2200      	movs	r2, #0
  } while (cp->prio > tp->prio);
 8000754:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <chSchReadyAheadI+0x44>)
  tp->state = CH_STATE_READY;
 8000758:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800075c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 800075e:	689a      	ldr	r2, [r3, #8]
 8000760:	428a      	cmp	r2, r1
 8000762:	d8fb      	bhi.n	800075c <chSchReadyAheadI+0x1c>
  tp->queue.prev             = cp->queue.prev;
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800076a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800076c:	6058      	str	r0, [r3, #4]
}
 800076e:	bd08      	pop	{r3, pc}
 8000770:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <chSchReadyAheadI+0x44>)
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <chSchReadyAheadI+0x48>)
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000778:	e7fe      	b.n	8000778 <chSchReadyAheadI+0x38>
 800077a:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800077c:	4b01      	ldr	r3, [pc, #4]	; (8000784 <chSchReadyAheadI+0x44>)
 800077e:	4a02      	ldr	r2, [pc, #8]	; (8000788 <chSchReadyAheadI+0x48>)
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000782:	e7fe      	b.n	8000782 <chSchReadyAheadI+0x42>
 8000784:	20000968 	.word	0x20000968
 8000788:	080035f8 	.word	0x080035f8
 800078c:	00000000 	.word	0x00000000

08000790 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000790:	b508      	push	{r3, lr}
  chDbgCheckClassI();
 8000792:	f7ff ff95 	bl	80006c0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000796:	b1c0      	cbz	r0, 80007ca <chSchReadyI+0x3a>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8000798:	f890 3020 	ldrb.w	r3, [r0, #32]
 800079c:	b183      	cbz	r3, 80007c0 <chSchReadyI+0x30>
 800079e:	2b0f      	cmp	r3, #15
 80007a0:	d00e      	beq.n	80007c0 <chSchReadyI+0x30>
  tp->state = CH_STATE_READY;
 80007a2:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80007a4:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <chSchReadyI+0x44>)
  tp->state = CH_STATE_READY;
 80007a8:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80007ac:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	428a      	cmp	r2, r1
 80007b2:	d2fb      	bcs.n	80007ac <chSchReadyI+0x1c>
  tp->queue.prev             = cp->queue.prev;
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80007ba:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80007bc:	6058      	str	r0, [r3, #4]
}
 80007be:	bd08      	pop	{r3, pc}
 80007c0:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <chSchReadyI+0x44>)
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <chSchReadyI+0x48>)
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80007c8:	e7fe      	b.n	80007c8 <chSchReadyI+0x38>
 80007ca:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80007cc:	4b01      	ldr	r3, [pc, #4]	; (80007d4 <chSchReadyI+0x44>)
 80007ce:	4a02      	ldr	r2, [pc, #8]	; (80007d8 <chSchReadyI+0x48>)
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80007d2:	e7fe      	b.n	80007d2 <chSchReadyI+0x42>
 80007d4:	20000968 	.word	0x20000968
 80007d8:	080035d4 	.word	0x080035d4
 80007dc:	00000000 	.word	0x00000000

080007e0 <chThdDequeueNextI.constprop.0>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 80007e0:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80007e2:	4298      	cmp	r0, r3
 80007e4:	d010      	beq.n	8000808 <chThdDequeueNextI.constprop.0+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80007ea:	6050      	str	r0, [r2, #4]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 80007ec:	f893 2020 	ldrb.w	r2, [r3, #32]
 80007f0:	2a04      	cmp	r2, #4
 80007f2:	d104      	bne.n	80007fe <chThdDequeueNextI.constprop.0+0x1e>

  tp->u.rdymsg = msg;
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff bfc9 	b.w	8000790 <chSchReadyI>
 80007fe:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <chThdDequeueNextI.constprop.0+0x2c>)
 8000802:	4a03      	ldr	r2, [pc, #12]	; (8000810 <chThdDequeueNextI.constprop.0+0x30>)
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
 8000806:	e7fe      	b.n	8000806 <chThdDequeueNextI.constprop.0+0x26>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000968 	.word	0x20000968
 8000810:	080035a8 	.word	0x080035a8
	...

08000820 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
 8000822:	f7ff ff4d 	bl	80006c0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000826:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000828:	42a0      	cmp	r0, r4
 800082a:	d01a      	beq.n	8000862 <chEvtBroadcastFlagsI+0x42>
 800082c:	4606      	mov	r6, r0
 800082e:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000830:	2700      	movs	r7, #0
    elp->flags |= flags;
 8000832:	68e3      	ldr	r3, [r4, #12]
 8000834:	432b      	orrs	r3, r5
 8000836:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000838:	b115      	cbz	r5, 8000840 <chEvtBroadcastFlagsI+0x20>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 800083a:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 800083c:	421d      	tst	r5, r3
 800083e:	d00d      	beq.n	800085c <chEvtBroadcastFlagsI+0x3c>
      chEvtSignalI(elp->listener, elp->events);
 8000840:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
  chDbgCheckClassI();
 8000844:	f7ff ff3c 	bl	80006c0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000848:	b1d8      	cbz	r0, 8000882 <chEvtBroadcastFlagsI+0x62>
  tp->epending |= events;
 800084a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800084c:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000850:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000852:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000854:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000856:	d005      	beq.n	8000864 <chEvtBroadcastFlagsI+0x44>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000858:	2a0b      	cmp	r2, #11
 800085a:	d00a      	beq.n	8000872 <chEvtBroadcastFlagsI+0x52>
    elp = elp->next;
 800085c:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800085e:	42a6      	cmp	r6, r4
 8000860:	d1e7      	bne.n	8000832 <chEvtBroadcastFlagsI+0x12>
}
 8000862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000864:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000866:	4213      	tst	r3, r2
 8000868:	d0f8      	beq.n	800085c <chEvtBroadcastFlagsI+0x3c>
    tp->u.rdymsg = MSG_OK;
 800086a:	6247      	str	r7, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800086c:	f7ff ff90 	bl	8000790 <chSchReadyI>
 8000870:	e7f4      	b.n	800085c <chEvtBroadcastFlagsI+0x3c>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000872:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000874:	ea32 0303 	bics.w	r3, r2, r3
 8000878:	d1f0      	bne.n	800085c <chEvtBroadcastFlagsI+0x3c>
    tp->u.rdymsg = MSG_OK;
 800087a:	6247      	str	r7, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800087c:	f7ff ff88 	bl	8000790 <chSchReadyI>
 8000880:	e7ec      	b.n	800085c <chEvtBroadcastFlagsI+0x3c>
 8000882:	b672      	cpsid	i
 8000884:	4b01      	ldr	r3, [pc, #4]	; (800088c <chEvtBroadcastFlagsI+0x6c>)
 8000886:	4a02      	ldr	r2, [pc, #8]	; (8000890 <chEvtBroadcastFlagsI+0x70>)
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 800088a:	e7fe      	b.n	800088a <chEvtBroadcastFlagsI+0x6a>
 800088c:	20000968 	.word	0x20000968
 8000890:	08003660 	.word	0x08003660
	...

080008a0 <chThdResumeI>:
  if (*trp != NULL) {
 80008a0:	6803      	ldr	r3, [r0, #0]
 80008a2:	b173      	cbz	r3, 80008c2 <chThdResumeI+0x22>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 80008a4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80008a8:	2a03      	cmp	r2, #3
 80008aa:	d105      	bne.n	80008b8 <chThdResumeI+0x18>
    *trp = NULL;
 80008ac:	2200      	movs	r2, #0
 80008ae:	6002      	str	r2, [r0, #0]
    (void) chSchReadyI(tp);
 80008b0:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 80008b2:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80008b4:	f7ff bf6c 	b.w	8000790 <chSchReadyI>
 80008b8:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80008ba:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <chThdResumeI+0x24>)
 80008bc:	4a02      	ldr	r2, [pc, #8]	; (80008c8 <chThdResumeI+0x28>)
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80008c0:	e7fe      	b.n	80008c0 <chThdResumeI+0x20>
}
 80008c2:	4770      	bx	lr
 80008c4:	20000968 	.word	0x20000968
 80008c8:	080036a4 	.word	0x080036a4
 80008cc:	00000000 	.word	0x00000000

080008d0 <_dbg_check_leave_isr>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80008d0:	2320      	movs	r3, #32
 80008d2:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <_dbg_check_leave_isr+0x24>)
 80008d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008da:	2a00      	cmp	r2, #0
 80008dc:	dd01      	ble.n	80008e2 <_dbg_check_leave_isr+0x12>
 80008de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008e0:	b119      	cbz	r1, 80008ea <_dbg_check_leave_isr+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80008e2:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <_dbg_check_leave_isr+0x28>)
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80008e8:	e7fe      	b.n	80008e8 <_dbg_check_leave_isr+0x18>
  ch.dbg.isr_cnt--;
 80008ea:	3a01      	subs	r2, #1
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80008ee:	f381 8811 	msr	BASEPRI, r1
}
 80008f2:	4770      	bx	lr
 80008f4:	20000968 	.word	0x20000968
 80008f8:	080034b4 	.word	0x080034b4
 80008fc:	00000000 	.word	0x00000000

08000900 <_dbg_check_enter_isr>:
 8000900:	2320      	movs	r3, #32
 8000902:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <_dbg_check_enter_isr+0x24>)
 8000908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800090a:	2a00      	cmp	r2, #0
 800090c:	db01      	blt.n	8000912 <_dbg_check_enter_isr+0x12>
 800090e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000910:	b119      	cbz	r1, 800091a <_dbg_check_enter_isr+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000912:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <_dbg_check_enter_isr+0x28>)
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000918:	e7fe      	b.n	8000918 <_dbg_check_enter_isr+0x18>
  ch.dbg.isr_cnt++;
 800091a:	3201      	adds	r2, #1
 800091c:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800091e:	f381 8811 	msr	BASEPRI, r1
}
 8000922:	4770      	bx	lr
 8000924:	20000968 	.word	0x20000968
 8000928:	080034bc 	.word	0x080034bc
 800092c:	00000000 	.word	0x00000000

08000930 <_dbg_check_unlock_from_isr>:
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <_dbg_check_unlock_from_isr+0x1c>)
 8000932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000934:	2a00      	cmp	r2, #0
 8000936:	dd05      	ble.n	8000944 <_dbg_check_unlock_from_isr+0x14>
 8000938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093a:	2a00      	cmp	r2, #0
 800093c:	dd02      	ble.n	8000944 <_dbg_check_unlock_from_isr+0x14>
  _dbg_leave_lock();
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000942:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000946:	4a02      	ldr	r2, [pc, #8]	; (8000950 <_dbg_check_unlock_from_isr+0x20>)
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 800094a:	e7fe      	b.n	800094a <_dbg_check_unlock_from_isr+0x1a>
 800094c:	20000968 	.word	0x20000968
 8000950:	080034c4 	.word	0x080034c4
	...

08000960 <_dbg_check_lock_from_isr>:
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <_dbg_check_lock_from_isr+0x1c>)
 8000962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000964:	2a00      	cmp	r2, #0
 8000966:	dd01      	ble.n	800096c <_dbg_check_lock_from_isr+0xc>
 8000968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800096a:	b11a      	cbz	r2, 8000974 <_dbg_check_lock_from_isr+0x14>
 800096c:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <_dbg_check_lock_from_isr+0x20>)
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000972:	e7fe      	b.n	8000972 <_dbg_check_lock_from_isr+0x12>
  _dbg_enter_lock();
 8000974:	2201      	movs	r2, #1
 8000976:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000968 	.word	0x20000968
 8000980:	080034cc 	.word	0x080034cc
	...

08000990 <wakeup>:
static void wakeup(void *p) {
 8000990:	b508      	push	{r3, lr}
 8000992:	4601      	mov	r1, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000994:	2320      	movs	r3, #32
 8000996:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 800099a:	f7ff fe79 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800099e:	f7ff ffdf 	bl	8000960 <_dbg_check_lock_from_isr>
  switch (tp->state) {
 80009a2:	f891 3020 	ldrb.w	r3, [r1, #32]
 80009a6:	2b07      	cmp	r3, #7
 80009a8:	d80f      	bhi.n	80009ca <wakeup+0x3a>
 80009aa:	e8df f003 	tbb	[pc, r3]
 80009ae:	0e14      	.short	0x0e14
 80009b0:	040a1c0e 	.word	0x040a1c0e
 80009b4:	0a0e      	.short	0x0a0e
    chSemFastSignalI(tp->u.wtsemp);
 80009b6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 80009b8:	f7ff fe82 	bl	80006c0 <chDbgCheckClassI>

  sp->cnt++;
 80009bc:	6883      	ldr	r3, [r0, #8]
 80009be:	3301      	adds	r3, #1
 80009c0:	6083      	str	r3, [r0, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80009c2:	e9d1 3200 	ldrd	r3, r2, [r1]
 80009c6:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80009c8:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	624b      	str	r3, [r1, #36]	; 0x24
  (void) chSchReadyI(tp);
 80009d0:	4608      	mov	r0, r1
 80009d2:	f7ff fedd 	bl	8000790 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80009d6:	f7ff ffab 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80009da:	f7ff fe49 	bl	8000670 <_stats_stop_measure_crit_isr>
 80009de:	2300      	movs	r3, #0
 80009e0:	f383 8811 	msr	BASEPRI, r3
}
 80009e4:	bd08      	pop	{r3, pc}
    *tp->u.wttrp = NULL;
 80009e6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
    break;
 80009ec:	e7ed      	b.n	80009ca <wakeup+0x3a>
 80009ee:	bf00      	nop

080009f0 <_idle_thread>:
}
 80009f0:	e7fe      	b.n	80009f0 <_idle_thread>
 80009f2:	bf00      	nop
	...

08000a00 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 8000a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8000a04:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000a06:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8000a0a:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8000a0c:	05df      	lsls	r7, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 8000a0e:	4605      	mov	r5, r0
  uint16_t sr = u->SR;
 8000a10:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8000a12:	d479      	bmi.n	8000b08 <serve_interrupt+0x108>
 8000a14:	2320      	movs	r3, #32
 8000a16:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000a1a:	f7ff fe39 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8000a1e:	f7ff ff9f 	bl	8000960 <_dbg_check_lock_from_isr>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000a22:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000a26:	d049      	beq.n	8000abc <serve_interrupt+0xbc>
  chnAddFlagsI(sdp, sts);
 8000a28:	1d2f      	adds	r7, r5, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000a2a:	f105 090c 	add.w	r9, r5, #12
 8000a2e:	e008      	b.n	8000a42 <serve_interrupt+0x42>
    if (sr & USART_SR_RXNE)
 8000a30:	06a3      	lsls	r3, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000a32:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000a36:	d41e      	bmi.n	8000a76 <serve_interrupt+0x76>
    sr = u->SR;
 8000a38:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000a3a:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8000a3e:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000a40:	d03c      	beq.n	8000abc <serve_interrupt+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000a42:	0720      	lsls	r0, r4, #28
 8000a44:	d0f4      	beq.n	8000a30 <serve_interrupt+0x30>
    sts |= SD_OVERRUN_ERROR;
 8000a46:	f014 0f08 	tst.w	r4, #8
 8000a4a:	bf0c      	ite	eq
 8000a4c:	2100      	moveq	r1, #0
 8000a4e:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000a50:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8000a52:	bf48      	it	mi
 8000a54:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000a58:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000a5a:	bf48      	it	mi
 8000a5c:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000a60:	0760      	lsls	r0, r4, #29
    sts |= SD_NOISE_ERROR;
 8000a62:	bf48      	it	mi
 8000a64:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000a68:	4638      	mov	r0, r7
 8000a6a:	f7ff fed9 	bl	8000820 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8000a6e:	06a3      	lsls	r3, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000a70:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000a74:	d5e0      	bpl.n	8000a38 <serve_interrupt+0x38>
  osalDbgCheckClassI();
 8000a76:	f7ff fe23 	bl	80006c0 <chDbgCheckClassI>
  if (iqIsEmptyI(&sdp->iqueue))
 8000a7a:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000a7c:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8000a80:	b37b      	cbz	r3, 8000ae2 <serve_interrupt+0xe2>
  osalDbgCheckClassI();
 8000a82:	f7ff fe1d 	bl	80006c0 <chDbgCheckClassI>
  if (!iqIsFullI(iqp)) {
 8000a86:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d033      	beq.n	8000af6 <serve_interrupt+0xf6>
    iqp->q_counter++;
 8000a8e:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8000a90:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8000a92:	3201      	adds	r2, #1
 8000a94:	ea04 0a0a 	and.w	sl, r4, sl
 8000a98:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8000a9a:	6229      	str	r1, [r5, #32]
 8000a9c:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) // if buffer has become full.
 8000aa0:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d301      	bcc.n	8000aac <serve_interrupt+0xac>
      iqp->q_wrptr = iqp->q_buffer;
 8000aa8:	69ab      	ldr	r3, [r5, #24]
 8000aaa:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 8000aac:	4648      	mov	r0, r9
 8000aae:	f7ff fe97 	bl	80007e0 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8000ab2:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000ab4:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8000ab8:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000aba:	d1c2      	bne.n	8000a42 <serve_interrupt+0x42>
  _dbg_check_unlock_from_isr();
 8000abc:	f7ff ff38 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8000ac0:	f7ff fdd6 	bl	8000670 <_stats_stop_measure_crit_isr>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000aca:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000ace:	d001      	beq.n	8000ad4 <serve_interrupt+0xd4>
 8000ad0:	0621      	lsls	r1, r4, #24
 8000ad2:	d430      	bmi.n	8000b36 <serve_interrupt+0x136>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8000ad4:	f018 0f40 	tst.w	r8, #64	; 0x40
 8000ad8:	d001      	beq.n	8000ade <serve_interrupt+0xde>
 8000ada:	0662      	lsls	r2, r4, #25
 8000adc:	d453      	bmi.n	8000b86 <serve_interrupt+0x186>
}
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4638      	mov	r0, r7
 8000ae6:	f7ff fe9b 	bl	8000820 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
 8000aea:	f7ff fde9 	bl	80006c0 <chDbgCheckClassI>
  if (!iqIsFullI(iqp)) {
 8000aee:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d1cb      	bne.n	8000a8e <serve_interrupt+0x8e>
 8000af6:	696a      	ldr	r2, [r5, #20]
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d0c8      	beq.n	8000a8e <serve_interrupt+0x8e>
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	4638      	mov	r0, r7
 8000b02:	f7ff fe8d 	bl	8000820 <chEvtBroadcastFlagsI>
 8000b06:	e797      	b.n	8000a38 <serve_interrupt+0x38>
 8000b08:	2320      	movs	r3, #32
 8000b0a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000b0e:	f7ff fdbf 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8000b12:	f7ff ff25 	bl	8000960 <_dbg_check_lock_from_isr>
 8000b16:	1d28      	adds	r0, r5, #4
 8000b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1c:	f7ff fe80 	bl	8000820 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8000b20:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000b24:	6033      	str	r3, [r6, #0]
  _dbg_check_unlock_from_isr();
 8000b26:	f7ff ff03 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8000b2a:	f7ff fda1 	bl	8000670 <_stats_stop_measure_crit_isr>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f383 8811 	msr	BASEPRI, r3
 8000b34:	e76e      	b.n	8000a14 <serve_interrupt+0x14>
 8000b36:	2320      	movs	r3, #32
 8000b38:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000b3c:	f7ff fda8 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8000b40:	f7ff ff0e 	bl	8000960 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();
 8000b44:	f7ff fdbc 	bl	80006c0 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000b48:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d02e      	beq.n	8000bae <serve_interrupt+0x1ae>
    uint8_t b;

    oqp->q_counter++;
 8000b50:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8000b52:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8000b54:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8000b56:	3201      	adds	r2, #1
 8000b58:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8000b5a:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8000b5c:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8000b5e:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000b60:	d301      	bcc.n	8000b66 <serve_interrupt+0x166>
      oqp->q_rdptr = oqp->q_buffer;
 8000b62:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000b64:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8000b66:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000b6a:	f7ff fe39 	bl	80007e0 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 8000b6e:	6077      	str	r7, [r6, #4]
  _dbg_check_unlock_from_isr();
 8000b70:	f7ff fede 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8000b74:	f7ff fd7c 	bl	8000670 <_stats_stop_measure_crit_isr>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8000b7e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8000b82:	d0ac      	beq.n	8000ade <serve_interrupt+0xde>
 8000b84:	e7a9      	b.n	8000ada <serve_interrupt+0xda>
 8000b86:	2320      	movs	r3, #32
 8000b88:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000b8c:	f7ff fd80 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8000b90:	f7ff fee6 	bl	8000960 <_dbg_check_lock_from_isr>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000b94:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d015      	beq.n	8000bc8 <serve_interrupt+0x1c8>
  _dbg_check_unlock_from_isr();
 8000b9c:	f7ff fec8 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8000ba0:	f7ff fd66 	bl	8000670 <_stats_stop_measure_crit_isr>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f383 8811 	msr	BASEPRI, r3
}
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!oqIsEmptyI(oqp)) {
 8000bae:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d0cd      	beq.n	8000b50 <serve_interrupt+0x150>
  chEvtBroadcastFlagsI(esp, flags);
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	1d28      	adds	r0, r5, #4
 8000bb8:	f7ff fe32 	bl	8000820 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8000bbc:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000bc0:	ea08 0303 	and.w	r3, r8, r3
 8000bc4:	60f3      	str	r3, [r6, #12]
 8000bc6:	e7d3      	b.n	8000b70 <serve_interrupt+0x170>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000bc8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0e6      	beq.n	8000b9c <serve_interrupt+0x19c>
 8000bce:	1d28      	adds	r0, r5, #4
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	f7ff fe25 	bl	8000820 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000bd6:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000bda:	ea08 0303 	and.w	r3, r8, r3
 8000bde:	60f3      	str	r3, [r6, #12]
 8000be0:	e7dc      	b.n	8000b9c <serve_interrupt+0x19c>
 8000be2:	bf00      	nop
	...

08000bf0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000bf0:	f011 0f0c 	tst.w	r1, #12
 8000bf4:	d115      	bne.n	8000c22 <i2c_lld_serve_tx_end_irq+0x32>
  I2C_TypeDef *dp = i2cp->i2c;
 8000bf6:	e9d0 100c 	ldrd	r1, r0, [r0, #48]	; 0x30
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8000bfa:	680a      	ldr	r2, [r1, #0]
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	f023 031f 	bic.w	r3, r3, #31
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000c02:	b410      	push	{r4}
  dmaStreamDisable(i2cp->dmatx);
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	07db      	lsls	r3, r3, #31
 8000c0a:	d4fc      	bmi.n	8000c06 <i2c_lld_serve_tx_end_irq+0x16>
 8000c0c:	7a4c      	ldrb	r4, [r1, #9]
 8000c0e:	684a      	ldr	r2, [r1, #4]
 8000c10:	233d      	movs	r3, #61	; 0x3d
 8000c12:	40a3      	lsls	r3, r4
 8000c14:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000c16:	6843      	ldr	r3, [r0, #4]
}
 8000c18:	bc10      	pop	{r4}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6043      	str	r3, [r0, #4]
}
 8000c20:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8000c22:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000c24:	4b01      	ldr	r3, [pc, #4]	; (8000c2c <i2c_lld_serve_tx_end_irq+0x3c>)
 8000c26:	4a02      	ldr	r2, [pc, #8]	; (8000c30 <i2c_lld_serve_tx_end_irq+0x40>)
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000c2a:	e7fe      	b.n	8000c2a <i2c_lld_serve_tx_end_irq+0x3a>
 8000c2c:	20000968 	.word	0x20000968
 8000c30:	080034d4 	.word	0x080034d4
	...

08000c40 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000c40:	f011 0f0c 	tst.w	r1, #12
 8000c44:	d130      	bne.n	8000ca8 <i2c_lld_serve_rx_end_irq+0x68>
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000c46:	b570      	push	{r4, r5, r6, lr}
 8000c48:	4605      	mov	r5, r0
  dmaStreamDisable(i2cp->dmarx);
 8000c4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  I2C_TypeDef *dp = i2cp->i2c;
 8000c4c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 8000c4e:	6803      	ldr	r3, [r0, #0]
 8000c50:	6819      	ldr	r1, [r3, #0]
 8000c52:	f021 011f 	bic.w	r1, r1, #31
 8000c56:	6019      	str	r1, [r3, #0]
 8000c58:	681c      	ldr	r4, [r3, #0]
 8000c5a:	f014 0401 	ands.w	r4, r4, #1
 8000c5e:	d1fb      	bne.n	8000c58 <i2c_lld_serve_rx_end_irq+0x18>
 8000c60:	7a46      	ldrb	r6, [r0, #9]
 8000c62:	6841      	ldr	r1, [r0, #4]
 8000c64:	233d      	movs	r3, #61	; 0x3d
 8000c66:	40b3      	lsls	r3, r6
 8000c68:	600b      	str	r3, [r1, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 8000c6a:	6853      	ldr	r3, [r2, #4]
 8000c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c70:	6053      	str	r3, [r2, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c78:	6013      	str	r3, [r2, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8000c7a:	6813      	ldr	r3, [r2, #0]
 8000c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c80:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c82:	2320      	movs	r3, #32
 8000c84:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8000c88:	f7ff fd02 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8000c8c:	f7ff fe68 	bl	8000960 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 8000c90:	4621      	mov	r1, r4
 8000c92:	f105 001c 	add.w	r0, r5, #28
 8000c96:	f7ff fe03 	bl	80008a0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8000c9a:	f7ff fe49 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8000c9e:	f7ff fce7 	bl	8000670 <_stats_stop_measure_crit_isr>
 8000ca2:	f384 8811 	msr	BASEPRI, r4
}
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000caa:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <i2c_lld_serve_rx_end_irq+0x74>)
 8000cac:	4a02      	ldr	r2, [pc, #8]	; (8000cb8 <i2c_lld_serve_rx_end_irq+0x78>)
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000cb0:	e7fe      	b.n	8000cb0 <i2c_lld_serve_rx_end_irq+0x70>
 8000cb2:	bf00      	nop
 8000cb4:	20000968 	.word	0x20000968
 8000cb8:	080034d4 	.word	0x080034d4
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8000cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000cc4:	f002 0803 	and.w	r8, r2, #3
 8000cc8:	4647      	mov	r7, r8
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000cca:	f3c2 0680 	ubfx	r6, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000cce:	f3c2 05c1 	ubfx	r5, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000cd2:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  uint32_t bit     = 0;
 8000cd6:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000cd8:	f04f 0b0f 	mov.w	fp, #15
      m1 = 1 << bit;
 8000cdc:	f04f 0a01 	mov.w	sl, #1
 8000ce0:	e013      	b.n	8000d0a <_pal_lld_setgroupmode+0x4a>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000ce2:	f8d0 9000 	ldr.w	r9, [r0]
 8000ce6:	ea03 0309 	and.w	r3, r3, r9
 8000cea:	433b      	orrs	r3, r7
        if (bit < 8)
 8000cec:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000cee:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000cf0:	d841      	bhi.n	8000d76 <_pal_lld_setgroupmode+0xb6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000cf2:	6a03      	ldr	r3, [r0, #32]
 8000cf4:	ea23 0202 	bic.w	r2, r3, r2
 8000cf8:	ea42 020e 	orr.w	r2, r2, lr
 8000cfc:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000cfe:	0849      	lsrs	r1, r1, #1
 8000d00:	d037      	beq.n	8000d72 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
 8000d02:	0076      	lsls	r6, r6, #1
    ospeedr <<= 2;
 8000d04:	00ad      	lsls	r5, r5, #2
    pupdr <<= 2;
    moder <<= 2;
 8000d06:	00bf      	lsls	r7, r7, #2
    bit++;
 8000d08:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 8000d0a:	07cb      	lsls	r3, r1, #31
 8000d0c:	d5f7      	bpl.n	8000cfe <_pal_lld_setgroupmode+0x3e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000d0e:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000d10:	fa0a f204 	lsl.w	r2, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000d14:	ea23 0302 	bic.w	r3, r3, r2
 8000d18:	4333      	orrs	r3, r6
 8000d1a:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000d1c:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 8000d1e:	f04f 0e03 	mov.w	lr, #3
 8000d22:	0063      	lsls	r3, r4, #1
 8000d24:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000d28:	ea22 0203 	bic.w	r2, r2, r3
 8000d2c:	432a      	orrs	r2, r5
 8000d2e:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000d30:	f8d0 e00c 	ldr.w	lr, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000d34:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000d38:	ea2e 0e03 	bic.w	lr, lr, r3
      altrmask = altr << ((bit & 7) * 4);
 8000d3c:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000d3e:	f1b8 0f02 	cmp.w	r8, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000d42:	f8c0 e00c 	str.w	lr, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000d46:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000d4a:	fa0c fe02 	lsl.w	lr, ip, r2
      m4 = 15 << ((bit & 7) * 4);
 8000d4e:	fa0b f202 	lsl.w	r2, fp, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000d52:	d1c6      	bne.n	8000ce2 <_pal_lld_setgroupmode+0x22>
        if (bit < 8)
 8000d54:	2c07      	cmp	r4, #7
 8000d56:	d815      	bhi.n	8000d84 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000d58:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8000d5c:	ea29 0202 	bic.w	r2, r9, r2
 8000d60:	ea42 020e 	orr.w	r2, r2, lr
 8000d64:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000d66:	6802      	ldr	r2, [r0, #0]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	433b      	orrs	r3, r7
    if (!mask)
 8000d6c:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000d6e:	6003      	str	r3, [r0, #0]
    if (!mask)
 8000d70:	d1c7      	bne.n	8000d02 <_pal_lld_setgroupmode+0x42>
  }
}
 8000d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000d76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d78:	ea23 0202 	bic.w	r2, r3, r2
 8000d7c:	ea42 020e 	orr.w	r2, r2, lr
 8000d80:	6242      	str	r2, [r0, #36]	; 0x24
 8000d82:	e7bc      	b.n	8000cfe <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000d84:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 8000d88:	ea29 0202 	bic.w	r2, r9, r2
 8000d8c:	ea42 020e 	orr.w	r2, r2, lr
 8000d90:	6242      	str	r2, [r0, #36]	; 0x24
 8000d92:	e7e8      	b.n	8000d66 <_pal_lld_setgroupmode+0xa6>
	...

08000da0 <dmaStreamFreeI>:
 *
 * @iclass
 */
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {

  osalDbgCheck(dmastp != NULL);
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d03a      	beq.n	8000e1a <dmaStreamFreeI+0x7a>
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 8000da4:	b470      	push	{r4, r5, r6}

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.allocated_mask & (1U << dmastp->selfindex)) != 0U,
 8000da6:	4d1f      	ldr	r5, [pc, #124]	; (8000e24 <dmaStreamFreeI+0x84>)
 8000da8:	7a83      	ldrb	r3, [r0, #10]
 8000daa:	682c      	ldr	r4, [r5, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	421c      	tst	r4, r3
 8000db4:	d02c      	beq.n	8000e10 <dmaStreamFreeI+0x70>
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 8000db6:	7ac2      	ldrb	r2, [r0, #11]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8000db8:	4e1b      	ldr	r6, [pc, #108]	; (8000e28 <dmaStreamFreeI+0x88>)
 8000dba:	0950      	lsrs	r0, r2, #5

  /* Marks the stream as not allocated.*/
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8000dbc:	ea24 0303 	bic.w	r3, r4, r3
 8000dc0:	3020      	adds	r0, #32
 8000dc2:	f002 041f 	and.w	r4, r2, #31
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8000dc6:	4432      	add	r2, r6
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8000dc8:	40a1      	lsls	r1, r4

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8000dca:	f013 0fff 	tst.w	r3, #255	; 0xff
  NVIC->IP[n] = 0U;
 8000dce:	f04f 0400 	mov.w	r4, #0
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8000dd2:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
  NVIC->IP[n] = 0U;
 8000dd6:	f882 4300 	strb.w	r4, [r2, #768]	; 0x300
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8000dda:	602b      	str	r3, [r5, #0]
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8000ddc:	d109      	bne.n	8000df2 <dmaStreamFreeI+0x52>
    rccDisableDMA1();
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <dmaStreamFreeI+0x8c>)
 8000de0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000de2:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8000de6:	6311      	str	r1, [r2, #48]	; 0x30
 8000de8:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000dea:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8000dee:	6511      	str	r1, [r2, #80]	; 0x50
 8000df0:	6d12      	ldr	r2, [r2, #80]	; 0x50
  }
  if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8000df2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000df6:	d109      	bne.n	8000e0c <dmaStreamFreeI+0x6c>
    rccDisableDMA2();
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <dmaStreamFreeI+0x8c>)
 8000dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
 8000e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e04:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000e08:	651a      	str	r2, [r3, #80]	; 0x50
 8000e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  /* Shutting down DMAMUX if present.*/
  if (dma.allocated_mask == 0U) {
    rccDisableDMAMUX();
  }
#endif
}
 8000e0c:	bc70      	pop	{r4, r5, r6}
 8000e0e:	4770      	bx	lr
 8000e10:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <dmaStreamFreeI+0x90>)
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <dmaStreamFreeI+0x94>)
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000e18:	e7fe      	b.n	8000e18 <dmaStreamFreeI+0x78>
 8000e1a:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <dmaStreamFreeI+0x90>)
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <dmaStreamFreeI+0x94>)
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000e22:	e7fe      	b.n	8000e22 <dmaStreamFreeI+0x82>
 8000e24:	20000ba4 	.word	0x20000ba4
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	20000968 	.word	0x20000968
 8000e34:	08003744 	.word	0x08003744
	...

08000e40 <_ctl>:
  osalDbgCheck(sdp != NULL);
 8000e40:	b180      	cbz	r0, 8000e64 <_ctl+0x24>
  switch (operation) {
 8000e42:	b151      	cbz	r1, 8000e5a <_ctl+0x1a>
 8000e44:	2901      	cmp	r1, #1
 8000e46:	d001      	beq.n	8000e4c <_ctl+0xc>
}
 8000e48:	2000      	movs	r0, #0
 8000e4a:	4770      	bx	lr
    osalDbgCheck(arg == NULL);
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d0fb      	beq.n	8000e48 <_ctl+0x8>
 8000e50:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_ctl+0x30>)
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <_ctl+0x34>)
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000e58:	e7fe      	b.n	8000e58 <_ctl+0x18>
 8000e5a:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <_ctl+0x30>)
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_ctl+0x34>)
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000e62:	e7fe      	b.n	8000e62 <_ctl+0x22>
 8000e64:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000e66:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <_ctl+0x30>)
 8000e68:	4a02      	ldr	r2, [pc, #8]	; (8000e74 <_ctl+0x34>)
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000e6c:	e7fe      	b.n	8000e6c <_ctl+0x2c>
 8000e6e:	bf00      	nop
 8000e70:	20000968 	.word	0x20000968
 8000e74:	08003724 	.word	0x08003724
	...

08000e80 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e84:	68da      	ldr	r2, [r3, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000e86:	0792      	lsls	r2, r2, #30
 8000e88:	d501      	bpl.n	8000e8e <stSetAlarm+0xe>
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000e8a:	6358      	str	r0, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 8000e8c:	4770      	bx	lr
 8000e8e:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000e90:	4b01      	ldr	r3, [pc, #4]	; (8000e98 <stSetAlarm+0x18>)
 8000e92:	4a02      	ldr	r2, [pc, #8]	; (8000e9c <stSetAlarm+0x1c>)
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8000e96:	e7fe      	b.n	8000e96 <stSetAlarm+0x16>
 8000e98:	20000968 	.word	0x20000968
 8000e9c:	080036e0 	.word	0x080036e0

08000ea0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000ea0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000ea2:	4c14      	ldr	r4, [pc, #80]	; (8000ef4 <chSchGoSleepS+0x54>)
  chDbgCheckClassS();
 8000ea4:	f7ff fbfc 	bl	80006a0 <chDbgCheckClassS>
  thread_t *otp = currp;
 8000ea8:	69a5      	ldr	r5, [r4, #24]
  thread_t *tp = tqp->next;
 8000eaa:	6821      	ldr	r1, [r4, #0]
  otp->state = newstate;
 8000eac:	f885 0020 	strb.w	r0, [r5, #32]
  tqp->next             = tp->queue.next;
 8000eb0:	680b      	ldr	r3, [r1, #0]
 8000eb2:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8000eb4:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000eb6:	605c      	str	r4, [r3, #4]
 8000eb8:	f881 2020 	strb.w	r2, [r1, #32]
  ch.kernel_stats.n_ctxswc++;
 8000ebc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000ec0:	61a1      	str	r1, [r4, #24]
 8000ec2:	4413      	add	r3, r2
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000ec4:	3148      	adds	r1, #72	; 0x48
 8000ec6:	f105 0048 	add.w	r0, r5, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 8000eca:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8000ece:	f7ff fb87 	bl	80005e0 <chTMChainMeasurementToX>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000ed2:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 8000ed6:	69ea      	ldr	r2, [r5, #28]
 8000ed8:	3b24      	subs	r3, #36	; 0x24
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d805      	bhi.n	8000eea <chSchGoSleepS+0x4a>
 8000ede:	69a0      	ldr	r0, [r4, #24]
 8000ee0:	4629      	mov	r1, r5
}
 8000ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8000ee6:	f7ff b9eb 	b.w	80002c0 <_port_switch>
  __ASM volatile ("cpsid i" : : : "memory");
 8000eea:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <chSchGoSleepS+0x58>)
 8000eee:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 8000ef0:	e7fe      	b.n	8000ef0 <chSchGoSleepS+0x50>
 8000ef2:	bf00      	nop
 8000ef4:	20000968 	.word	0x20000968
 8000ef8:	080034e0 	.word	0x080034e0
 8000efc:	00000000 	.word	0x00000000

08000f00 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	4604      	mov	r4, r0
  thread_t *ctp = currp;

  chDbgCheckClassS();
 8000f04:	f7ff fbcc 	bl	80006a0 <chDbgCheckClassS>
  thread_t *ctp = currp;
 8000f08:	4e34      	ldr	r6, [pc, #208]	; (8000fdc <chMtxLockS+0xdc>)
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8000f0a:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 8000f0c:	69b5      	ldr	r5, [r6, #24]
  if (mp->owner != NULL) {
 8000f0e:	b358      	cbz	r0, 8000f68 <chMtxLockS+0x68>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8000f10:	68aa      	ldr	r2, [r5, #8]
 8000f12:	6883      	ldr	r3, [r0, #8]
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d207      	bcs.n	8000f28 <chMtxLockS+0x28>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8000f18:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8000f1c:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d044      	beq.n	8000fac <chMtxLockS+0xac>
 8000f22:	2b07      	cmp	r3, #7
 8000f24:	d02f      	beq.n	8000f86 <chMtxLockS+0x86>
 8000f26:	b323      	cbz	r3, 8000f72 <chMtxLockS+0x72>
  thread_t *cp = (thread_t *)tqp;
 8000f28:	4623      	mov	r3, r4
 8000f2a:	e003      	b.n	8000f34 <chMtxLockS+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f2c:	6899      	ldr	r1, [r3, #8]
 8000f2e:	68aa      	ldr	r2, [r5, #8]
 8000f30:	4291      	cmp	r1, r2
 8000f32:	d302      	bcc.n	8000f3a <chMtxLockS+0x3a>
    cp = cp->queue.next;
 8000f34:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f36:	429c      	cmp	r4, r3
 8000f38:	d1f8      	bne.n	8000f2c <chMtxLockS+0x2c>
  tp->queue.prev             = cp->queue.prev;
 8000f3a:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8000f3c:	2006      	movs	r0, #6
 8000f3e:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8000f42:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8000f44:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8000f46:	626c      	str	r4, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8000f48:	f7ff ffaa 	bl	8000ea0 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 8000f4c:	68a3      	ldr	r3, [r4, #8]
 8000f4e:	42ab      	cmp	r3, r5
 8000f50:	d003      	beq.n	8000f5a <chMtxLockS+0x5a>
 8000f52:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <chMtxLockS+0xe0>)
 8000f56:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 8000f58:	e7fe      	b.n	8000f58 <chMtxLockS+0x58>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 8000f5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f5c:	42a3      	cmp	r3, r4
 8000f5e:	d007      	beq.n	8000f70 <chMtxLockS+0x70>
 8000f60:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <chMtxLockS+0xe0>)
 8000f64:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 8000f66:	e7fe      	b.n	8000f66 <chMtxLockS+0x66>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 8000f68:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f6a:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 8000f6e:	63ac      	str	r4, [r5, #56]	; 0x38
  }
}
 8000f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8000f72:	e9d0 3200 	ldrd	r3, r2, [r0]
          tp->state = CH_STATE_CURRENT;
 8000f76:	2101      	movs	r1, #1
 8000f78:	f880 1020 	strb.w	r1, [r0, #32]
 8000f7c:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f7e:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8000f80:	f7ff fc06 	bl	8000790 <chSchReadyI>
          break;
 8000f84:	e7d0      	b.n	8000f28 <chMtxLockS+0x28>
  tp->queue.prev->queue.next = tp->queue.next;
 8000f86:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000f8a:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8000f8c:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f8e:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8000f90:	463b      	mov	r3, r7
 8000f92:	e002      	b.n	8000f9a <chMtxLockS+0x9a>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f94:	6899      	ldr	r1, [r3, #8]
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d802      	bhi.n	8000fa0 <chMtxLockS+0xa0>
    cp = cp->queue.next;
 8000f9a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f9c:	429f      	cmp	r7, r3
 8000f9e:	d1f9      	bne.n	8000f94 <chMtxLockS+0x94>
  tp->queue.prev             = cp->queue.prev;
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000fa6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000fa8:	6058      	str	r0, [r3, #4]
 8000faa:	e7bd      	b.n	8000f28 <chMtxLockS+0x28>
  tp->queue.prev->queue.next = tp->queue.next;
 8000fac:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000fb0:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8000fb2:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000fb4:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	e002      	b.n	8000fc0 <chMtxLockS+0xc0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000fba:	6899      	ldr	r1, [r3, #8]
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d802      	bhi.n	8000fc6 <chMtxLockS+0xc6>
    cp = cp->queue.next;
 8000fc0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000fc2:	429f      	cmp	r7, r3
 8000fc4:	d1f9      	bne.n	8000fba <chMtxLockS+0xba>
  tp->queue.prev             = cp->queue.prev;
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000fcc:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000fce:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8000fd0:	68b8      	ldr	r0, [r7, #8]
      while (tp->prio < ctp->prio) {
 8000fd2:	68aa      	ldr	r2, [r5, #8]
 8000fd4:	6883      	ldr	r3, [r0, #8]
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d39e      	bcc.n	8000f18 <chMtxLockS+0x18>
 8000fda:	e7a5      	b.n	8000f28 <chMtxLockS+0x28>
 8000fdc:	20000968 	.word	0x20000968
 8000fe0:	080035ec 	.word	0x080035ec
	...

08000ff0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	4605      	mov	r5, r0
  chDbgCheckClassS();
 8000ff8:	f7ff fb52 	bl	80006a0 <chDbgCheckClassS>
  if (TIME_INFINITE != timeout) {
 8000ffc:	1c4b      	adds	r3, r1, #1
 8000ffe:	d050      	beq.n	80010a2 <chSchGoSleepTimeoutS+0xb2>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 8001000:	f7ff fb5e 	bl	80006c0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8001004:	2900      	cmp	r1, #0
 8001006:	d047      	beq.n	8001098 <chSchGoSleepTimeoutS+0xa8>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001008:	4e4b      	ldr	r6, [pc, #300]	; (8001138 <chSchGoSleepTimeoutS+0x148>)

  vtp->par = par;
  vtp->func = vtfunc;
 800100a:	484c      	ldr	r0, [pc, #304]	; (800113c <chSchGoSleepTimeoutS+0x14c>)
  vtp->par = par;
 800100c:	69b3      	ldr	r3, [r6, #24]
 800100e:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001010:	4637      	mov	r7, r6
 8001012:	2902      	cmp	r1, #2
 8001014:	f857 4f1c 	ldr.w	r4, [r7, #28]!
  return (systime_t)STM32_ST_TIM->CNT;
 8001018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101c:	bf38      	it	cc
 800101e:	2102      	movcc	r1, #2
 8001020:	42bc      	cmp	r4, r7
 8001022:	6a53      	ldr	r3, [r2, #36]	; 0x24
  vtp->func = vtfunc;
 8001024:	9004      	str	r0, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001026:	d06d      	beq.n	8001104 <chSchGoSleepTimeoutS+0x114>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8001028:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800102a:	1a1b      	subs	r3, r3, r0
 800102c:	18c9      	adds	r1, r1, r3

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 800102e:	d240      	bcs.n	80010b2 <chSchGoSleepTimeoutS+0xc2>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	4299      	cmp	r1, r3
 8001034:	d361      	bcc.n	80010fa <chSchGoSleepTimeoutS+0x10a>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8001036:	4299      	cmp	r1, r3
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 8001038:	f10d 0804 	add.w	r8, sp, #4
  while (p->delta < delta) {
 800103c:	d906      	bls.n	800104c <chSchGoSleepTimeoutS+0x5c>
    chDbgAssert(p != vtp, "timer already armed");
 800103e:	4544      	cmp	r4, r8
 8001040:	d03c      	beq.n	80010bc <chSchGoSleepTimeoutS+0xcc>

    delta -= p->delta;
    p = p->next;
 8001042:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 8001044:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 8001046:	68a3      	ldr	r3, [r4, #8]
 8001048:	4299      	cmp	r1, r3
 800104a:	d8f8      	bhi.n	800103e <chSchGoSleepTimeoutS+0x4e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800104c:	6863      	ldr	r3, [r4, #4]
 800104e:	e9cd 4301 	strd	r4, r3, [sp, #4]
  vtp->prev->next = vtp;
 8001052:	f8c3 8000 	str.w	r8, [r3]
  p->prev = vtp;
 8001056:	f8c4 8004 	str.w	r8, [r4, #4]
  vtp->delta = delta;
 800105a:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 800105c:	68a3      	ldr	r3, [r4, #8]
 800105e:	1a59      	subs	r1, r3, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
  p->delta -= delta;
 8001064:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001066:	6273      	str	r3, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001068:	4628      	mov	r0, r5
 800106a:	f7ff ff19 	bl	8000ea0 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 800106e:	f7ff fb27 	bl	80006c0 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8001072:	9b04      	ldr	r3, [sp, #16]
 8001074:	b1c3      	cbz	r3, 80010a8 <chSchGoSleepTimeoutS+0xb8>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8001076:	f7ff fb23 	bl	80006c0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800107a:	69f3      	ldr	r3, [r6, #28]
 800107c:	4543      	cmp	r3, r8
 800107e:	d021      	beq.n	80010c4 <chSchGoSleepTimeoutS+0xd4>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001080:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8001084:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8001086:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001088:	42bb      	cmp	r3, r7
    vtp->next->prev = vtp->prev;
 800108a:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800108c:	d00c      	beq.n	80010a8 <chSchGoSleepTimeoutS+0xb8>
      vtp->next->delta += vtp->delta;
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	9903      	ldr	r1, [sp, #12]
 8001092:	440a      	add	r2, r1
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	e007      	b.n	80010a8 <chSchGoSleepTimeoutS+0xb8>
 8001098:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <chSchGoSleepTimeoutS+0x148>)
 800109c:	4a28      	ldr	r2, [pc, #160]	; (8001140 <chSchGoSleepTimeoutS+0x150>)
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80010a0:	e7fe      	b.n	80010a0 <chSchGoSleepTimeoutS+0xb0>
    chSchGoSleepS(newstate);
 80010a2:	f7ff fefd 	bl	8000ea0 <chSchGoSleepS>
 80010a6:	4e24      	ldr	r6, [pc, #144]	; (8001138 <chSchGoSleepTimeoutS+0x148>)
  return currp->u.rdymsg;
 80010a8:	69b3      	ldr	r3, [r6, #24]
}
 80010aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010ac:	b006      	add	sp, #24
 80010ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      delta -= p->delta;
 80010b2:	68a2      	ldr	r2, [r4, #8]
      p = p->next;
 80010b4:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 80010b6:	1a89      	subs	r1, r1, r2
 80010b8:	68a3      	ldr	r3, [r4, #8]
 80010ba:	e7bc      	b.n	8001036 <chSchGoSleepTimeoutS+0x46>
 80010bc:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <chSchGoSleepTimeoutS+0x150>)
 80010c0:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 80010c2:	e7fe      	b.n	80010c2 <chSchGoSleepTimeoutS+0xd2>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80010c4:	9b01      	ldr	r3, [sp, #4]
 80010c6:	61f3      	str	r3, [r6, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80010c8:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80010ca:	42bb      	cmp	r3, r7
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80010cc:	605f      	str	r7, [r3, #4]
  vtp->func = NULL;
 80010ce:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80010d0:	d02e      	beq.n	8001130 <chSchGoSleepTimeoutS+0x140>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	9903      	ldr	r1, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80010d6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80010d8:	440a      	add	r2, r1
 80010da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80010e2:	1a19      	subs	r1, r3, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80010e4:	428a      	cmp	r2, r1
 80010e6:	d9df      	bls.n	80010a8 <chSchGoSleepTimeoutS+0xb8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80010e8:	1ac3      	subs	r3, r0, r3
 80010ea:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80010ec:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80010ee:	bf98      	it	ls
 80010f0:	1c8a      	addls	r2, r1, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80010f2:	4410      	add	r0, r2
 80010f4:	f7ff fec4 	bl	8000e80 <stSetAlarm>
 80010f8:	e7d6      	b.n	80010a8 <chSchGoSleepTimeoutS+0xb8>
 80010fa:	4408      	add	r0, r1
 80010fc:	f7ff fec0 	bl	8000e80 <stSetAlarm>
 8001100:	68a3      	ldr	r3, [r4, #8]
 8001102:	e798      	b.n	8001036 <chSchGoSleepTimeoutS+0x46>
      ch.vtlist.lasttime = now;
 8001104:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->delta = delay;
 8001106:	9103      	str	r1, [sp, #12]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001108:	68d0      	ldr	r0, [r2, #12]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 800110a:	9401      	str	r4, [sp, #4]
      ch.vtlist.next = vtp;
 800110c:	f10d 0804 	add.w	r8, sp, #4
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8001110:	f010 0002 	ands.w	r0, r0, #2
      ch.vtlist.prev = vtp;
 8001114:	e9c6 8807 	strd	r8, r8, [r6, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001118:	9402      	str	r4, [sp, #8]
 800111a:	d105      	bne.n	8001128 <chSchGoSleepTimeoutS+0x138>
  return systime + (systime_t)interval;
 800111c:	4419      	add	r1, r3
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800111e:	2302      	movs	r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001120:	6351      	str	r1, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001122:	6110      	str	r0, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001124:	60d3      	str	r3, [r2, #12]
 8001126:	e79f      	b.n	8001068 <chSchGoSleepTimeoutS+0x78>
 8001128:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <chSchGoSleepTimeoutS+0x154>)
 800112c:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 800112e:	e7fe      	b.n	800112e <chSchGoSleepTimeoutS+0x13e>
  STM32_ST_TIM->DIER = 0U;
 8001130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001134:	60da      	str	r2, [r3, #12]
    return;
 8001136:	e7b7      	b.n	80010a8 <chSchGoSleepTimeoutS+0xb8>
 8001138:	20000968 	.word	0x20000968
 800113c:	08000991 	.word	0x08000991
 8001140:	080035e0 	.word	0x080035e0
 8001144:	080036c4 	.word	0x080036c4
	...

08001150 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001150:	b161      	cbz	r1, 800116c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001154:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8001156:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8001158:	6844      	ldr	r4, [r0, #4]
 800115a:	4603      	mov	r3, r0
 800115c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001160:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8001162:	6022      	str	r2, [r4, #0]
}
 8001164:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8001166:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001168:	f7ff bf42 	b.w	8000ff0 <chSchGoSleepTimeoutS>
}
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000968 	.word	0x20000968
	...

08001180 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001180:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8001184:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001186:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800118a:	2300      	movs	r3, #0
 800118c:	f383 8811 	msr	BASEPRI, r3
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
	...

080011a0 <_stats_stop_measure_crit_thd>:
  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 80011a0:	4801      	ldr	r0, [pc, #4]	; (80011a8 <_stats_stop_measure_crit_thd+0x8>)
 80011a2:	f7ff ba3d 	b.w	8000620 <chTMStopMeasurementX>
 80011a6:	bf00      	nop
 80011a8:	20000a10 	.word	0x20000a10
 80011ac:	00000000 	.word	0x00000000

080011b0 <_stats_start_measure_crit_thd>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 80011b0:	4801      	ldr	r0, [pc, #4]	; (80011b8 <_stats_start_measure_crit_thd+0x8>)
 80011b2:	f7ff ba65 	b.w	8000680 <chTMStartMeasurementX>
 80011b6:	bf00      	nop
 80011b8:	20000a10 	.word	0x20000a10
 80011bc:	00000000 	.word	0x00000000

080011c0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80011c0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 80011c2:	4c13      	ldr	r4, [pc, #76]	; (8001210 <chSchDoReschedule+0x50>)
  thread_t *tp = tqp->next;
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	69a0      	ldr	r0, [r4, #24]
  tqp->next             = tp->queue.next;
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	6022      	str	r2, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80011cc:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80011ce:	6054      	str	r4, [r2, #4]
 80011d0:	f883 1020 	strb.w	r1, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80011d4:	61a3      	str	r3, [r4, #24]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 80011d6:	f7ff fab3 	bl	8000740 <chSchReadyAheadI>
  ch.kernel_stats.n_ctxswc++;
 80011da:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80011de:	69a1      	ldr	r1, [r4, #24]
 80011e0:	3301      	adds	r3, #1
  otp = chSchReadyAheadI(otp);
 80011e2:	4605      	mov	r5, r0
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 80011e4:	3148      	adds	r1, #72	; 0x48
 80011e6:	3048      	adds	r0, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 80011e8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 80011ec:	f7ff f9f8 	bl	80005e0 <chTMChainMeasurementToX>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80011f0:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 80011f4:	69ea      	ldr	r2, [r5, #28]
 80011f6:	3b24      	subs	r3, #36	; 0x24
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d805      	bhi.n	8001208 <chSchDoReschedule+0x48>
 80011fc:	69a0      	ldr	r0, [r4, #24]
 80011fe:	4629      	mov	r1, r5
}
 8001200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8001204:	f7ff b85c 	b.w	80002c0 <_port_switch>
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800120a:	4b02      	ldr	r3, [pc, #8]	; (8001214 <chSchDoReschedule+0x54>)
 800120c:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 800120e:	e7fe      	b.n	800120e <chSchDoReschedule+0x4e>
 8001210:	20000968 	.word	0x20000968
 8001214:	080034e0 	.word	0x080034e0
	...

08001220 <_dbg_check_unlock>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <_dbg_check_unlock+0x18>)
 8001222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001224:	b922      	cbnz	r2, 8001230 <_dbg_check_unlock+0x10>
 8001226:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001228:	2900      	cmp	r1, #0
 800122a:	dd01      	ble.n	8001230 <_dbg_check_unlock+0x10>
  _dbg_leave_lock();
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800122e:	4770      	bx	lr
 8001230:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001232:	4a02      	ldr	r2, [pc, #8]	; (800123c <_dbg_check_unlock+0x1c>)
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8001236:	e7fe      	b.n	8001236 <_dbg_check_unlock+0x16>
 8001238:	20000968 	.word	0x20000968
 800123c:	080034f0 	.word	0x080034f0

08001240 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
 8001240:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 8001242:	f7ff ffed 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001246:	f7ff ffab 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <chSysUnlock.lto_priv.4+0x2c>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d004      	beq.n	800125c <chSysUnlock.lto_priv.4+0x1c>
 8001252:	6999      	ldr	r1, [r3, #24]
 8001254:	6892      	ldr	r2, [r2, #8]
 8001256:	6889      	ldr	r1, [r1, #8]
 8001258:	4291      	cmp	r1, r2
 800125a:	d303      	bcc.n	8001264 <chSysUnlock.lto_priv.4+0x24>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800125c:	2300      	movs	r3, #0
 800125e:	f383 8811 	msr	BASEPRI, r3
}
 8001262:	bd08      	pop	{r3, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001266:	4a02      	ldr	r2, [pc, #8]	; (8001270 <chSysUnlock.lto_priv.4+0x30>)
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 800126a:	e7fe      	b.n	800126a <chSysUnlock.lto_priv.4+0x2a>
 800126c:	20000968 	.word	0x20000968
 8001270:	0800356c 	.word	0x0800356c
	...

08001280 <_dbg_check_lock>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <_dbg_check_lock+0x18>)
 8001282:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8001286:	430a      	orrs	r2, r1
 8001288:	d102      	bne.n	8001290 <_dbg_check_lock+0x10>
  _dbg_enter_lock();
 800128a:	2201      	movs	r2, #1
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800128e:	4770      	bx	lr
 8001290:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001292:	4a02      	ldr	r2, [pc, #8]	; (800129c <_dbg_check_lock+0x1c>)
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8001296:	e7fe      	b.n	8001296 <_dbg_check_lock+0x16>
 8001298:	20000968 	.word	0x20000968
 800129c:	080034f8 	.word	0x080034f8

080012a0 <i2cStart.constprop.0>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 80012a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 80012a4:	4ca4      	ldr	r4, [pc, #656]	; (8001538 <i2cStart.constprop.0+0x298>)
 80012a6:	7823      	ldrb	r3, [r4, #0]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	2a01      	cmp	r2, #1
 80012ac:	d901      	bls.n	80012b2 <i2cStart.constprop.0+0x12>
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d169      	bne.n	8001386 <i2cStart.constprop.0+0xe6>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80012b2:	2320      	movs	r3, #32
 80012b4:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80012b8:	f7ff ff7a 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80012bc:	f7ff ffe0 	bl	8001280 <_dbg_check_lock>
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80012c0:	7822      	ldrb	r2, [r4, #0]
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 80012c2:	4b9e      	ldr	r3, [pc, #632]	; (800153c <i2cStart.constprop.0+0x29c>)
  I2C_TypeDef *dp = i2cp->i2c;
 80012c4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80012c6:	6063      	str	r3, [r4, #4]
  if (i2cp->state == I2C_STOP) {
 80012c8:	2a01      	cmp	r2, #1
 80012ca:	d061      	beq.n	8001390 <i2cStart.constprop.0+0xf0>
 80012cc:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80012d0:	680e      	ldr	r6, [r1, #0]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80012d2:	6811      	ldr	r1, [r2, #0]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80012d4:	489a      	ldr	r0, [pc, #616]	; (8001540 <i2cStart.constprop.0+0x2a0>)
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80012d6:	f105 0210 	add.w	r2, r5, #16
 80012da:	60b2      	str	r2, [r6, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80012dc:	608a      	str	r2, [r1, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 80012de:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  dp->CR1 = 0;
 80012e2:	2100      	movs	r1, #0
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80012e4:	f44f 6210 	mov.w	r2, #2304	; 0x900
  dp->CR1 = I2C_CR1_SWRST;
 80012e8:	602e      	str	r6, [r5, #0]
  dp->CR1 = 0;
 80012ea:	6029      	str	r1, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80012ec:	606a      	str	r2, [r5, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80012ee:	686a      	ldr	r2, [r5, #4]
 80012f0:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80012f4:	400a      	ands	r2, r1
 80012f6:	606a      	str	r2, [r5, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80012f8:	686a      	ldr	r2, [r5, #4]
 80012fa:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 80012fe:	606a      	str	r2, [r5, #4]
 8001300:	2102      	movs	r1, #2
 8001302:	462a      	mov	r2, r5
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 8001304:	1e8e      	subs	r6, r1, #2
 8001306:	2e01      	cmp	r6, #1
 8001308:	f200 80dd 	bhi.w	80014c6 <i2cStart.constprop.0+0x226>
    if (duty == FAST_DUTY_CYCLE_2) {
 800130c:	2902      	cmp	r1, #2
 800130e:	f000 80ff 	beq.w	8001510 <i2cStart.constprop.0+0x270>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 8001312:	4e8c      	ldr	r6, [pc, #560]	; (8001544 <i2cStart.constprop.0+0x2a4>)
 8001314:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800131c:	fbb6 f1f0 	udiv	r1, r6, r0
 8001320:	fb00 6011 	mls	r0, r0, r1, r6
 8001324:	2800      	cmp	r0, #0
 8001326:	f040 8102 	bne.w	800152e <i2cStart.constprop.0+0x28e>
 800132a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800132e:	b289      	uxth	r1, r1
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8001330:	200d      	movs	r0, #13
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8001332:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8001336:	6210      	str	r0, [r2, #32]
  dp->CCR = regCCR;
 8001338:	61d1      	str	r1, [r2, #28]
  i2copmode_t opmode = i2cp->config->op_mode;
 800133a:	7819      	ldrb	r1, [r3, #0]
  regCR1 = dp->CR1;
 800133c:	6813      	ldr	r3, [r2, #0]
  switch (opmode) {
 800133e:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 8001340:	b29b      	uxth	r3, r3
  switch (opmode) {
 8001342:	f000 80d6 	beq.w	80014f2 <i2cStart.constprop.0+0x252>
 8001346:	2903      	cmp	r1, #3
 8001348:	f000 80d0 	beq.w	80014ec <i2cStart.constprop.0+0x24c>
 800134c:	2901      	cmp	r1, #1
 800134e:	f000 80c9 	beq.w	80014e4 <i2cStart.constprop.0+0x244>
  dp->CR1 = regCR1;
 8001352:	6013      	str	r3, [r2, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	602b      	str	r3, [r5, #0]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 800135c:	2302      	movs	r3, #2
 800135e:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8001360:	f7ff ff5e 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001364:	f7ff ff1c 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001368:	4b77      	ldr	r3, [pc, #476]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d005      	beq.n	800137c <i2cStart.constprop.0+0xdc>
 8001370:	6999      	ldr	r1, [r3, #24]
 8001372:	6892      	ldr	r2, [r2, #8]
 8001374:	6889      	ldr	r1, [r1, #8]
 8001376:	4291      	cmp	r1, r2
 8001378:	f0c0 80c1 	bcc.w	80014fe <i2cStart.constprop.0+0x25e>
 800137c:	2300      	movs	r3, #0
 800137e:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001386:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001388:	4b6f      	ldr	r3, [pc, #444]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 800138a:	4a70      	ldr	r2, [pc, #448]	; (800154c <i2cStart.constprop.0+0x2ac>)
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
 800138e:	e7fe      	b.n	800138e <i2cStart.constprop.0+0xee>
      rccResetI2C3();
 8001390:	4e6f      	ldr	r6, [pc, #444]	; (8001550 <i2cStart.constprop.0+0x2b0>)
 8001392:	6a33      	ldr	r3, [r6, #32]
 8001394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001398:	6233      	str	r3, [r6, #32]
 800139a:	6a33      	ldr	r3, [r6, #32]
 800139c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013a0:	6233      	str	r3, [r6, #32]
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80013a2:	f240 4256 	movw	r2, #1110	; 0x456
 80013a6:	f240 4316 	movw	r3, #1046	; 0x416
 80013aa:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
  osalDbgCheckClassI();
 80013ae:	f7ff f987 	bl	80006c0 <chDbgCheckClassI>
 80013b2:	4968      	ldr	r1, [pc, #416]	; (8001554 <i2cStart.constprop.0+0x2b4>)
      rccResetI2C3();
 80013b4:	6a33      	ldr	r3, [r6, #32]
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff f872 	bl	80004a0 <dmaStreamAllocI.part.0.constprop.0>
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C3_RX_DMA_STREAM,
 80013bc:	62e0      	str	r0, [r4, #44]	; 0x2c
      osalDbgAssert(i2cp->dmarx != NULL, "unable to allocate stream");
 80013be:	2800      	cmp	r0, #0
 80013c0:	d07c      	beq.n	80014bc <i2cStart.constprop.0+0x21c>
 80013c2:	f7ff f97d 	bl	80006c0 <chDbgCheckClassI>
 80013c6:	4964      	ldr	r1, [pc, #400]	; (8001558 <i2cStart.constprop.0+0x2b8>)
 80013c8:	2004      	movs	r0, #4
 80013ca:	f7ff f869 	bl	80004a0 <dmaStreamAllocI.part.0.constprop.0>
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C3_TX_DMA_STREAM,
 80013ce:	6320      	str	r0, [r4, #48]	; 0x30
      osalDbgAssert(i2cp->dmatx != NULL, "unable to allocate stream");
 80013d0:	2800      	cmp	r0, #0
 80013d2:	f000 8082 	beq.w	80014da <i2cStart.constprop.0+0x23a>
      rccEnableI2C3(true);
 80013d6:	6c37      	ldr	r7, [r6, #64]	; 0x40
 80013d8:	6863      	ldr	r3, [r4, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80013da:	4a60      	ldr	r2, [pc, #384]	; (800155c <i2cStart.constprop.0+0x2bc>)
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C3_RX_DMA_CHANNEL) |
 80013dc:	4960      	ldr	r1, [pc, #384]	; (8001560 <i2cStart.constprop.0+0x2c0>)
      rccEnableI2C3(true);
 80013de:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 80013e2:	6437      	str	r7, [r6, #64]	; 0x40
 80013e4:	6e37      	ldr	r7, [r6, #96]	; 0x60
 80013e6:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 80013ea:	6637      	str	r7, [r6, #96]	; 0x60
 80013ec:	6e36      	ldr	r6, [r6, #96]	; 0x60
 80013ee:	f04f 0c50 	mov.w	ip, #80	; 0x50
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013f2:	f44f 7680 	mov.w	r6, #256	; 0x100
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80013f6:	f882 c348 	strb.w	ip, [r2, #840]	; 0x348
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013fa:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80013fe:	6096      	str	r6, [r2, #8]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001400:	f882 c349 	strb.w	ip, [r2, #841]	; 0x349
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001404:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001408:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800140c:	6096      	str	r6, [r2, #8]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800140e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001410:	685e      	ldr	r6, [r3, #4]
 8001412:	f8d2 8000 	ldr.w	r8, [r2]
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C3_RX_DMA_CHANNEL) |
 8001416:	6a62      	ldr	r2, [r4, #36]	; 0x24
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8001418:	f8d0 e000 	ldr.w	lr, [r0]
  osalDbgCheck((i2cp != NULL) &&
 800141c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8001570 <i2cStart.constprop.0+0x2d0>
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C3_RX_DMA_CHANNEL) |
 8001420:	ea42 0701 	orr.w	r7, r2, r1
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C3_TX_DMA_CHANNEL) |
 8001424:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001426:	4311      	orrs	r1, r2
 8001428:	e9c4 7109 	strd	r7, r1, [r4, #36]	; 0x24
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800142c:	f105 0010 	add.w	r0, r5, #16
 8001430:	7a19      	ldrb	r1, [r3, #8]
 8001432:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001434:	f8c8 0008 	str.w	r0, [r8, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8001438:	f8ce 0008 	str.w	r0, [lr, #8]
  dp->CR1 = I2C_CR1_SWRST;
 800143c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
 8001440:	f8c5 e000 	str.w	lr, [r5]
  osalDbgCheck((i2cp != NULL) &&
 8001444:	1e77      	subs	r7, r6, #1
  dp->CR1 = 0;
 8001446:	f04f 0e00 	mov.w	lr, #0
 800144a:	f8c5 e000 	str.w	lr, [r5]
  osalDbgCheck((i2cp != NULL) &&
 800144e:	4567      	cmp	r7, ip
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8001450:	f44f 6e10 	mov.w	lr, #2304	; 0x900
 8001454:	4630      	mov	r0, r6
 8001456:	f8c5 e004 	str.w	lr, [r5, #4]
  osalDbgCheck((i2cp != NULL) &&
 800145a:	d904      	bls.n	8001466 <i2cStart.constprop.0+0x1c6>
 800145c:	b672      	cpsid	i
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 8001460:	4a40      	ldr	r2, [pc, #256]	; (8001564 <i2cStart.constprop.0+0x2c4>)
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
 8001464:	e7fe      	b.n	8001464 <i2cStart.constprop.0+0x1c4>
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8001466:	6857      	ldr	r7, [r2, #4]
  if (clock_speed <= 100000) {
 8001468:	f8df c108 	ldr.w	ip, [pc, #264]	; 8001574 <i2cStart.constprop.0+0x2d4>
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800146c:	f64f 7ec0 	movw	lr, #65472	; 0xffc0
 8001470:	ea07 070e 	and.w	r7, r7, lr
 8001474:	6057      	str	r7, [r2, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8001476:	6857      	ldr	r7, [r2, #4]
  if (clock_speed <= 100000) {
 8001478:	4566      	cmp	r6, ip
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800147a:	f047 072a 	orr.w	r7, r7, #42	; 0x2a
 800147e:	6057      	str	r7, [r2, #4]
  if (clock_speed <= 100000) {
 8001480:	f73f af40 	bgt.w	8001304 <i2cStart.constprop.0+0x64>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8001484:	2901      	cmp	r1, #1
 8001486:	d004      	beq.n	8001492 <i2cStart.constprop.0+0x1f2>
 8001488:	b672      	cpsid	i
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 800148c:	4a35      	ldr	r2, [pc, #212]	; (8001564 <i2cStart.constprop.0+0x2c4>)
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001490:	e7fe      	b.n	8001490 <i2cStart.constprop.0+0x1f0>
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 8001492:	482c      	ldr	r0, [pc, #176]	; (8001544 <i2cStart.constprop.0+0x2a4>)
 8001494:	0076      	lsls	r6, r6, #1
 8001496:	fbb0 f1f6 	udiv	r1, r0, r6
 800149a:	fb06 0611 	mls	r6, r6, r1, r0
 800149e:	b9be      	cbnz	r6, 80014d0 <i2cStart.constprop.0+0x230>
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80014a0:	b289      	uxth	r1, r1
    osalDbgAssert(clock_div >= 0x04,
 80014a2:	2903      	cmp	r1, #3
 80014a4:	d92f      	bls.n	8001506 <i2cStart.constprop.0+0x266>
    dp->TRISE = I2C_CLK_FREQ + 1;
 80014a6:	202b      	movs	r0, #43	; 0x2b
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 80014a8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    dp->TRISE = I2C_CLK_FREQ + 1;
 80014ac:	6210      	str	r0, [r2, #32]
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 80014ae:	f4ff af43 	bcc.w	8001338 <i2cStart.constprop.0+0x98>
 80014b2:	b672      	cpsid	i
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 80014b6:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <i2cStart.constprop.0+0x2c4>)
 80014b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ba:	e7fe      	b.n	80014ba <i2cStart.constprop.0+0x21a>
 80014bc:	b672      	cpsid	i
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 80014c0:	4a29      	ldr	r2, [pc, #164]	; (8001568 <i2cStart.constprop.0+0x2c8>)
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014c4:	e7fe      	b.n	80014c4 <i2cStart.constprop.0+0x224>
 80014c6:	b672      	cpsid	i
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 80014ca:	4a26      	ldr	r2, [pc, #152]	; (8001564 <i2cStart.constprop.0+0x2c4>)
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ce:	e7fe      	b.n	80014ce <i2cStart.constprop.0+0x22e>
 80014d0:	b672      	cpsid	i
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 80014d4:	4a23      	ldr	r2, [pc, #140]	; (8001564 <i2cStart.constprop.0+0x2c4>)
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d8:	e7fe      	b.n	80014d8 <i2cStart.constprop.0+0x238>
 80014da:	b672      	cpsid	i
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 80014de:	4a22      	ldr	r2, [pc, #136]	; (8001568 <i2cStart.constprop.0+0x2c8>)
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e2:	e7fe      	b.n	80014e2 <i2cStart.constprop.0+0x242>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80014e4:	f023 030a 	bic.w	r3, r3, #10
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	e732      	b.n	8001352 <i2cStart.constprop.0+0xb2>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80014ec:	f043 030a 	orr.w	r3, r3, #10
 80014f0:	e72f      	b.n	8001352 <i2cStart.constprop.0+0xb2>
 80014f2:	f023 0308 	bic.w	r3, r3, #8
 80014f6:	b29b      	uxth	r3, r3
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	e729      	b.n	8001352 <i2cStart.constprop.0+0xb2>
 80014fe:	b672      	cpsid	i
 8001500:	4a1a      	ldr	r2, [pc, #104]	; (800156c <i2cStart.constprop.0+0x2cc>)
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
 8001504:	e7fe      	b.n	8001504 <i2cStart.constprop.0+0x264>
 8001506:	b672      	cpsid	i
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 800150a:	4a16      	ldr	r2, [pc, #88]	; (8001564 <i2cStart.constprop.0+0x2c4>)
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
 800150e:	e7fe      	b.n	800150e <i2cStart.constprop.0+0x26e>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 8001510:	4e0c      	ldr	r6, [pc, #48]	; (8001544 <i2cStart.constprop.0+0x2a4>)
 8001512:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001516:	fbb6 f1f0 	udiv	r1, r6, r0
 800151a:	fb00 6011 	mls	r0, r0, r1, r6
 800151e:	2800      	cmp	r0, #0
 8001520:	f43f af05 	beq.w	800132e <i2cStart.constprop.0+0x8e>
 8001524:	b672      	cpsid	i
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <i2cStart.constprop.0+0x2c4>)
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
 800152c:	e7fe      	b.n	800152c <i2cStart.constprop.0+0x28c>
 800152e:	b672      	cpsid	i
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <i2cStart.constprop.0+0x2a8>)
 8001532:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <i2cStart.constprop.0+0x2c4>)
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
 8001536:	e7fe      	b.n	8001536 <i2cStart.constprop.0+0x296>
 8001538:	20000808 	.word	0x20000808
 800153c:	0800384c 	.word	0x0800384c
 8001540:	00061a80 	.word	0x00061a80
 8001544:	0280de80 	.word	0x0280de80
 8001548:	20000968 	.word	0x20000968
 800154c:	080036d4 	.word	0x080036d4
 8001550:	40023800 	.word	0x40023800
 8001554:	08000c41 	.word	0x08000c41
 8001558:	08000bf1 	.word	0x08000bf1
 800155c:	e000e100 	.word	0xe000e100
 8001560:	06030000 	.word	0x06030000
 8001564:	080036f4 	.word	0x080036f4
 8001568:	08003734 	.word	0x08003734
 800156c:	08003548 	.word	0x08003548
 8001570:	00061a7f 	.word	0x00061a7f
 8001574:	000186a0 	.word	0x000186a0
	...

08001580 <i2c_lld_master_transmit_timeout.constprop.0>:
 *                      timeout the driver must be stopped and restarted
 *                      because the bus is in an uncertain state</b>.
 *
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 8001580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001584:	4d55      	ldr	r5, [pc, #340]	; (80016dc <i2c_lld_master_transmit_timeout.constprop.0+0x15c>)
 8001586:	4c56      	ldr	r4, [pc, #344]	; (80016e0 <i2c_lld_master_transmit_timeout.constprop.0+0x160>)
 8001588:	6b6f      	ldr	r7, [r5, #52]	; 0x34

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 800158a:	231a      	movs	r3, #26
  i2cp->errors = I2C_NO_ERROR;
 800158c:	2600      	movs	r6, #0
  i2cp->addr = (addr << 1);
 800158e:	842b      	strh	r3, [r5, #32]
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 8001590:	4680      	mov	r8, r0
 8001592:	4689      	mov	r9, r1
 8001594:	4693      	mov	fp, r2
  i2cp->errors = I2C_NO_ERROR;
 8001596:	60ae      	str	r6, [r5, #8]
  _dbg_check_unlock();
 8001598:	f7ff fe42 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800159c:	f7ff fe00 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	42a3      	cmp	r3, r4
 80015a4:	d004      	beq.n	80015b0 <i2c_lld_master_transmit_timeout.constprop.0+0x30>
 80015a6:	69a2      	ldr	r2, [r4, #24]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	6892      	ldr	r2, [r2, #8]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d33c      	bcc.n	800162a <i2c_lld_master_transmit_timeout.constprop.0+0xaa>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80015b0:	2600      	movs	r6, #0
 80015b2:	f386 8811 	msr	BASEPRI, r6
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80015b6:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80015ba:	6811      	ldr	r1, [r2, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80015bc:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80015be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80015c0:	600a      	str	r2, [r1, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80015c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 80015c4:	f8c1 800c 	str.w	r8, [r1, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 80015c8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 80015cc:	f8c1 9004 	str.w	r9, [r1, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80015d0:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80015d2:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 80015d4:	605e      	str	r6, [r3, #4]
 80015d6:	f8d8 a024 	ldr.w	sl, [r8, #36]	; 0x24
 80015da:	f04f 0920 	mov.w	r9, #32
 80015de:	f389 8811 	msr	BASEPRI, r9
  _stats_start_measure_crit_thd();
 80015e2:	f7ff fde5 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80015e6:	f7ff fe4b 	bl	8001280 <_dbg_check_lock>
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	079a      	lsls	r2, r3, #30
 80015ee:	d402      	bmi.n	80015f6 <i2c_lld_master_transmit_timeout.constprop.0+0x76>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	059b      	lsls	r3, r3, #22
 80015f4:	d53d      	bpl.n	8001672 <i2c_lld_master_transmit_timeout.constprop.0+0xf2>
 80015f6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80015fa:	eba3 030a 	sub.w	r3, r3, sl
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 80015fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001602:	d216      	bcs.n	8001632 <i2c_lld_master_transmit_timeout.constprop.0+0xb2>
  _dbg_check_unlock();
 8001604:	f7ff fe0c 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001608:	f7ff fdca 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	42a3      	cmp	r3, r4
 8001610:	d004      	beq.n	800161c <i2c_lld_master_transmit_timeout.constprop.0+0x9c>
 8001612:	69a2      	ldr	r2, [r4, #24]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	6892      	ldr	r2, [r2, #8]
 8001618:	429a      	cmp	r2, r3
 800161a:	d302      	bcc.n	8001622 <i2c_lld_master_transmit_timeout.constprop.0+0xa2>
 800161c:	f386 8811 	msr	BASEPRI, r6
 8001620:	e7dd      	b.n	80015de <i2c_lld_master_transmit_timeout.constprop.0+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001622:	b672      	cpsid	i
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <i2c_lld_master_transmit_timeout.constprop.0+0x164>)
 8001626:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001628:	e7fe      	b.n	8001628 <i2c_lld_master_transmit_timeout.constprop.0+0xa8>
 800162a:	b672      	cpsid	i
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <i2c_lld_master_transmit_timeout.constprop.0+0x164>)
 800162e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001630:	e7fe      	b.n	8001630 <i2c_lld_master_transmit_timeout.constprop.0+0xb0>
      dmaStreamDisable(i2cp->dmatx);
 8001632:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001634:	6802      	ldr	r2, [r0, #0]
 8001636:	6813      	ldr	r3, [r2, #0]
 8001638:	f023 031f 	bic.w	r3, r3, #31
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	6813      	ldr	r3, [r2, #0]
 8001640:	07dc      	lsls	r4, r3, #31
 8001642:	d4fc      	bmi.n	800163e <i2c_lld_master_transmit_timeout.constprop.0+0xbe>
      dmaStreamDisable(i2cp->dmarx);
 8001644:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
      dmaStreamDisable(i2cp->dmatx);
 8001646:	7a44      	ldrb	r4, [r0, #9]
 8001648:	6840      	ldr	r0, [r0, #4]
      dmaStreamDisable(i2cp->dmarx);
 800164a:	680a      	ldr	r2, [r1, #0]
      dmaStreamDisable(i2cp->dmatx);
 800164c:	233d      	movs	r3, #61	; 0x3d
 800164e:	40a3      	lsls	r3, r4
 8001650:	6003      	str	r3, [r0, #0]
      dmaStreamDisable(i2cp->dmarx);
 8001652:	6813      	ldr	r3, [r2, #0]
 8001654:	f023 031f 	bic.w	r3, r3, #31
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	07d8      	lsls	r0, r3, #31
 800165e:	d4fc      	bmi.n	800165a <i2c_lld_master_transmit_timeout.constprop.0+0xda>
 8001660:	7a48      	ldrb	r0, [r1, #9]
 8001662:	684a      	ldr	r2, [r1, #4]
 8001664:	233d      	movs	r3, #61	; 0x3d
 8001666:	4083      	lsls	r3, r0
 8001668:	6013      	str	r3, [r2, #0]
      return MSG_TIMEOUT;
 800166a:	f04f 30ff 	mov.w	r0, #4294967295
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 800166e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001672:	687b      	ldr	r3, [r7, #4]
  chDbgAssert(*trp == NULL, "not NULL");
 8001674:	69ea      	ldr	r2, [r5, #28]
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	607b      	str	r3, [r7, #4]
  dp->CR1 |= I2C_CR1_START;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	b11a      	cbz	r2, 800168e <i2c_lld_master_transmit_timeout.constprop.0+0x10e>
 8001686:	b672      	cpsid	i
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <i2c_lld_master_transmit_timeout.constprop.0+0x168>)
 800168a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800168c:	e7fe      	b.n	800168c <i2c_lld_master_transmit_timeout.constprop.0+0x10c>
  return ch.rlist.current;
 800168e:	69a3      	ldr	r3, [r4, #24]
  tp->u.wttrp = trp;
 8001690:	4a16      	ldr	r2, [pc, #88]	; (80016ec <i2c_lld_master_transmit_timeout.constprop.0+0x16c>)
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8001694:	4659      	mov	r1, fp
 8001696:	2003      	movs	r0, #3
  *trp = tp;
 8001698:	61eb      	str	r3, [r5, #28]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800169a:	f7ff fca9 	bl	8000ff0 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800169e:	2800      	cmp	r0, #0
 80016a0:	d0e5      	beq.n	800166e <i2c_lld_master_transmit_timeout.constprop.0+0xee>
    dmaStreamDisable(i2cp->dmatx);
 80016a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f023 031f 	bic.w	r3, r3, #31
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	07d9      	lsls	r1, r3, #31
 80016b2:	d4fc      	bmi.n	80016ae <i2c_lld_master_transmit_timeout.constprop.0+0x12e>
    dmaStreamDisable(i2cp->dmarx);
 80016b4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmatx);
 80016b6:	7a65      	ldrb	r5, [r4, #9]
 80016b8:	6864      	ldr	r4, [r4, #4]
    dmaStreamDisable(i2cp->dmarx);
 80016ba:	680a      	ldr	r2, [r1, #0]
    dmaStreamDisable(i2cp->dmatx);
 80016bc:	233d      	movs	r3, #61	; 0x3d
 80016be:	40ab      	lsls	r3, r5
 80016c0:	6023      	str	r3, [r4, #0]
    dmaStreamDisable(i2cp->dmarx);
 80016c2:	6813      	ldr	r3, [r2, #0]
 80016c4:	f023 031f 	bic.w	r3, r3, #31
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	07db      	lsls	r3, r3, #31
 80016ce:	d4fc      	bmi.n	80016ca <i2c_lld_master_transmit_timeout.constprop.0+0x14a>
 80016d0:	7a4c      	ldrb	r4, [r1, #9]
 80016d2:	684a      	ldr	r2, [r1, #4]
 80016d4:	233d      	movs	r3, #61	; 0x3d
 80016d6:	40a3      	lsls	r3, r4
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e7c8      	b.n	800166e <i2c_lld_master_transmit_timeout.constprop.0+0xee>
 80016dc:	20000808 	.word	0x20000808
 80016e0:	20000968 	.word	0x20000968
 80016e4:	08003560 	.word	0x08003560
 80016e8:	0800368c 	.word	0x0800368c
 80016ec:	20000824 	.word	0x20000824

080016f0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80016f0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80016f2:	2320      	movs	r3, #32
 80016f4:	4604      	mov	r4, r0
 80016f6:	460d      	mov	r5, r1
 80016f8:	4616      	mov	r6, r2
 80016fa:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80016fe:	f7ff fd57 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001702:	f7ff fdbd 	bl	8001280 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
 8001706:	4632      	mov	r2, r6
 8001708:	4629      	mov	r1, r5
 800170a:	4620      	mov	r0, r4
 800170c:	f7fe ffe8 	bl	80006e0 <chCoreAllocFromTopI>
 8001710:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8001712:	f7ff fd85 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001716:	f7ff fd43 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <chCoreAllocFromTop+0x50>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d004      	beq.n	800172c <chCoreAllocFromTop+0x3c>
 8001722:	6999      	ldr	r1, [r3, #24]
 8001724:	6892      	ldr	r2, [r2, #8]
 8001726:	6889      	ldr	r1, [r1, #8]
 8001728:	4291      	cmp	r1, r2
 800172a:	d304      	bcc.n	8001736 <chCoreAllocFromTop+0x46>
 800172c:	2300      	movs	r3, #0
 800172e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 8001732:	4620      	mov	r0, r4
 8001734:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001736:	b672      	cpsid	i
 8001738:	4a02      	ldr	r2, [pc, #8]	; (8001744 <chCoreAllocFromTop+0x54>)
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 800173c:	e7fe      	b.n	800173c <chCoreAllocFromTop+0x4c>
 800173e:	bf00      	nop
 8001740:	20000968 	.word	0x20000968
 8001744:	08003584 	.word	0x08003584
	...

08001750 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8001752:	4e30      	ldr	r6, [pc, #192]	; (8001814 <chMtxUnlock+0xc4>)
void chMtxUnlock(mutex_t *mp) {
 8001754:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8001756:	69b7      	ldr	r7, [r6, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001758:	2320      	movs	r3, #32
 800175a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800175e:	f7ff fd27 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001762:	f7ff fd8d 	bl	8001280 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8001766:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8001768:	2d00      	cmp	r5, #0
 800176a:	d045      	beq.n	80017f8 <chMtxUnlock+0xa8>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 800176c:	68ab      	ldr	r3, [r5, #8]
 800176e:	42bb      	cmp	r3, r7
 8001770:	d003      	beq.n	800177a <chMtxUnlock+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001772:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <chMtxUnlock+0xc8>)
 8001776:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 8001778:	e7fe      	b.n	8001778 <chMtxUnlock+0x28>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 800177a:	42a5      	cmp	r5, r4
 800177c:	d003      	beq.n	8001786 <chMtxUnlock+0x36>
 800177e:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <chMtxUnlock+0xc8>)
 8001782:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 8001784:	e7fe      	b.n	8001784 <chMtxUnlock+0x34>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8001786:	68e1      	ldr	r1, [r4, #12]
 8001788:	63b9      	str	r1, [r7, #56]	; 0x38
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 800178a:	f7fe ff89 	bl	80006a0 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800178e:	6820      	ldr	r0, [r4, #0]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001790:	4284      	cmp	r4, r0
 8001792:	d035      	beq.n	8001800 <chMtxUnlock+0xb0>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001794:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001796:	b159      	cbz	r1, 80017b0 <chMtxUnlock+0x60>
 8001798:	f7fe ff82 	bl	80006a0 <chDbgCheckClassS>
 800179c:	680b      	ldr	r3, [r1, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800179e:	4299      	cmp	r1, r3
 80017a0:	d003      	beq.n	80017aa <chMtxUnlock+0x5a>
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	429d      	cmp	r5, r3
 80017a6:	bf38      	it	cc
 80017a8:	461d      	movcc	r5, r3
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80017aa:	68c9      	ldr	r1, [r1, #12]
      while (lmp != NULL) {
 80017ac:	2900      	cmp	r1, #0
 80017ae:	d1f3      	bne.n	8001798 <chMtxUnlock+0x48>
  tqp->next             = tp->queue.next;
 80017b0:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80017b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
      ctp->prio = newprio;
 80017b4:	60bd      	str	r5, [r7, #8]
 80017b6:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80017b8:	605c      	str	r4, [r3, #4]
      mp->next = tp->mtxlist;
 80017ba:	e9c4 0202 	strd	r0, r2, [r4, #8]
      tp->mtxlist = mp;
 80017be:	6384      	str	r4, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80017c0:	f7fe ffe6 	bl	8000790 <chSchReadyI>
  chDbgCheckClassS();
 80017c4:	f7fe ff6c 	bl	80006a0 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 80017c8:	f7fe ff7a 	bl	80006c0 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 80017cc:	6832      	ldr	r2, [r6, #0]
 80017ce:	69b3      	ldr	r3, [r6, #24]
  if (chSchIsRescRequiredI()) {
 80017d0:	6892      	ldr	r2, [r2, #8]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d81a      	bhi.n	800180e <chMtxUnlock+0xbe>
  _dbg_check_unlock();
 80017d8:	f7ff fd22 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80017dc:	f7ff fce0 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80017e0:	6833      	ldr	r3, [r6, #0]
 80017e2:	42b3      	cmp	r3, r6
 80017e4:	d004      	beq.n	80017f0 <chMtxUnlock+0xa0>
 80017e6:	69b2      	ldr	r2, [r6, #24]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	6892      	ldr	r2, [r2, #8]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d30a      	bcc.n	8001806 <chMtxUnlock+0xb6>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80017f0:	2300      	movs	r3, #0
 80017f2:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 80017f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <chMtxUnlock+0xc8>)
 80017fc:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 80017fe:	e7fe      	b.n	80017fe <chMtxUnlock+0xae>
      mp->owner = NULL;
 8001800:	2300      	movs	r3, #0
 8001802:	60ab      	str	r3, [r5, #8]
 8001804:	e7e8      	b.n	80017d8 <chMtxUnlock+0x88>
 8001806:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <chMtxUnlock+0xcc>)
 800180a:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 800180c:	e7fe      	b.n	800180c <chMtxUnlock+0xbc>
    chSchDoRescheduleAhead();
 800180e:	f7ff fcd7 	bl	80011c0 <chSchDoReschedule>
 8001812:	e7e1      	b.n	80017d8 <chMtxUnlock+0x88>
 8001814:	20000968 	.word	0x20000968
 8001818:	08003644 	.word	0x08003644
 800181c:	08003578 	.word	0x08003578

08001820 <chThdExit>:
void chThdExit(msg_t msg) {
 8001820:	b508      	push	{r3, lr}
 8001822:	4605      	mov	r5, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001824:	2320      	movs	r3, #32
 8001826:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 800182a:	4e12      	ldr	r6, [pc, #72]	; (8001874 <chThdExit+0x54>)
  _stats_start_measure_crit_thd();
 800182c:	f7ff fcc0 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001830:	f7ff fd26 	bl	8001280 <_dbg_check_lock>
 8001834:	69b4      	ldr	r4, [r6, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001836:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001838:	6265      	str	r5, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800183a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800183e:	42a8      	cmp	r0, r5
 8001840:	d006      	beq.n	8001850 <chThdExit+0x30>
  tlp->next = tp->queue.next;
 8001842:	6803      	ldr	r3, [r0, #0]
 8001844:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001846:	f7fe ffa3 	bl	8000790 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800184a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800184c:	42a8      	cmp	r0, r5
 800184e:	d1f8      	bne.n	8001842 <chThdExit+0x22>
  if ((tp->refs == (trefs_t)0) &&
 8001850:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001854:	b93b      	cbnz	r3, 8001866 <chThdExit+0x46>
 8001856:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800185a:	079b      	lsls	r3, r3, #30
 800185c:	d103      	bne.n	8001866 <chThdExit+0x46>
    REG_REMOVE(tp);
 800185e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001862:	6113      	str	r3, [r2, #16]
 8001864:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001866:	200f      	movs	r0, #15
 8001868:	f7ff fb1a 	bl	8000ea0 <chSchGoSleepS>
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800186e:	4b02      	ldr	r3, [pc, #8]	; (8001878 <chThdExit+0x58>)
 8001870:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 8001872:	e7fe      	b.n	8001872 <chThdExit+0x52>
 8001874:	20000968 	.word	0x20000968
 8001878:	08003680 	.word	0x08003680
 800187c:	00000000 	.word	0x00000000

08001880 <oqWriteTimeout>:
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  qnotify_t nfy = oqp->q_notify;
  size_t max = n;

  osalDbgCheck(n > 0U);
 8001880:	2a00      	cmp	r2, #0
 8001882:	d079      	beq.n	8001978 <oqWriteTimeout+0xf8>
                      size_t n, sysinterval_t timeout) {
 8001884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001888:	4604      	mov	r4, r0
 800188a:	b085      	sub	sp, #20
 800188c:	460d      	mov	r5, r1
 800188e:	4698      	mov	r8, r3
 8001890:	4616      	mov	r6, r2
  qnotify_t nfy = oqp->q_notify;
 8001892:	f8d0 a01c 	ldr.w	sl, [r0, #28]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001896:	2720      	movs	r7, #32
 8001898:	f387 8811 	msr	BASEPRI, r7
  _stats_start_measure_crit_thd();
 800189c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80019a8 <oqWriteTimeout+0x128>
 80018a0:	f7ff fc86 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80018a4:	f7ff fcec 	bl	8001280 <_dbg_check_lock>
 80018a8:	9701      	str	r7, [sp, #4]
 80018aa:	9602      	str	r6, [sp, #8]
 80018ac:	4637      	mov	r7, r6
  if (n > oqGetEmptyI(oqp)) {
 80018ae:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80018b0:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 80018b4:	42bb      	cmp	r3, r7
    n = oqGetEmptyI(oqp);
 80018b6:	bf34      	ite	cc
 80018b8:	68a6      	ldrcc	r6, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 80018ba:	463e      	movcs	r6, r7
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80018bc:	1a12      	subs	r2, r2, r0
  if (n < s1) {
 80018be:	42b2      	cmp	r2, r6
 80018c0:	d85f      	bhi.n	8001982 <oqWriteTimeout+0x102>
  else if (n > s1) {
 80018c2:	d325      	bcc.n	8001910 <oqWriteTimeout+0x90>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80018c4:	4632      	mov	r2, r6
 80018c6:	4629      	mov	r1, r5
 80018c8:	f7fe fd1c 	bl	8000304 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80018cc:	68e2      	ldr	r2, [r4, #12]
 80018ce:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80018d0:	68a2      	ldr	r2, [r4, #8]
 80018d2:	1b92      	subs	r2, r2, r6
 80018d4:	60a2      	str	r2, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 80018d6:	bb6e      	cbnz	r6, 8001934 <oqWriteTimeout+0xb4>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80018d8:	4641      	mov	r1, r8
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff fc38 	bl	8001150 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d0e4      	beq.n	80018ae <oqWriteTimeout+0x2e>
 80018e4:	9e02      	ldr	r6, [sp, #8]
  _dbg_check_unlock();
 80018e6:	f7ff fc9b 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80018ea:	f7ff fc59 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80018ee:	f8d9 3000 	ldr.w	r3, [r9]
 80018f2:	454b      	cmp	r3, r9
 80018f4:	d005      	beq.n	8001902 <oqWriteTimeout+0x82>
 80018f6:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	6892      	ldr	r2, [r2, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d34c      	bcc.n	800199c <oqWriteTimeout+0x11c>
 8001902:	2300      	movs	r3, #0
 8001904:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001908:	1bf0      	subs	r0, r6, r7
 800190a:	b005      	add	sp, #20
 800190c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001910:	4629      	mov	r1, r5
    s2 = n - s1;
 8001912:	eba6 0b02 	sub.w	fp, r6, r2
 8001916:	9203      	str	r2, [sp, #12]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001918:	f7fe fcf4 	bl	8000304 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 800191c:	9a03      	ldr	r2, [sp, #12]
 800191e:	68e0      	ldr	r0, [r4, #12]
 8001920:	18a9      	adds	r1, r5, r2
 8001922:	465a      	mov	r2, fp
 8001924:	f7fe fcee 	bl	8000304 <memcpy>
  oqp->q_counter -= n;
 8001928:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 800192a:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 800192c:	1b92      	subs	r2, r2, r6
    oqp->q_wrptr = oqp->q_buffer + s2;
 800192e:	4459      	add	r1, fp
 8001930:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 8001932:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8001934:	f1ba 0f00 	cmp.w	sl, #0
 8001938:	d001      	beq.n	800193e <oqWriteTimeout+0xbe>
        nfy(oqp);
 800193a:	4620      	mov	r0, r4
 800193c:	47d0      	blx	sl
  _dbg_check_unlock();
 800193e:	f7ff fc6f 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001942:	f7ff fc2d 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001946:	f8d9 2000 	ldr.w	r2, [r9]
 800194a:	454a      	cmp	r2, r9
 800194c:	d005      	beq.n	800195a <oqWriteTimeout+0xda>
 800194e:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001952:	6892      	ldr	r2, [r2, #8]
 8001954:	6889      	ldr	r1, [r1, #8]
 8001956:	4291      	cmp	r1, r2
 8001958:	d31b      	bcc.n	8001992 <oqWriteTimeout+0x112>
 800195a:	2300      	movs	r3, #0
 800195c:	f383 8811 	msr	BASEPRI, r3
 8001960:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 8001962:	1bbf      	subs	r7, r7, r6
      bp += done;
 8001964:	4435      	add	r5, r6
 8001966:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800196a:	f7ff fc21 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800196e:	f7ff fc87 	bl	8001280 <_dbg_check_lock>
  while (n > 0U) {
 8001972:	2f00      	cmp	r7, #0
 8001974:	d19b      	bne.n	80018ae <oqWriteTimeout+0x2e>
 8001976:	e7b5      	b.n	80018e4 <oqWriteTimeout+0x64>
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <oqWriteTimeout+0x128>)
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <oqWriteTimeout+0x12c>)
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8001980:	e7fe      	b.n	8001980 <oqWriteTimeout+0x100>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001982:	4632      	mov	r2, r6
 8001984:	4629      	mov	r1, r5
 8001986:	f7fe fcbd 	bl	8000304 <memcpy>
    oqp->q_wrptr += n;
 800198a:	6962      	ldr	r2, [r4, #20]
 800198c:	4432      	add	r2, r6
 800198e:	6162      	str	r2, [r4, #20]
 8001990:	e79e      	b.n	80018d0 <oqWriteTimeout+0x50>
 8001992:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <oqWriteTimeout+0x130>)
 8001996:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (true) {
 800199a:	e7fe      	b.n	800199a <oqWriteTimeout+0x11a>
 800199c:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <oqWriteTimeout+0x130>)
 80019a0:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (true) {
 80019a4:	e7fe      	b.n	80019a4 <oqWriteTimeout+0x124>
 80019a6:	bf00      	nop
 80019a8:	20000968 	.word	0x20000968
 80019ac:	08003764 	.word	0x08003764
 80019b0:	080035bc 	.word	0x080035bc
	...

080019c0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80019c0:	3030      	adds	r0, #48	; 0x30
 80019c2:	f7ff bf5d 	b.w	8001880 <oqWriteTimeout>
 80019c6:	bf00      	nop
	...

080019d0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, TIME_INFINITE);
 80019d0:	3030      	adds	r0, #48	; 0x30
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	f7ff bf53 	b.w	8001880 <oqWriteTimeout>
 80019da:	bf00      	nop
 80019dc:	0000      	movs	r0, r0
	...

080019e0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e2:	4605      	mov	r5, r0
 80019e4:	460f      	mov	r7, r1
 80019e6:	4616      	mov	r6, r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80019e8:	2320      	movs	r3, #32
 80019ea:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80019ee:	f7ff fbdf 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80019f2:	f7ff fc45 	bl	8001280 <_dbg_check_lock>
 80019f6:	e003      	b.n	8001a00 <oqPutTimeout+0x20>
 80019f8:	f7ff fbaa 	bl	8001150 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80019fc:	1e04      	subs	r4, r0, #0
 80019fe:	db27      	blt.n	8001a50 <oqPutTimeout+0x70>
  while (oqIsFullI(oqp)) {
 8001a00:	68ab      	ldr	r3, [r5, #8]
 8001a02:	4631      	mov	r1, r6
 8001a04:	4628      	mov	r0, r5
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f6      	beq.n	80019f8 <oqPutTimeout+0x18>
  *oqp->q_wrptr++ = b;
 8001a0a:	696a      	ldr	r2, [r5, #20]
  oqp->q_counter--;
 8001a0c:	68ab      	ldr	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 8001a0e:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001a10:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001a12:	6169      	str	r1, [r5, #20]
  oqp->q_counter--;
 8001a14:	60ab      	str	r3, [r5, #8]
  *oqp->q_wrptr++ = b;
 8001a16:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001a18:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8001a1c:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001a1e:	bf24      	itt	cs
 8001a20:	68eb      	ldrcs	r3, [r5, #12]
 8001a22:	616b      	strcs	r3, [r5, #20]
  if (oqp->q_notify != NULL) {
 8001a24:	69eb      	ldr	r3, [r5, #28]
 8001a26:	b103      	cbz	r3, 8001a2a <oqPutTimeout+0x4a>
    oqp->q_notify(oqp);
 8001a28:	4798      	blx	r3
  _dbg_check_unlock();
 8001a2a:	f7ff fbf9 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001a2e:	f7ff fbb7 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <oqPutTimeout+0xa4>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d004      	beq.n	8001a44 <oqPutTimeout+0x64>
 8001a3a:	6999      	ldr	r1, [r3, #24]
 8001a3c:	6892      	ldr	r2, [r2, #8]
 8001a3e:	6889      	ldr	r1, [r1, #8]
 8001a40:	4291      	cmp	r1, r2
 8001a42:	d317      	bcc.n	8001a74 <oqPutTimeout+0x94>
 8001a44:	2000      	movs	r0, #0
 8001a46:	f380 8811 	msr	BASEPRI, r0
 8001a4a:	4604      	mov	r4, r0
}
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _dbg_check_unlock();
 8001a50:	f7ff fbe6 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001a54:	f7ff fba4 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <oqPutTimeout+0xa4>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d004      	beq.n	8001a6a <oqPutTimeout+0x8a>
 8001a60:	6999      	ldr	r1, [r3, #24]
 8001a62:	6892      	ldr	r2, [r2, #8]
 8001a64:	6889      	ldr	r1, [r1, #8]
 8001a66:	4291      	cmp	r1, r2
 8001a68:	d308      	bcc.n	8001a7c <oqPutTimeout+0x9c>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f383 8811 	msr	BASEPRI, r3
 8001a70:	4620      	mov	r0, r4
 8001a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <oqPutTimeout+0xa8>)
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8001a7a:	e7fe      	b.n	8001a7a <oqPutTimeout+0x9a>
 8001a7c:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8001a7e:	4a02      	ldr	r2, [pc, #8]	; (8001a88 <oqPutTimeout+0xa8>)
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 8001a82:	e7fe      	b.n	8001a82 <oqPutTimeout+0xa2>
 8001a84:	20000968 	.word	0x20000968
 8001a88:	080035bc 	.word	0x080035bc
 8001a8c:	00000000 	.word	0x00000000

08001a90 <println.constprop.0>:
static void println(char *p) {

  while (*p) {
    sdPut(&SD2, *p++);
  }
  sdWriteTimeout(&SD2, (uint8_t *)"\r\n", 2, TIME_INFINITE);
 8001a90:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <println.constprop.0+0x10>)
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <println.constprop.0+0x14>)
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f7ff bef1 	b.w	8001880 <oqWriteTimeout>
 8001a9e:	bf00      	nop
 8001aa0:	08003500 	.word	0x08003500
 8001aa4:	20000870 	.word	0x20000870
	...

08001ab0 <printn>:
}

/**
 *
 */
static void printn(int16_t n) {
 8001ab0:	b570      	push	{r4, r5, r6, lr}
  char buf[16], *p;

  if (n > 0)
 8001ab2:	1e04      	subs	r4, r0, #0
static void printn(int16_t n) {
 8001ab4:	b084      	sub	sp, #16
    sdPut(&SD2, '+');
 8001ab6:	f04f 32ff 	mov.w	r2, #4294967295
  if (n > 0)
 8001aba:	dd27      	ble.n	8001b0c <printn+0x5c>
    sdPut(&SD2, '+');
 8001abc:	481d      	ldr	r0, [pc, #116]	; (8001b34 <printn+0x84>)
 8001abe:	212b      	movs	r1, #43	; 0x2b
 8001ac0:	f7ff ff8e 	bl	80019e0 <oqPutTimeout>
static void printn(int16_t n) {
 8001ac4:	466d      	mov	r5, sp
  if (!n)
    sdPut(&SD2, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8001ac6:	481c      	ldr	r0, [pc, #112]	; (8001b38 <printn+0x88>)
static void printn(int16_t n) {
 8001ac8:	462a      	mov	r2, r5
      *p++ = (n % 10) + '0', n /= 10;
 8001aca:	fb80 3104 	smull	r3, r1, r0, r4
 8001ace:	17e3      	asrs	r3, r4, #31
 8001ad0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8001ad4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001ad8:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 8001adc:	3130      	adds	r1, #48	; 0x30
 8001ade:	b2c9      	uxtb	r1, r1
 8001ae0:	b21c      	sxth	r4, r3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8001ae8:	2c00      	cmp	r4, #0
 8001aea:	d1ee      	bne.n	8001aca <printn+0x1a>
    while (p > buf)
 8001aec:	42aa      	cmp	r2, r5
 8001aee:	d90b      	bls.n	8001b08 <printn+0x58>
      sdPut(&SD2, *--p);
 8001af0:	4e10      	ldr	r6, [pc, #64]	; (8001b34 <printn+0x84>)
 8001af2:	461c      	mov	r4, r3
 8001af4:	e001      	b.n	8001afa <printn+0x4a>
 8001af6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 8001afa:	f04f 32ff 	mov.w	r2, #4294967295
 8001afe:	4630      	mov	r0, r6
 8001b00:	f7ff ff6e 	bl	80019e0 <oqPutTimeout>
    while (p > buf)
 8001b04:	42a5      	cmp	r5, r4
 8001b06:	d1f6      	bne.n	8001af6 <printn+0x46>
  }
}
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}
    sdPut(&SD2, '-');
 8001b0c:	212d      	movs	r1, #45	; 0x2d
 8001b0e:	4809      	ldr	r0, [pc, #36]	; (8001b34 <printn+0x84>)
 8001b10:	f7ff ff66 	bl	80019e0 <oqPutTimeout>
    n = abs(n);
 8001b14:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8001b18:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8001b1c:	b20c      	sxth	r4, r1
  if (!n)
 8001b1e:	2c00      	cmp	r4, #0
 8001b20:	d1d0      	bne.n	8001ac4 <printn+0x14>
    sdPut(&SD2, '0');
 8001b22:	4804      	ldr	r0, [pc, #16]	; (8001b34 <printn+0x84>)
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	2130      	movs	r1, #48	; 0x30
}
 8001b2a:	b004      	add	sp, #16
 8001b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sdPut(&SD2, '0');
 8001b30:	f7ff bf56 	b.w	80019e0 <oqPutTimeout>
 8001b34:	20000870 	.word	0x20000870
 8001b38:	66666667 	.word	0x66666667
 8001b3c:	00000000 	.word	0x00000000

08001b40 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <main+0x98>)
  PWR->CR |= PWR_CR_DBP;
 8001b42:	4826      	ldr	r0, [pc, #152]	; (8001bdc <main+0x9c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8001b4a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
 * Application entry point.
 */


int main(void)
{
 8001b4e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b5a:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8001b5c:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001b60:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	615c      	str	r4, [r3, #20]
 8001b66:	2200      	movs	r2, #0
 8001b68:	6959      	ldr	r1, [r3, #20]
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001b6e:	6a19      	ldr	r1, [r3, #32]
 8001b70:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8001b74:	6219      	str	r1, [r3, #32]
 8001b76:	6a19      	ldr	r1, [r3, #32]
 8001b78:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001b7c:	6219      	str	r1, [r3, #32]
 8001b7e:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8001b80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b82:	625c      	str	r4, [r3, #36]	; 0x24
 8001b84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
 8001b88:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8001b8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b8c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b90:	6419      	str	r1, [r3, #64]	; 0x40
 8001b92:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001b94:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b98:	6619      	str	r1, [r3, #96]	; 0x60
 8001b9a:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8001b9c:	6801      	ldr	r1, [r0, #0]
 8001b9e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001ba2:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001ba4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001ba6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001baa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001bae:	b08b      	sub	sp, #44	; 0x2c
 8001bb0:	d003      	beq.n	8001bba <main+0x7a>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001bb2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001bb6:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001bb8:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001bba:	4808      	ldr	r0, [pc, #32]	; (8001bdc <main+0x9c>)
  dma.allocated_mask = 0U;
 8001bbc:	4908      	ldr	r1, [pc, #32]	; (8001be0 <main+0xa0>)
 8001bbe:	6842      	ldr	r2, [r0, #4]
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <main+0xa4>)
 8001bc2:	4c09      	ldr	r4, [pc, #36]	; (8001be8 <main+0xa8>)
 8001bc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bc8:	2600      	movs	r6, #0
 8001bca:	6042      	str	r2, [r0, #4]
 8001bcc:	460a      	mov	r2, r1
 8001bce:	600e      	str	r6, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001bd0:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8001bd4:	e00c      	b.n	8001bf0 <main+0xb0>
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	20000ba4 	.word	0x20000ba4
 8001be4:	08003780 	.word	0x08003780
 8001be8:	40026010 	.word	0x40026010
 8001bec:	f853 4c0c 	ldr.w	r4, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001bf0:	6026      	str	r6, [r4, #0]
    dma.streams[i].func = NULL;
 8001bf2:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001bf4:	428b      	cmp	r3, r1
    dma.streams[i].func = NULL;
 8001bf6:	6056      	str	r6, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001bf8:	f102 0208 	add.w	r2, r2, #8
 8001bfc:	d1f6      	bne.n	8001bec <main+0xac>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001bfe:	4fc9      	ldr	r7, [pc, #804]	; (8001f24 <main+0x3e4>)
  i2cp->state  = I2C_STOP;
 8001c00:	4dc9      	ldr	r5, [pc, #804]	; (8001f28 <main+0x3e8>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001c02:	4aca      	ldr	r2, [pc, #808]	; (8001f2c <main+0x3ec>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001c04:	48ca      	ldr	r0, [pc, #808]	; (8001f30 <main+0x3f0>)
  I2CD3.i2c    = I2C3;
 8001c06:	f8df e378 	ldr.w	lr, [pc, #888]	; 8001f80 <main+0x440>
  i2cp->config = NULL;
 8001c0a:	606e      	str	r6, [r5, #4]
 8001c0c:	2360      	movs	r3, #96	; 0x60
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001c0e:	f04f 38ff 	mov.w	r8, #4294967295
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c12:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8001c16:	f8c2 8008 	str.w	r8, [r2, #8]
 8001c1a:	f44f 7480 	mov.w	r4, #256	; 0x100
  mp->owner = NULL;
 8001c1e:	616e      	str	r6, [r5, #20]
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1; //assigning USART pointer to address of USART port base register
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8001c20:	f8df 9360 	ldr.w	r9, [pc, #864]	; 8001f84 <main+0x444>
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001c24:	f8c2 800c 	str.w	r8, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001c28:	f8c0 8008 	str.w	r8, [r0, #8]
 8001c2c:	2280      	movs	r2, #128	; 0x80
  I2CD3.thread = NULL;
 8001c2e:	61ee      	str	r6, [r5, #28]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001c30:	f8c0 800c 	str.w	r8, [r0, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c34:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c38:	f44f 7000 	mov.w	r0, #512	; 0x200
  I2CD3.i2c    = I2C3;
 8001c3c:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
 8001c40:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001c44:	f8c7 c000 	str.w	ip, [r7]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c48:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c4c:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 8001c50:	f8df a334 	ldr.w	sl, [pc, #820]	; 8001f88 <main+0x448>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c54:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001c58:	603a      	str	r2, [r7, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c5a:	f887 3308 	strb.w	r3, [r7, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c5e:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001c62:	603c      	str	r4, [r7, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c64:	f887 3309 	strb.w	r3, [r7, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c68:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001c6c:	6038      	str	r0, [r7, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c6e:	f887 330a 	strb.w	r3, [r7, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c72:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c76:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001c7a:	f8c7 c000 	str.w	ip, [r7]
  tqp->next = (thread_t *)tqp;
 8001c7e:	f105 0c0c 	add.w	ip, r5, #12
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c82:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
  i2cp->state  = I2C_STOP;
 8001c86:	f04f 0b01 	mov.w	fp, #1
 8001c8a:	f8c5 c00c 	str.w	ip, [r5, #12]
  sdObjectInit(&SD2, NULL, notify2);
 8001c8e:	49a9      	ldr	r1, [pc, #676]	; (8001f34 <main+0x3f4>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c90:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
  tqp->prev = (thread_t *)tqp;
 8001c94:	f8c5 c010 	str.w	ip, [r5, #16]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001c98:	6038      	str	r0, [r7, #0]
 8001c9a:	4648      	mov	r0, r9
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c9c:	f887 3328 	strb.w	r3, [r7, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ca0:	f8c7 4184 	str.w	r4, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001ca4:	607c      	str	r4, [r7, #4]
 8001ca6:	f885 b000 	strb.w	fp, [r5]
  I2CD3.dmatx  = NULL;
 8001caa:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
 8001cae:	f7fe fbc7 	bl	8000440 <sdObjectInit.constprop.0>
  SD2.usart = USART2;
 8001cb2:	4ba1      	ldr	r3, [pc, #644]	; (8001f38 <main+0x3f8>)
  sdObjectInit(&SD4, NULL, notify4);
 8001cb4:	49a1      	ldr	r1, [pc, #644]	; (8001f3c <main+0x3fc>)
  SD2.usart = USART2;
 8001cb6:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
  sdObjectInit(&SD4, NULL, notify4);
 8001cba:	4650      	mov	r0, sl
 8001cbc:	f7fe fbc0 	bl	8000440 <sdObjectInit.constprop.0>
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001cc0:	499f      	ldr	r1, [pc, #636]	; (8001f40 <main+0x400>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001cc2:	4ba0      	ldr	r3, [pc, #640]	; (8001f44 <main+0x404>)
 8001cc4:	f881 b000 	strb.w	fp, [r1]
 8001cc8:	6c18      	ldr	r0, [r3, #64]	; 0x40
  spip->config = NULL;
 8001cca:	604e      	str	r6, [r1, #4]
 8001ccc:	ea40 000b 	orr.w	r0, r0, fp
 8001cd0:	6418      	str	r0, [r3, #64]	; 0x40
 8001cd2:	6e1c      	ldr	r4, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001cd4:	489c      	ldr	r0, [pc, #624]	; (8001f48 <main+0x408>)
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8001cd6:	608e      	str	r6, [r1, #8]
  ST_ENABLE_CLOCK();
 8001cd8:	ea44 040b 	orr.w	r4, r4, fp
 8001cdc:	661c      	str	r4, [r3, #96]	; 0x60
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 8001ce0:	f8d0 e008 	ldr.w	lr, [r0, #8]
  tqp->next = (thread_t *)tqp;
 8001ce4:	4c99      	ldr	r4, [pc, #612]	; (8001f4c <main+0x40c>)
 8001ce6:	614e      	str	r6, [r1, #20]
 8001ce8:	ea4e 0e0b 	orr.w	lr, lr, fp

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = NULL;
  SPID2.dmatx     = NULL;
 8001cec:	e9c1 6608 	strd	r6, r6, [r1, #32]
 8001cf0:	f8c0 e008 	str.w	lr, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001cf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cf8:	f242 0ecf 	movw	lr, #8399	; 0x20cf
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8001d02:	6064      	str	r4, [r4, #4]
  SPID2.spi       = SPI2;
 8001d04:	f8df e284 	ldr.w	lr, [pc, #644]	; 8001f8c <main+0x44c>
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001d08:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001d0c:	6186      	str	r6, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001d0e:	6346      	str	r6, [r0, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8001d10:	60c6      	str	r6, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8001d12:	6046      	str	r6, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001d14:	f8c0 b014 	str.w	fp, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001d18:	f8c0 b000 	str.w	fp, [r0]
 8001d1c:	f887 231c 	strb.w	r2, [r7, #796]	; 0x31c
  SD4.usart = UART4;
 8001d20:	4a8b      	ldr	r2, [pc, #556]	; (8001f50 <main+0x410>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001d22:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8001f90 <main+0x450>
 8001d26:	f8ca 2074 	str.w	r2, [sl, #116]	; 0x74
 8001d2a:	f8c1 e01c 	str.w	lr, [r1, #28]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8001d2e:	4a89      	ldr	r2, [pc, #548]	; (8001f54 <main+0x414>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8001d30:	f8df e260 	ldr.w	lr, [pc, #608]	; 8001f94 <main+0x454>
  tqp->next = (thread_t *)tqp;
 8001d34:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <main+0x418>)
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8001d36:	628a      	str	r2, [r1, #40]	; 0x28
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8001d38:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d40:	f101 0e0c 	add.w	lr, r1, #12
 8001d44:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8001d48:	f8c1 e00c 	str.w	lr, [r1, #12]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d4c:	603a      	str	r2, [r7, #0]
  tqp->prev = (thread_t *)tqp;
 8001d4e:	f8c1 e010 	str.w	lr, [r1, #16]
 8001d52:	4f82      	ldr	r7, [pc, #520]	; (8001f5c <main+0x41c>)
  tqp->next = (thread_t *)tqp;
 8001d54:	6024      	str	r4, [r4, #0]
 8001d56:	f10c 010c 	add.w	r1, ip, #12
  ch.rlist.prio = NOPRIO;
 8001d5a:	60a6      	str	r6, [r4, #8]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8001d5c:	f103 0e24 	add.w	lr, r3, #36	; 0x24
  tqp->prev = (thread_t *)tqp;
 8001d60:	e9cc 1103 	strd	r1, r1, [ip, #12]
 8001d64:	f8cc 7000 	str.w	r7, [ip]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 8001d68:	e9cc 6601 	strd	r6, r6, [ip, #4]
 8001d6c:	f8cc 6014 	str.w	r6, [ip, #20]
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 8001d70:	2714      	movs	r7, #20
 8001d72:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 8001d76:	619f      	str	r7, [r3, #24]
 8001d78:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
 8001d7c:	f103 073c 	add.w	r7, r3, #60	; 0x3c
 8001d80:	f103 0e40 	add.w	lr, r3, #64	; 0x40
 8001d84:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8001d88:	f103 0c44 	add.w	ip, r3, #68	; 0x44
  mp->align = align;
  mp->provider = provider;
 8001d8c:	4a74      	ldr	r2, [pc, #464]	; (8001f60 <main+0x420>)
 8001d8e:	63df      	str	r7, [r3, #60]	; 0x3c
 8001d90:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
 8001d94:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
 8001d98:	f103 0a10 	add.w	sl, r3, #16
  mp->object_size = size;
 8001d9c:	211c      	movs	r1, #28
  mp->align = align;
 8001d9e:	2704      	movs	r7, #4
  ch_memcore.basemem = __heap_base__;
 8001da0:	4870      	ldr	r0, [pc, #448]	; (8001f64 <main+0x424>)
 8001da2:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8001f98 <main+0x458>
  ch_memcore.topmem  = __heap_end__;
 8001da6:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8001f9c <main+0x45c>
  mp->object_size = size;
 8001daa:	6319      	str	r1, [r3, #48]	; 0x30
  mp->provider = provider;
 8001dac:	621a      	str	r2, [r3, #32]
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
 8001db0:	e9c3 3300 	strd	r3, r3, [r3]
 8001db4:	609e      	str	r6, [r3, #8]
  mp->next = NULL;
 8001db6:	615e      	str	r6, [r3, #20]
 8001db8:	62de      	str	r6, [r3, #44]	; 0x2c
 8001dba:	f8c3 a010 	str.w	sl, [r3, #16]
  mp->align = align;
 8001dbe:	61df      	str	r7, [r3, #28]
 8001dc0:	635f      	str	r7, [r3, #52]	; 0x34
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001dc2:	1861      	adds	r1, r4, r1
  tmp->cumulative = (rttime_t)0;
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2300      	movs	r3, #0
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001dc8:	e9c4 4404 	strd	r4, r4, [r4, #16]
  ch.vtlist.lasttime = (systime_t)0;
 8001dcc:	e9c4 8609 	strd	r8, r6, [r4, #36]	; 0x24
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001dd0:	e9c4 1107 	strd	r1, r1, [r4, #28]
 8001dd4:	e9c0 ec00 	strd	lr, ip, [r0]
  ch.dbg.isr_cnt  = (cnt_t)0;
 8001dd8:	6326      	str	r6, [r4, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
 8001dda:	6366      	str	r6, [r4, #52]	; 0x34
 8001ddc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  tmp->last       = (rtcnt_t)0;
 8001de0:	e9cd 6605 	strd	r6, r6, [sp, #20]
  tmp->best       = (rtcnt_t)-1;
 8001de4:	f8cd 8010 	str.w	r8, [sp, #16]
  ch.tm.offset = (rtcnt_t)0;
 8001de8:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
  tmp->n          = (ucnt_t)0;
 8001dec:	9607      	str	r6, [sp, #28]
    chTMStartMeasurementX(&tm);
 8001dee:	a804      	add	r0, sp, #16
 8001df0:	f7fe fc46 	bl	8000680 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8001df4:	a804      	add	r0, sp, #16
 8001df6:	f7fe fc13 	bl	8000620 <chTMStopMeasurementX>
  } while (i > 0U);
 8001dfa:	3f01      	subs	r7, #1
 8001dfc:	d1f7      	bne.n	8001dee <main+0x2ae>
  REG_INSERT(tp);
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <main+0x428>)
 8001e00:	f8d4 e014 	ldr.w	lr, [r4, #20]
  ch.tm.offset = tm.best;
 8001e04:	9a04      	ldr	r2, [sp, #16]
 8001e06:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  tmp->best       = (rtcnt_t)-1;
 8001e0a:	f04f 36ff 	mov.w	r6, #4294967295
  tmp->cumulative = (rttime_t)0;
 8001e0e:	2000      	movs	r0, #0
 8001e10:	2100      	movs	r1, #0
  tp->prio      = prio;
 8001e12:	2280      	movs	r2, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8001e14:	f04f 0c01 	mov.w	ip, #1
  tp->name      = name;
 8001e18:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001fa0 <main+0x460>
  tmp->best       = (rtcnt_t)-1;
 8001e1c:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 8001e20:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  tp->prio      = prio;
 8001e24:	6422      	str	r2, [r4, #64]	; 0x40
  tp->realprio  = prio;
 8001e26:	6762      	str	r2, [r4, #116]	; 0x74
  tp->name      = name;
 8001e28:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
  tqp->next = (thread_t *)tqp;
 8001e2c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tmp->last       = (rtcnt_t)0;
 8001e30:	e9c4 772b 	strd	r7, r7, [r4, #172]	; 0xac
 8001e34:	e9c4 7731 	strd	r7, r7, [r4, #196]	; 0xc4
  tp->epending  = (eventmask_t)0;
 8001e38:	e9c4 771b 	strd	r7, r7, [r4, #108]	; 0x6c
  REG_INSERT(tp);
 8001e3c:	e9c4 4e12 	strd	r4, lr, [r4, #72]	; 0x48
  tmp->cumulative = (rttime_t)0;
 8001e40:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
 8001e44:	e9c4 0134 	strd	r0, r1, [r4, #208]	; 0xd0
  ch.kernel_stats.n_irq = (ucnt_t)0;
 8001e48:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8001e4c:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
  tmp->n          = (ucnt_t)0;
 8001e50:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
 8001e54:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001e58:	f884 7059 	strb.w	r7, [r4, #89]	; 0x59
  tp->refs      = (trefs_t)1;
 8001e5c:	f884 c05a 	strb.w	ip, [r4, #90]	; 0x5a
  tlp->next = (thread_t *)tlp;
 8001e60:	f103 0828 	add.w	r8, r3, #40	; 0x28
  REG_INSERT(tp);
 8001e64:	f8ce 3010 	str.w	r3, [lr, #16]
  tmp->best       = (rtcnt_t)-1;
 8001e68:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    currp->wabase = &__main_thread_stack_base__;
 8001e6c:	4e3f      	ldr	r6, [pc, #252]	; (8001f6c <main+0x42c>)
  tqp->prev = (thread_t *)tqp;
 8001e6e:	66a2      	str	r2, [r4, #104]	; 0x68
  tqp->next = (thread_t *)tqp;
 8001e70:	e9c4 8218 	strd	r8, r2, [r4, #96]	; 0x60
  tmp->last       = (rtcnt_t)0;
 8001e74:	e9c4 7721 	strd	r7, r7, [r4, #132]	; 0x84
 8001e78:	6163      	str	r3, [r4, #20]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e7a:	2220      	movs	r2, #32
  tmp->n          = (ucnt_t)0;
 8001e7c:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
  tmp->cumulative = (rttime_t)0;
 8001e80:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001e84:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8001e86:	f884 c058 	strb.w	ip, [r4, #88]	; 0x58
    currp->wabase = &__main_thread_stack_base__;
 8001e8a:	6566      	str	r6, [r4, #84]	; 0x54
 8001e8c:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("cpsie i" : : : "memory");
 8001e90:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <main+0x430>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001e94:	4937      	ldr	r1, [pc, #220]	; (8001f74 <main+0x434>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e96:	68d8      	ldr	r0, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e98:	f8df c108 	ldr.w	ip, [pc, #264]	; 8001fa4 <main+0x464>
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001e9c:	4e36      	ldr	r6, [pc, #216]	; (8001f78 <main+0x438>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
 8001ea2:	ea00 000e 	and.w	r0, r0, lr
  reg_value  =  (reg_value                                   |
 8001ea6:	4301      	orrs	r1, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001ea8:	60d9      	str	r1, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001eaa:	f8dc 100c 	ldr.w	r1, [ip, #12]
  chTMStartMeasurementX(&currp->stats);
 8001eae:	69a0      	ldr	r0, [r4, #24]
 8001eb0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001eb4:	f8cc 100c 	str.w	r1, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001eb8:	6831      	ldr	r1, [r6, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	f04f 0c10 	mov.w	ip, #16
 8001ebe:	f041 0101 	orr.w	r1, r1, #1
 8001ec2:	6031      	str	r1, [r6, #0]
 8001ec4:	3048      	adds	r0, #72	; 0x48
 8001ec6:	f883 c01f 	strb.w	ip, [r3, #31]
 8001eca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ece:	f7fe fbd7 	bl	8000680 <chTMStartMeasurementX>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001ed2:	e9d4 130c 	ldrd	r1, r3, [r4, #48]	; 0x30
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	f040 80b4 	bne.w	8002044 <main+0x504>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001edc:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 8001ee0:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001ee2:	f382 8811 	msr	BASEPRI, r2
  _stats_start_measure_crit_thd();
 8001ee6:	f7ff f963 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001eea:	f7ff f9c9 	bl	8001280 <_dbg_check_lock>
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8001eee:	6927      	ldr	r7, [r4, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8001ef0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  _dbg_check_unlock();
 8001efa:	f7ff f991 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001efe:	f7ff f94f 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	42a3      	cmp	r3, r4
 8001f06:	d005      	beq.n	8001f14 <main+0x3d4>
 8001f08:	69a2      	ldr	r2, [r4, #24]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	6892      	ldr	r2, [r2, #8]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	f0c0 8161 	bcc.w	80021d6 <main+0x696>
 8001f14:	f04f 0800 	mov.w	r8, #0
 8001f18:	f388 8811 	msr	BASEPRI, r8
#endif
  chSysUnlock();

  return tp;
 8001f1c:	4e17      	ldr	r6, [pc, #92]	; (8001f7c <main+0x43c>)
 8001f1e:	f04f 0b20 	mov.w	fp, #32
 8001f22:	e041      	b.n	8001fa8 <main+0x468>
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	20000808 	.word	0x20000808
 8001f2c:	40026000 	.word	0x40026000
 8001f30:	40026400 	.word	0x40026400
 8001f34:	08000551 	.word	0x08000551
 8001f38:	40004400 	.word	0x40004400
 8001f3c:	08000561 	.word	0x08000561
 8001f40:	20000938 	.word	0x20000938
 8001f44:	40023800 	.word	0x40023800
 8001f48:	e0042000 	.word	0xe0042000
 8001f4c:	20000968 	.word	0x20000968
 8001f50:	40004c00 	.word	0x40004c00
 8001f54:	00010016 	.word	0x00010016
 8001f58:	20000a40 	.word	0x20000a40
 8001f5c:	080016f1 	.word	0x080016f1
 8001f60:	08000731 	.word	0x08000731
 8001f64:	20000b80 	.word	0x20000b80
 8001f68:	200009a0 	.word	0x200009a0
 8001f6c:	20000400 	.word	0x20000400
 8001f70:	e000ed00 	.word	0xe000ed00
 8001f74:	05fa0300 	.word	0x05fa0300
 8001f78:	e0001000 	.word	0xe0001000
 8001f7c:	20000a88 	.word	0x20000a88
 8001f80:	40005c00 	.word	0x40005c00
 8001f84:	20000840 	.word	0x20000840
 8001f88:	200008bc 	.word	0x200008bc
 8001f8c:	40003800 	.word	0x40003800
 8001f90:	20000b88 	.word	0x20000b88
 8001f94:	00010046 	.word	0x00010046
 8001f98:	20000c30 	.word	0x20000c30
 8001f9c:	20020000 	.word	0x20020000
 8001fa0:	08003834 	.word	0x08003834
 8001fa4:	e000edf0 	.word	0xe000edf0
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	42b3      	cmp	r3, r6
 8001fac:	f000 810f 	beq.w	80021ce <main+0x68e>
 8001fb0:	f38b 8811 	msr	BASEPRI, fp
  _stats_start_measure_crit_thd();
 8001fb4:	f7ff f8fc 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001fb8:	f7ff f962 	bl	8001280 <_dbg_check_lock>
  ntp = tp->newer;
 8001fbc:	f8d7 a010 	ldr.w	sl, [r7, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8001fc0:	45a2      	cmp	sl, r4
 8001fc2:	f000 8101 	beq.w	80021c8 <main+0x688>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8001fc6:	f89a 3022 	ldrb.w	r3, [sl, #34]	; 0x22
 8001fca:	2bff      	cmp	r3, #255	; 0xff
 8001fcc:	f000 810b 	beq.w	80021e6 <main+0x6a6>
    ntp->refs++;
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f88a 3022 	strb.w	r3, [sl, #34]	; 0x22
  _dbg_check_unlock();
 8001fd6:	f7ff f923 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001fda:	f7ff f8e1 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001fde:	6822      	ldr	r2, [r4, #0]
 8001fe0:	42a2      	cmp	r2, r4
 8001fe2:	d005      	beq.n	8001ff0 <main+0x4b0>
 8001fe4:	69a3      	ldr	r3, [r4, #24]
 8001fe6:	6892      	ldr	r2, [r2, #8]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4293      	cmp	r3, r2
 8001fec:	f0c0 80f7 	bcc.w	80021de <main+0x69e>
 8001ff0:	f388 8811 	msr	BASEPRI, r8
 8001ff4:	f38b 8811 	msr	BASEPRI, fp
  _stats_start_measure_crit_thd();
 8001ff8:	f7ff f8da 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001ffc:	f7ff f940 	bl	8001280 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8002000:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80f6 	beq.w	80021f6 <main+0x6b6>
  tp->refs--;
 800200a:	3b01      	subs	r3, #1
 800200c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002016:	2b0f      	cmp	r3, #15
 8002018:	d018      	beq.n	800204c <main+0x50c>
  _dbg_check_unlock();
 800201a:	f7ff f901 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800201e:	f7ff f8bf 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	42a3      	cmp	r3, r4
 8002026:	d005      	beq.n	8002034 <main+0x4f4>
 8002028:	69a2      	ldr	r2, [r4, #24]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	6892      	ldr	r2, [r2, #8]
 800202e:	429a      	cmp	r2, r3
 8002030:	f0c0 80dd 	bcc.w	80021ee <main+0x6ae>
 8002034:	f388 8811 	msr	BASEPRI, r8
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 8002038:	f1ba 0f00 	cmp.w	sl, #0
 800203c:	f000 80f4 	beq.w	8002228 <main+0x6e8>
 8002040:	4657      	mov	r7, sl
 8002042:	e7b1      	b.n	8001fa8 <main+0x468>
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8002046:	4b6e      	ldr	r3, [pc, #440]	; (8002200 <main+0x6c0>)
 8002048:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 800204a:	e7fe      	b.n	800204a <main+0x50a>
    REG_REMOVE(tp);
 800204c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8002050:	6113      	str	r3, [r2, #16]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	615a      	str	r2, [r3, #20]
  _dbg_check_unlock();
 8002056:	f7ff f8e3 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800205a:	f7ff f8a1 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	42a2      	cmp	r2, r4
 8002062:	d004      	beq.n	800206e <main+0x52e>
 8002064:	69a3      	ldr	r3, [r4, #24]
 8002066:	6892      	ldr	r2, [r2, #8]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4293      	cmp	r3, r2
 800206c:	d32e      	bcc.n	80020cc <main+0x58c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800206e:	f388 8811 	msr	BASEPRI, r8
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8002072:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d02e      	beq.n	80020dc <main+0x59c>
 800207e:	2b02      	cmp	r3, #2
 8002080:	d1da      	bne.n	8002038 <main+0x4f8>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8002082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	69ff      	ldr	r7, [r7, #28]
 8002088:	f38b 8811 	msr	BASEPRI, fp
  _stats_start_measure_crit_thd();
 800208c:	f7ff f890 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002090:	f7ff f8f6 	bl	8001280 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8002094:	f7fe fb14 	bl	80006c0 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 8002098:	9b01      	ldr	r3, [sp, #4]
 800209a:	b1db      	cbz	r3, 80020d4 <main+0x594>
 800209c:	b1d7      	cbz	r7, 80020d4 <main+0x594>
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	3a01      	subs	r2, #1
 80020a2:	4217      	tst	r7, r2
 80020a4:	d116      	bne.n	80020d4 <main+0x594>
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	603a      	str	r2, [r7, #0]
  mp->next = php;
 80020aa:	601f      	str	r7, [r3, #0]
  _dbg_check_unlock();
 80020ac:	f7ff f8b8 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80020b0:	f7ff f876 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	42a3      	cmp	r3, r4
 80020b8:	d0bc      	beq.n	8002034 <main+0x4f4>
 80020ba:	69a2      	ldr	r2, [r4, #24]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	6892      	ldr	r2, [r2, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d2b7      	bcs.n	8002034 <main+0x4f4>
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80020c6:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <main+0x6c4>)
 80020c8:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80020ca:	e7fe      	b.n	80020ca <main+0x58a>
 80020cc:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <main+0x6c8>)
 80020d0:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80020d2:	e7fe      	b.n	80020d2 <main+0x592>
 80020d4:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80020d6:	4b4d      	ldr	r3, [pc, #308]	; (800220c <main+0x6cc>)
 80020d8:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80020da:	e7fe      	b.n	80020da <main+0x59a>
      chHeapFree(chThdGetWorkingAreaX(tp));
 80020dc:	69ff      	ldr	r7, [r7, #28]
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 80020de:	2f00      	cmp	r7, #0
 80020e0:	d059      	beq.n	8002196 <main+0x656>
 80020e2:	0778      	lsls	r0, r7, #29
 80020e4:	d157      	bne.n	8002196 <main+0x656>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 80020e6:	e957 0302 	ldrd	r0, r3, [r7, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80020ea:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80020ec:	08db      	lsrs	r3, r3, #3
  qp = &heapp->header;
 80020ee:	1d01      	adds	r1, r0, #4
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80020f0:	f847 3c04 	str.w	r3, [r7, #-4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80020f4:	300c      	adds	r0, #12
  hp = (heap_header_t *)p - 1U;
 80020f6:	f1a7 0308 	sub.w	r3, r7, #8
  qp = &heapp->header;
 80020fa:	9103      	str	r1, [sp, #12]
  H_LOCK(heapp);
 80020fc:	9001      	str	r0, [sp, #4]
  hp = (heap_header_t *)p - 1U;
 80020fe:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002100:	f38b 8811 	msr	BASEPRI, fp
  _stats_start_measure_crit_thd();
 8002104:	f7ff f854 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002108:	f7ff f8ba 	bl	8001280 <_dbg_check_lock>
  chMtxLockS(mp);
 800210c:	9801      	ldr	r0, [sp, #4]
 800210e:	f7fe fef7 	bl	8000f00 <chMtxLockS>
  _dbg_check_unlock();
 8002112:	f7ff f885 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002116:	f7ff f843 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800211a:	6822      	ldr	r2, [r4, #0]
 800211c:	9903      	ldr	r1, [sp, #12]
 800211e:	42a2      	cmp	r2, r4
 8002120:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
 8002124:	d005      	beq.n	8002132 <main+0x5f2>
 8002126:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800212a:	69a2      	ldr	r2, [r4, #24]
 800212c:	6892      	ldr	r2, [r2, #8]
 800212e:	4562      	cmp	r2, ip
 8002130:	d335      	bcc.n	800219e <main+0x65e>
 8002132:	f388 8811 	msr	BASEPRI, r8
  qp = &heapp->header;
 8002136:	468c      	mov	ip, r1

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 8002138:	4563      	cmp	r3, ip
 800213a:	d306      	bcc.n	800214a <main+0x60a>
 800213c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8002140:	3201      	adds	r2, #1
 8002142:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
 8002146:	4293      	cmp	r3, r2
 8002148:	d31f      	bcc.n	800218a <main+0x64a>

    if (((qp == &heapp->header) || (hp > qp)) &&
 800214a:	4561      	cmp	r1, ip
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800214c:	f8dc 2000 	ldr.w	r2, [ip]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8002150:	d001      	beq.n	8002156 <main+0x616>
 8002152:	4563      	cmp	r3, ip
 8002154:	d91d      	bls.n	8002192 <main+0x652>
 8002156:	b10a      	cbz	r2, 800215c <main+0x61c>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8002158:	4293      	cmp	r3, r2
 800215a:	d21a      	bcs.n	8002192 <main+0x652>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800215c:	f857 1c04 	ldr.w	r1, [r7, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8002160:	f847 2c08 	str.w	r2, [r7, #-8]
      H_NEXT(qp) = hp;
 8002164:	f8cc 3000 	str.w	r3, [ip]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8002168:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800216c:	3101      	adds	r1, #1
 800216e:	eb03 0ec1 	add.w	lr, r3, r1, lsl #3
 8002172:	4572      	cmp	r2, lr
 8002174:	d020      	beq.n	80021b8 <main+0x678>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 8002176:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800217a:	1c51      	adds	r1, r2, #1
 800217c:	eb0c 01c1 	add.w	r1, ip, r1, lsl #3
 8002180:	428b      	cmp	r3, r1
 8002182:	d010      	beq.n	80021a6 <main+0x666>
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8002184:	f7ff fae4 	bl	8001750 <chMtxUnlock>

  return;
 8002188:	e756      	b.n	8002038 <main+0x4f8>
  __ASM volatile ("cpsid i" : : : "memory");
 800218a:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800218c:	4b20      	ldr	r3, [pc, #128]	; (8002210 <main+0x6d0>)
 800218e:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 8002190:	e7fe      	b.n	8002190 <main+0x650>
    qp = H_NEXT(qp);
 8002192:	4694      	mov	ip, r2
  while (true) {
 8002194:	e7d0      	b.n	8002138 <main+0x5f8>
 8002196:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <main+0x6d0>)
 800219a:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 800219c:	e7fe      	b.n	800219c <main+0x65c>
 800219e:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <main+0x6d4>)
 80021a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80021a4:	e7fe      	b.n	80021a4 <main+0x664>
        H_NEXT(qp) = H_NEXT(hp);
 80021a6:	e957 1302 	ldrd	r1, r3, [r7, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80021aa:	3301      	adds	r3, #1
 80021ac:	4413      	add	r3, r2
        H_NEXT(qp) = H_NEXT(hp);
 80021ae:	f8cc 1000 	str.w	r1, [ip]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80021b2:	f8cc 3004 	str.w	r3, [ip, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80021b6:	e7e5      	b.n	8002184 <main+0x644>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80021b8:	e9d2 2e00 	ldrd	r2, lr, [r2]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80021bc:	4471      	add	r1, lr
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80021be:	f847 2c08 	str.w	r2, [r7, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80021c2:	f847 1c04 	str.w	r1, [r7, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80021c6:	e7d6      	b.n	8002176 <main+0x636>
    ntp = NULL;
 80021c8:	f04f 0a00 	mov.w	sl, #0
 80021cc:	e703      	b.n	8001fd6 <main+0x496>
 80021ce:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <main+0x6d8>)
 80021d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80021d4:	e7fe      	b.n	80021d4 <main+0x694>
 80021d6:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <main+0x6dc>)
 80021da:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80021dc:	e7fe      	b.n	80021dc <main+0x69c>
 80021de:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <main+0x6dc>)
 80021e2:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80021e4:	e7fe      	b.n	80021e4 <main+0x6a4>
 80021e6:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <main+0x6e0>)
 80021ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80021ec:	e7fe      	b.n	80021ec <main+0x6ac>
 80021ee:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <main+0x6c8>)
 80021f2:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80021f4:	e7fe      	b.n	80021f4 <main+0x6b4>
 80021f6:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <main+0x6e4>)
 80021fa:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80021fc:	e7fe      	b.n	80021fc <main+0x6bc>
 80021fe:	bf00      	nop
 8002200:	08003538 	.word	0x08003538
 8002204:	08003590 	.word	0x08003590
 8002208:	0800356c 	.word	0x0800356c
 800220c:	0800362c 	.word	0x0800362c
 8002210:	08003638 	.word	0x08003638
 8002214:	08003578 	.word	0x08003578
 8002218:	08003620 	.word	0x08003620
 800221c:	080035c8 	.word	0x080035c8
 8002220:	080036b4 	.word	0x080036b4
 8002224:	08003670 	.word	0x08003670
  } while (ctp != NULL);
 8002228:	4ba7      	ldr	r3, [pc, #668]	; (80024c8 <main+0x988>)
 800222a:	27f8      	movs	r7, #248	; 0xf8
    *startp++ = v;
 800222c:	2255      	movs	r2, #85	; 0x55
  while (startp < endp) {
 800222e:	3f01      	subs	r7, #1
    *startp++ = v;
 8002230:	f803 2b01 	strb.w	r2, [r3], #1
  while (startp < endp) {
 8002234:	d1fb      	bne.n	800222e <main+0x6ee>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002236:	2320      	movs	r3, #32
 8002238:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800223c:	f7fe ffb8 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002240:	f7ff f81e 	bl	8001280 <_dbg_check_lock>
  chDbgCheckClassI();
 8002244:	f7fe fa3c 	bl	80006c0 <chDbgCheckClassI>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002248:	4ba0      	ldr	r3, [pc, #640]	; (80024cc <main+0x98c>)
 800224a:	4aa1      	ldr	r2, [pc, #644]	; (80024d0 <main+0x990>)
  REG_INSERT(tp);
 800224c:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800224e:	6772      	str	r2, [r6, #116]	; 0x74
 8002250:	48a0      	ldr	r0, [pc, #640]	; (80024d4 <main+0x994>)
 8002252:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
  tp->state     = CH_STATE_WTSTART;
 8002256:	2202      	movs	r2, #2
 8002258:	f8a6 20b8 	strh.w	r2, [r6, #184]	; 0xb8
  REG_INSERT(tp);
 800225c:	f103 0824 	add.w	r8, r3, #36	; 0x24
  tp->prio      = prio;
 8002260:	2201      	movs	r2, #1
  tp->name      = name;
 8002262:	489d      	ldr	r0, [pc, #628]	; (80024d8 <main+0x998>)
 8002264:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
  tp->prio      = prio;
 8002268:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
  REG_INSERT(tp);
 800226c:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
  tp->realprio  = prio;
 8002270:	f8c6 20d4 	str.w	r2, [r6, #212]	; 0xd4
  tp->refs      = (trefs_t)1;
 8002274:	f886 20ba 	strb.w	r2, [r6, #186]	; 0xba
  tp->epending  = (eventmask_t)0;
 8002278:	e9c6 7733 	strd	r7, r7, [r6, #204]	; 0xcc
  tp->wabase = tdp->wbase;
 800227c:	f8c6 60b4 	str.w	r6, [r6, #180]	; 0xb4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002280:	67b7      	str	r7, [r6, #120]	; 0x78
  REG_INSERT(tp);
 8002282:	f8c6 40a8 	str.w	r4, [r6, #168]	; 0xa8
 8002286:	f8c1 8010 	str.w	r8, [r1, #16]
  tlp->next = (thread_t *)tlp;
 800228a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800228e:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8002290:	3350      	adds	r3, #80	; 0x50
  tmp->best       = (rtcnt_t)-1;
 8002292:	f04f 32ff 	mov.w	r2, #4294967295
  tlp->next = (thread_t *)tlp;
 8002296:	f8c6 10c0 	str.w	r1, [r6, #192]	; 0xc0
  tmp->cumulative = (rttime_t)0;
 800229a:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 800229c:	e9c6 3331 	strd	r3, r3, [r6, #196]	; 0xc4
 80022a0:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
  tmp->last       = (rtcnt_t)0;
 80022a4:	e9c6 7739 	strd	r7, r7, [r6, #228]	; 0xe4
  tmp->n          = (ucnt_t)0;
 80022a8:	f8c6 70ec 	str.w	r7, [r6, #236]	; 0xec
  tmp->best       = (rtcnt_t)-1;
 80022ac:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 80022b0:	f8c4 8014 	str.w	r8, [r4, #20]
  chDbgCheckClassS();
 80022b4:	f7fe f9f4 	bl	80006a0 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80022b8:	6823      	ldr	r3, [r4, #0]
  thread_t *otp = currp;
 80022ba:	69a0      	ldr	r0, [r4, #24]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80022bc:	42a3      	cmp	r3, r4
 80022be:	d004      	beq.n	80022ca <main+0x78a>
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	6882      	ldr	r2, [r0, #8]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f0c0 8247 	bcc.w	8002758 <main+0xc18>
  ntp->u.rdymsg = msg;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
  if (ntp->prio <= otp->prio) {
 80022d0:	6883      	ldr	r3, [r0, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8224 	beq.w	8002720 <main+0xbe0>
    (void) chSchReadyI(ntp);
 80022d8:	4880      	ldr	r0, [pc, #512]	; (80024dc <main+0x99c>)
 80022da:	f7fe fa59 	bl	8000790 <chSchReadyI>
  chSysUnlock();
 80022de:	f7fe ffaf 	bl	8001240 <chSysUnlock.lto_priv.4>


      /*
      * Starts I2C
      */
        i2cStart(&I2CD3, &i2ccfg);
 80022e2:	f7fe ffdd 	bl	80012a0 <i2cStart.constprop.0>
 80022e6:	2320      	movs	r3, #32
 80022e8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80022ec:	f7fe ff60 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80022f0:	f7fe ffc6 	bl	8001280 <_dbg_check_lock>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80022f4:	f899 3008 	ldrb.w	r3, [r9, #8]
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	2a01      	cmp	r2, #1
 80022fc:	f200 8234 	bhi.w	8002768 <main+0xc28>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002300:	2b01      	cmp	r3, #1
 8002302:	d111      	bne.n	8002328 <main+0x7e8>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8002304:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <main+0x9a0>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002306:	4a77      	ldr	r2, [pc, #476]	; (80024e4 <main+0x9a4>)
 8002308:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800230a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800230e:	6419      	str	r1, [r3, #64]	; 0x40
 8002310:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002312:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002316:	6619      	str	r1, [r3, #96]	; 0x60
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800231c:	2340      	movs	r3, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800231e:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002322:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002326:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 8002328:	f8d9 3074 	ldr.w	r3, [r9, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800232c:	4a6e      	ldr	r2, [pc, #440]	; (80024e8 <main+0x9a8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d063      	beq.n	80023fa <main+0x8ba>
 8002332:	486e      	ldr	r0, [pc, #440]	; (80024ec <main+0x9ac>)
    fck = STM32_PCLK1 / config->speed;
 8002334:	f640 028b 	movw	r2, #2187	; 0x88b
 8002338:	f240 4145 	movw	r1, #1093	; 0x445
 800233c:	4283      	cmp	r3, r0
 800233e:	bf18      	it	ne
 8002340:	460a      	movne	r2, r1
  u->BRR = fck;
 8002342:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002344:	2140      	movs	r1, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002346:	2201      	movs	r2, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002348:	6119      	str	r1, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800234a:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800234c:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 8002350:	2200      	movs	r2, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002352:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 8002354:	601a      	str	r2, [r3, #0]
    sdp->rxmask = 0xFF;
 8002356:	21ff      	movs	r1, #255	; 0xff
  sdp->state = SD_READY;
 8002358:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 800235a:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800235c:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 800235e:	f889 1078 	strb.w	r1, [r9, #120]	; 0x78
 8002362:	f889 2008 	strb.w	r2, [r9, #8]
  _dbg_check_unlock();
 8002366:	f7fe ff5b 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800236a:	f7fe ff19 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	42a3      	cmp	r3, r4
 8002372:	d005      	beq.n	8002380 <main+0x840>
 8002374:	69a2      	ldr	r2, [r4, #24]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	6892      	ldr	r2, [r2, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	f0c0 81f8 	bcc.w	8002770 <main+0xc30>
 8002380:	2300      	movs	r3, #0
 8002382:	f383 8811 	msr	BASEPRI, r3
      /*
       * Activates the serial driver 2 using the driver default configuration.
       * PA2(TX) and PA3(RX) are routed to USART2.
       */
      sdStart(&SD2, NULL);
      palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8002386:	485a      	ldr	r0, [pc, #360]	; (80024f0 <main+0x9b0>)
 8002388:	f240 3282 	movw	r2, #898	; 0x382
 800238c:	2104      	movs	r1, #4
 800238e:	f7fe fc97 	bl	8000cc0 <_pal_lld_setgroupmode>
      palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8002392:	4857      	ldr	r0, [pc, #348]	; (80024f0 <main+0x9b0>)
 8002394:	f240 3282 	movw	r2, #898	; 0x382
 8002398:	2108      	movs	r1, #8
 800239a:	f7fe fc91 	bl	8000cc0 <_pal_lld_setgroupmode>
     // sdWrite(&SD2, (unsigned char*)"Write a String\n", 15);

        /*
         * Starting the transmitter and receiver threads.
         */
      palSetPadMode(GPIOA, GPIOA_PIN8, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN);    /* I2C_SCK PA8 */
 800239e:	4854      	ldr	r0, [pc, #336]	; (80024f0 <main+0x9b0>)
 80023a0:	f240 221e 	movw	r2, #542	; 0x21e
 80023a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a8:	f7fe fc8a 	bl	8000cc0 <_pal_lld_setgroupmode>
      palSetPadMode(GPIOC,GPIOC_PIN9,  PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN);    /* I2C_SDA PC9 */
 80023ac:	4851      	ldr	r0, [pc, #324]	; (80024f4 <main+0x9b4>)
 80023ae:	f240 221e 	movw	r2, #542	; 0x21e
 80023b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b6:	f7fe fc83 	bl	8000cc0 <_pal_lld_setgroupmode>
 80023ba:	2320      	movs	r3, #32
 80023bc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80023c0:	f7fe fef6 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80023c4:	f7fe ff5c 	bl	8001280 <_dbg_check_lock>
 80023c8:	484b      	ldr	r0, [pc, #300]	; (80024f8 <main+0x9b8>)
 80023ca:	f7fe fd99 	bl	8000f00 <chMtxLockS>
  _dbg_check_unlock();
 80023ce:	f7fe ff27 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80023d2:	f7fe fee5 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	42a3      	cmp	r3, r4
 80023da:	d004      	beq.n	80023e6 <main+0x8a6>
 80023dc:	69a2      	ldr	r2, [r4, #24]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	6892      	ldr	r2, [r2, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d30c      	bcc.n	8002400 <main+0x8c0>
 80023e6:	2600      	movs	r6, #0
 80023e8:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck((i2cp != NULL) &&
               (txbytes > 0U) && (txbuf != NULL) &&
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 80023ec:	782f      	ldrb	r7, [r5, #0]
 80023ee:	2f02      	cmp	r7, #2
 80023f0:	d00a      	beq.n	8002408 <main+0x8c8>
  __ASM volatile ("cpsid i" : : : "memory");
 80023f2:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80023f4:	4b41      	ldr	r3, [pc, #260]	; (80024fc <main+0x9bc>)
 80023f6:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80023f8:	e7fe      	b.n	80023f8 <main+0x8b8>
    fck = STM32_PCLK2 / config->speed;
 80023fa:	f640 028b 	movw	r2, #2187	; 0x88b
 80023fe:	e7a0      	b.n	8002342 <main+0x802>
 8002400:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <main+0x9c0>)
 8002404:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 8002406:	e7fe      	b.n	8002406 <main+0x8c6>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002408:	2320      	movs	r3, #32
 800240a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800240e:	f7fe fecf 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002412:	f7fe ff35 	bl	8001280 <_dbg_check_lock>

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8002416:	2303      	movs	r3, #3
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002418:	4639      	mov	r1, r7
 800241a:	2264      	movs	r2, #100	; 0x64
 800241c:	4839      	ldr	r0, [pc, #228]	; (8002504 <main+0x9c4>)
  i2cp->state = I2C_ACTIVE_TX;
 800241e:	702b      	strb	r3, [r5, #0]
  i2cp->errors = I2C_NO_ERROR;
 8002420:	60ae      	str	r6, [r5, #8]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002422:	f7ff f8ad 	bl	8001580 <i2c_lld_master_transmit_timeout.constprop.0>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 8002426:	1c41      	adds	r1, r0, #1
 8002428:	bf08      	it	eq
 800242a:	2705      	moveq	r7, #5
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800242c:	4606      	mov	r6, r0
 800242e:	702f      	strb	r7, [r5, #0]
  _dbg_check_unlock();
 8002430:	f7fe fef6 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002434:	f7fe feb4 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	42a3      	cmp	r3, r4
 800243c:	d004      	beq.n	8002448 <main+0x908>
 800243e:	69a2      	ldr	r2, [r4, #24]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	6892      	ldr	r2, [r2, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	d33a      	bcc.n	80024be <main+0x97e>
 8002448:	2300      	movs	r3, #0
 800244a:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 800244e:	482a      	ldr	r0, [pc, #168]	; (80024f8 <main+0x9b8>)
 8002450:	4f2d      	ldr	r7, [pc, #180]	; (8002508 <main+0x9c8>)
    sdPut(&SD2, *p++);
 8002452:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002514 <main+0x9d4>
 8002456:	f7ff f97b 	bl	8001750 <chMtxUnlock>
  while (*p) {
 800245a:	2173      	movs	r1, #115	; 0x73
    sdPut(&SD2, *p++);
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	4640      	mov	r0, r8
 8002462:	f7ff fabd 	bl	80019e0 <oqPutTimeout>
  while (*p) {
 8002466:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800246a:	2900      	cmp	r1, #0
 800246c:	d1f6      	bne.n	800245c <main+0x91c>
      //status = i2cMasterTransmit(&I2CD3,DeviceAddress,setReset,2,rxData,0);
     // status = i2cMasterTransmitTimeout(&I2CD3,DeviceAddress,cr1,2,NULL,0,10);     // Write Register 09H by 0x1D (Define OSR = 512, Full Scale Range = 8 Gauss, ODR = 200Hz, set continuous measurement mode
   i2cReleaseBus(&I2CD3);
      //status = i2cMasterTransmit(&I2CD3,DeviceAddress,cr1,2,rxData,0);
      print("status :");
      printn(status);
 800246e:	b230      	sxth	r0, r6
 8002470:	f7ff fb1e 	bl	8001ab0 <printn>
      println("");
      if (status != MSG_OK)
      {
            errors = i2cGetErrors(&I2CD3);
 8002474:	4f25      	ldr	r7, [pc, #148]	; (800250c <main+0x9cc>)
      println("");
 8002476:	f7ff fb0b 	bl	8001a90 <println.constprop.0>
      if (status != MSG_OK)
 800247a:	2e00      	cmp	r6, #0
 800247c:	f040 80ac 	bne.w	80025d8 <main+0xa98>
 8002480:	2320      	movs	r3, #32
 8002482:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002486:	f7fe fe93 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800248a:	f7fe fef9 	bl	8001280 <_dbg_check_lock>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800248e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002492:	2008      	movs	r0, #8
 8002494:	f7fe fdac 	bl	8000ff0 <chSchGoSleepTimeoutS>
  chSysUnlock();
 8002498:	f7fe fed2 	bl	8001240 <chSysUnlock.lto_priv.4>
 800249c:	f8df a078 	ldr.w	sl, [pc, #120]	; 8002518 <main+0x9d8>
    sdPut(&SD2, *p++);
 80024a0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002514 <main+0x9d4>
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80024a4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80024e4 <main+0x9a4>
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
          while (true)
          {
            i2cStart(&I2CD3, &i2ccfg);
 80024a8:	f7fe fefa 	bl	80012a0 <i2cStart.constprop.0>
  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 80024ac:	f895 b000 	ldrb.w	fp, [r5]
 80024b0:	f1bb 0f02 	cmp.w	fp, #2
 80024b4:	d032      	beq.n	800251c <main+0x9dc>
  __ASM volatile ("cpsid i" : : : "memory");
 80024b6:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <main+0x9bc>)
 80024ba:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80024bc:	e7fe      	b.n	80024bc <main+0x97c>
 80024be:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <main+0x9d0>)
 80024c2:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80024c4:	e7fe      	b.n	80024c4 <main+0x984>
 80024c6:	bf00      	nop
 80024c8:	20000a88 	.word	0x20000a88
 80024cc:	20000afc 	.word	0x20000afc
 80024d0:	080009f1 	.word	0x080009f1
 80024d4:	080002d1 	.word	0x080002d1
 80024d8:	08003540 	.word	0x08003540
 80024dc:	20000b20 	.word	0x20000b20
 80024e0:	40023800 	.word	0x40023800
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	40011000 	.word	0x40011000
 80024ec:	40011400 	.word	0x40011400
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40020800 	.word	0x40020800
 80024f8:	20000814 	.word	0x20000814
 80024fc:	08003708 	.word	0x08003708
 8002500:	08003578 	.word	0x08003578
 8002504:	20000804 	.word	0x20000804
 8002508:	08003504 	.word	0x08003504
 800250c:	20000c28 	.word	0x20000c28
 8002510:	08003548 	.word	0x08003548
 8002514:	20000870 	.word	0x20000870
 8002518:	20000800 	.word	0x20000800
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800251c:	2320      	movs	r3, #32
 800251e:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8002522:	f7fe fe45 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002526:	f7fe feab 	bl	8001280 <_dbg_check_lock>
  i2cp->errors = I2C_NO_ERROR;
 800252a:	2100      	movs	r1, #0
  i2cp->state = I2C_ACTIVE_TX;
 800252c:	2303      	movs	r3, #3
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800252e:	f04f 32ff 	mov.w	r2, #4294967295
  i2cp->errors = I2C_NO_ERROR;
 8002532:	60a9      	str	r1, [r5, #8]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002534:	4650      	mov	r0, sl
 8002536:	2101      	movs	r1, #1
  i2cp->state = I2C_ACTIVE_TX;
 8002538:	702b      	strb	r3, [r5, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800253a:	f7ff f821 	bl	8001580 <i2c_lld_master_transmit_timeout.constprop.0>
    i2cp->state = I2C_LOCKED;
 800253e:	1c42      	adds	r2, r0, #1
 8002540:	bf08      	it	eq
 8002542:	f04f 0b05 	moveq.w	fp, #5
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002546:	4606      	mov	r6, r0
 8002548:	f885 b000 	strb.w	fp, [r5]
  _dbg_check_unlock();
 800254c:	f7fe fe68 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002550:	f7fe fe26 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	42a3      	cmp	r3, r4
 8002558:	d004      	beq.n	8002564 <main+0xa24>
 800255a:	69a2      	ldr	r2, [r4, #24]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	6892      	ldr	r2, [r2, #8]
 8002560:	429a      	cmp	r2, r3
 8002562:	d34f      	bcc.n	8002604 <main+0xac4>
 8002564:	2300      	movs	r3, #0
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f8df b240 	ldr.w	fp, [pc, #576]	; 80027ac <main+0xc6c>
  while (*p) {
 800256e:	2173      	movs	r1, #115	; 0x73
    sdPut(&SD2, *p++);
 8002570:	f04f 32ff 	mov.w	r2, #4294967295
 8002574:	4648      	mov	r0, r9
 8002576:	f7ff fa33 	bl	80019e0 <oqPutTimeout>
  while (*p) {
 800257a:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 800257e:	2900      	cmp	r1, #0
 8002580:	d1f6      	bne.n	8002570 <main+0xa30>
             //i2cAcquireBus(&I2CD3);
                status = i2cMasterTransmit(&I2CD3,DeviceAddress, &StatusReg,1,NULL,0); // Check status register 06H[0]
             //  i2cReleaseBus(&I2CD3);
                print("status :");
                     printn(status);
 8002582:	b230      	sxth	r0, r6
 8002584:	f7ff fa94 	bl	8001ab0 <printn>
                     println("");
 8002588:	f7ff fa82 	bl	8001a90 <println.constprop.0>
                if (status != MSG_OK)
 800258c:	2e00      	cmp	r6, #0
 800258e:	d03d      	beq.n	800260c <main+0xacc>
                {
                   errors = i2cGetErrors(&I2CD3);
 8002590:	68ab      	ldr	r3, [r5, #8]
 8002592:	4e79      	ldr	r6, [pc, #484]	; (8002778 <main+0xc38>)
 8002594:	603b      	str	r3, [r7, #0]
  while (*p) {
 8002596:	2145      	movs	r1, #69	; 0x45
    sdPut(&SD2, *p++);
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	4648      	mov	r0, r9
 800259e:	f7ff fa1f 	bl	80019e0 <oqPutTimeout>
  while (*p) {
 80025a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025a6:	2900      	cmp	r1, #0
 80025a8:	d1f6      	bne.n	8002598 <main+0xa58>
                   print("Error : ");
                   printn(errors);
 80025aa:	f9b7 0000 	ldrsh.w	r0, [r7]
 80025ae:	f7ff fa7f 	bl	8001ab0 <printn>
                   println("");
 80025b2:	f7ff fa6d 	bl	8001a90 <println.constprop.0>
 80025b6:	2320      	movs	r3, #32
 80025b8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80025bc:	f7fe fdf8 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80025c0:	f7fe fe5e 	bl	8001280 <_dbg_check_lock>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 80025c4:	782b      	ldrb	r3, [r5, #0]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	2a01      	cmp	r2, #1
 80025ca:	d970      	bls.n	80026ae <main+0xb6e>
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d02b      	beq.n	8002628 <main+0xae8>
  __ASM volatile ("cpsid i" : : : "memory");
 80025d0:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80025d2:	4b6a      	ldr	r3, [pc, #424]	; (800277c <main+0xc3c>)
 80025d4:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 80025d6:	e7fe      	b.n	80025d6 <main+0xa96>
            errors = i2cGetErrors(&I2CD3);
 80025d8:	68ab      	ldr	r3, [r5, #8]
 80025da:	4e69      	ldr	r6, [pc, #420]	; (8002780 <main+0xc40>)
    sdPut(&SD2, *p++);
 80025dc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80027b0 <main+0xc70>
            errors = i2cGetErrors(&I2CD3);
 80025e0:	603b      	str	r3, [r7, #0]
  while (*p) {
 80025e2:	2145      	movs	r1, #69	; 0x45
    sdPut(&SD2, *p++);
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	4640      	mov	r0, r8
 80025ea:	f7ff f9f9 	bl	80019e0 <oqPutTimeout>
  while (*p) {
 80025ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025f2:	2900      	cmp	r1, #0
 80025f4:	d1f6      	bne.n	80025e4 <main+0xaa4>
            printn(errors);
 80025f6:	f9b7 0000 	ldrsh.w	r0, [r7]
 80025fa:	f7ff fa59 	bl	8001ab0 <printn>
            println("");
 80025fe:	f7ff fa47 	bl	8001a90 <println.constprop.0>
 8002602:	e73d      	b.n	8002480 <main+0x940>
 8002604:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8002606:	4b5f      	ldr	r3, [pc, #380]	; (8002784 <main+0xc44>)
 8002608:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 800260a:	e7fe      	b.n	800260a <main+0xaca>
                if (status != MSG_OK)
 800260c:	4e5e      	ldr	r6, [pc, #376]	; (8002788 <main+0xc48>)
  while (*p) {
 800260e:	2161      	movs	r1, #97	; 0x61
    sdPut(&SD2, *p++);
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	4648      	mov	r0, r9
 8002616:	f7ff f9e3 	bl	80019e0 <oqPutTimeout>
  while (*p) {
 800261a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800261e:	2900      	cmp	r1, #0
 8002620:	d1f6      	bne.n	8002610 <main+0xad0>
                }
                else
                {
                  print("all is clear!");
                  println("");
 8002622:	f7ff fa35 	bl	8001a90 <println.constprop.0>
 8002626:	e7c6      	b.n	80025b6 <main+0xa76>
  I2C_TypeDef *dp = i2cp->i2c;
 8002628:	e9d5 030c 	ldrd	r0, r3, [r5, #48]	; 0x30
  dp->CR1 = I2C_CR1_SWRST;
 800262c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  dmaStreamDisable(i2cp->dmatx);
 8002630:	6802      	ldr	r2, [r0, #0]
  dp->CR1 = I2C_CR1_SWRST;
 8002632:	6019      	str	r1, [r3, #0]
  dp->CR1 = 0;
 8002634:	2100      	movs	r1, #0
 8002636:	6019      	str	r1, [r3, #0]
  dp->CR2 = 0;
 8002638:	6059      	str	r1, [r3, #4]
  dp->SR1 = 0;
 800263a:	6159      	str	r1, [r3, #20]
  dmaStreamDisable(i2cp->dmatx);
 800263c:	6813      	ldr	r3, [r2, #0]
 800263e:	f023 031f 	bic.w	r3, r3, #31
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	6813      	ldr	r3, [r2, #0]
 8002646:	07db      	lsls	r3, r3, #31
 8002648:	d4fc      	bmi.n	8002644 <main+0xb04>
 800264a:	7a41      	ldrb	r1, [r0, #9]
  dmaStreamDisable(i2cp->dmarx);
 800264c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 800264e:	6842      	ldr	r2, [r0, #4]
 8002650:	263d      	movs	r6, #61	; 0x3d
 8002652:	408e      	lsls	r6, r1
  dmaStreamDisable(i2cp->dmarx);
 8002654:	6819      	ldr	r1, [r3, #0]
  dmaStreamDisable(i2cp->dmatx);
 8002656:	6016      	str	r6, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002658:	680a      	ldr	r2, [r1, #0]
 800265a:	f022 021f 	bic.w	r2, r2, #31
 800265e:	600a      	str	r2, [r1, #0]
 8002660:	680e      	ldr	r6, [r1, #0]
 8002662:	f016 0601 	ands.w	r6, r6, #1
 8002666:	d1fb      	bne.n	8002660 <main+0xb20>
 8002668:	7a59      	ldrb	r1, [r3, #9]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	233d      	movs	r3, #61	; 0x3d
 800266e:	408b      	lsls	r3, r1
 8002670:	6013      	str	r3, [r2, #0]
    dmaStreamFreeI(i2cp->dmatx);
 8002672:	f7fe fb95 	bl	8000da0 <dmaStreamFreeI>
    dmaStreamFreeI(i2cp->dmarx);
 8002676:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002678:	f7fe fb92 	bl	8000da0 <dmaStreamFreeI>
      rccDisableI2C3();
 800267c:	4b43      	ldr	r3, [pc, #268]	; (800278c <main+0xc4c>)
 800267e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002686:	f8c8 1088 	str.w	r1, [r8, #136]	; 0x88
  NVIC->IP[n] = 0U;
 800268a:	f888 6348 	strb.w	r6, [r8, #840]	; 0x348
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 800268e:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
  NVIC->IP[n] = 0U;
 8002692:	f888 6349 	strb.w	r6, [r8, #841]	; 0x349
 8002696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    i2cp->dmatx = NULL;
 8002698:	632e      	str	r6, [r5, #48]	; 0x30
      rccDisableI2C3();
 800269a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
 80026a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    i2cp->dmarx = NULL;
 80026a2:	62ee      	str	r6, [r5, #44]	; 0x2c
      rccDisableI2C3();
 80026a4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80026a8:	661a      	str	r2, [r3, #96]	; 0x60
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	e001      	b.n	80026b2 <main+0xb72>
  if (i2cp->state != I2C_STOP) {
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d1ba      	bne.n	8002628 <main+0xae8>
  i2cp->state  = I2C_STOP;
 80026b2:	2301      	movs	r3, #1
  i2cp->config = NULL;
 80026b4:	2200      	movs	r2, #0
  i2cp->state  = I2C_STOP;
 80026b6:	702b      	strb	r3, [r5, #0]
  i2cp->config = NULL;
 80026b8:	606a      	str	r2, [r5, #4]
  _dbg_check_unlock();
 80026ba:	f7fe fdb1 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80026be:	f7fe fd6f 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	42a3      	cmp	r3, r4
 80026c6:	d004      	beq.n	80026d2 <main+0xb92>
 80026c8:	69a2      	ldr	r2, [r4, #24]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	6892      	ldr	r2, [r2, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d322      	bcc.n	8002718 <main+0xbd8>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80026d2:	2300      	movs	r3, #0
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	2320      	movs	r3, #32
 80026da:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80026de:	f7fe fd67 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80026e2:	f7fe fdcd 	bl	8001280 <_dbg_check_lock>
 80026e6:	f242 7110 	movw	r1, #10000	; 0x2710
 80026ea:	2008      	movs	r0, #8
 80026ec:	f7fe fc80 	bl	8000ff0 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 80026f0:	f7fe fd96 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80026f4:	f7fe fd54 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	42a3      	cmp	r3, r4
 80026fc:	d004      	beq.n	8002708 <main+0xbc8>
 80026fe:	69a2      	ldr	r2, [r4, #24]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	6892      	ldr	r2, [r2, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d303      	bcc.n	8002710 <main+0xbd0>
 8002708:	2300      	movs	r3, #0
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	e6cb      	b.n	80024a8 <main+0x968>
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8002712:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <main+0xc50>)
 8002714:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 8002716:	e7fe      	b.n	8002716 <main+0xbd6>
 8002718:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <main+0xc44>)
 800271c:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 800271e:	e7fe      	b.n	800271e <main+0xbde>
    otp = chSchReadyAheadI(otp);
 8002720:	f7fe f80e 	bl	8000740 <chSchReadyAheadI>
  ch.kernel_stats.n_ctxswc++;
 8002724:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8002728:	491a      	ldr	r1, [pc, #104]	; (8002794 <main+0xc54>)
    currp = ntp;
 800272a:	f8c4 8018 	str.w	r8, [r4, #24]
    ntp->state = CH_STATE_CURRENT;
 800272e:	2201      	movs	r2, #1
  ch.kernel_stats.n_ctxswc++;
 8002730:	3301      	adds	r3, #1
    otp = chSchReadyAheadI(otp);
 8002732:	4607      	mov	r7, r0
    ntp->state = CH_STATE_CURRENT;
 8002734:	f886 20b8 	strb.w	r2, [r6, #184]	; 0xb8
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 8002738:	3048      	adds	r0, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 800273a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  chTMChainMeasurementToX(&otp->stats, &ntp->stats);
 800273e:	f7fd ff4f 	bl	80005e0 <chTMChainMeasurementToX>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002742:	f3ef 8309 	mrs	r3, PSP
    chSysSwitch(ntp, otp);
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	3b24      	subs	r3, #36	; 0x24
 800274a:	429a      	cmp	r2, r3
 800274c:	d808      	bhi.n	8002760 <main+0xc20>
 800274e:	4812      	ldr	r0, [pc, #72]	; (8002798 <main+0xc58>)
 8002750:	4639      	mov	r1, r7
 8002752:	f7fd fdb5 	bl	80002c0 <_port_switch>
 8002756:	e5c2      	b.n	80022de <main+0x79e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <main+0xc5c>)
 800275c:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 800275e:	e7fe      	b.n	800275e <main+0xc1e>
 8002760:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <main+0xc60>)
 8002764:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 8002766:	e7fe      	b.n	8002766 <main+0xc26>
 8002768:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <main+0xc64>)
 800276c:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 800276e:	e7fe      	b.n	800276e <main+0xc2e>
 8002770:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <main+0xc68>)
 8002774:	62e3      	str	r3, [r4, #44]	; 0x2c
  while (true) {
 8002776:	e7fe      	b.n	8002776 <main+0xc36>
 8002778:	0800351c 	.word	0x0800351c
 800277c:	080036ec 	.word	0x080036ec
 8002780:	08003510 	.word	0x08003510
 8002784:	08003548 	.word	0x08003548
 8002788:	08003528 	.word	0x08003528
 800278c:	40023800 	.word	0x40023800
 8002790:	0800356c 	.word	0x0800356c
 8002794:	20000b68 	.word	0x20000b68
 8002798:	20000b20 	.word	0x20000b20
 800279c:	08003650 	.word	0x08003650
 80027a0:	080034e0 	.word	0x080034e0
 80027a4:	0800372c 	.word	0x0800372c
 80027a8:	08003554 	.word	0x08003554
 80027ac:	08003504 	.word	0x08003504
 80027b0:	20000870 	.word	0x20000870
	...

080027c0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80027c0:	3030      	adds	r0, #48	; 0x30
 80027c2:	f7ff b90d 	b.w	80019e0 <oqPutTimeout>
 80027c6:	bf00      	nop
	...

080027d0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80027d0:	3030      	adds	r0, #48	; 0x30
 80027d2:	f04f 32ff 	mov.w	r2, #4294967295
 80027d6:	f7ff b903 	b.w	80019e0 <oqPutTimeout>
 80027da:	bf00      	nop
 80027dc:	0000      	movs	r0, r0
	...

080027e0 <iqReadTimeout>:
  osalDbgCheck(n > 0U);
 80027e0:	2a00      	cmp	r2, #0
 80027e2:	d079      	beq.n	80028d8 <iqReadTimeout+0xf8>
                     size_t n, sysinterval_t timeout) {
 80027e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e8:	4604      	mov	r4, r0
 80027ea:	b085      	sub	sp, #20
 80027ec:	460d      	mov	r5, r1
 80027ee:	4698      	mov	r8, r3
 80027f0:	4616      	mov	r6, r2
  qnotify_t nfy = iqp->q_notify;
 80027f2:	f8d0 a01c 	ldr.w	sl, [r0, #28]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80027f6:	2720      	movs	r7, #32
 80027f8:	f387 8811 	msr	BASEPRI, r7
  _stats_start_measure_crit_thd();
 80027fc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8002908 <iqReadTimeout+0x128>
 8002800:	f7fe fcd6 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002804:	f7fe fd3c 	bl	8001280 <_dbg_check_lock>
 8002808:	9701      	str	r7, [sp, #4]
 800280a:	9602      	str	r6, [sp, #8]
 800280c:	4637      	mov	r7, r6
  if (n > iqGetFullI(iqp)) {
 800280e:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002810:	69a1      	ldr	r1, [r4, #24]
 8002812:	6922      	ldr	r2, [r4, #16]
  if (n > iqGetFullI(iqp)) {
 8002814:	42bb      	cmp	r3, r7
    n = iqGetFullI(iqp);
 8002816:	bf34      	ite	cc
 8002818:	68a6      	ldrcc	r6, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 800281a:	463e      	movcs	r6, r7
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800281c:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 800281e:	42b2      	cmp	r2, r6
 8002820:	d85f      	bhi.n	80028e2 <iqReadTimeout+0x102>
  else if (n > s1) {
 8002822:	d325      	bcc.n	8002870 <iqReadTimeout+0x90>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002824:	4632      	mov	r2, r6
 8002826:	4628      	mov	r0, r5
 8002828:	f7fd fd6c 	bl	8000304 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800282c:	68e2      	ldr	r2, [r4, #12]
 800282e:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8002830:	68a2      	ldr	r2, [r4, #8]
 8002832:	1b92      	subs	r2, r2, r6
 8002834:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002836:	bb6e      	cbnz	r6, 8002894 <iqReadTimeout+0xb4>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8002838:	4641      	mov	r1, r8
 800283a:	4620      	mov	r0, r4
 800283c:	f7fe fc88 	bl	8001150 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002840:	2800      	cmp	r0, #0
 8002842:	d0e4      	beq.n	800280e <iqReadTimeout+0x2e>
 8002844:	9e02      	ldr	r6, [sp, #8]
  _dbg_check_unlock();
 8002846:	f7fe fceb 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800284a:	f7fe fca9 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800284e:	f8d9 3000 	ldr.w	r3, [r9]
 8002852:	454b      	cmp	r3, r9
 8002854:	d005      	beq.n	8002862 <iqReadTimeout+0x82>
 8002856:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	6892      	ldr	r2, [r2, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d34c      	bcc.n	80028fc <iqReadTimeout+0x11c>
 8002862:	2300      	movs	r3, #0
 8002864:	f383 8811 	msr	BASEPRI, r3
}
 8002868:	1bf0      	subs	r0, r6, r7
 800286a:	b005      	add	sp, #20
 800286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002870:	4628      	mov	r0, r5
    s2 = n - s1;
 8002872:	eba6 0b02 	sub.w	fp, r6, r2
 8002876:	9203      	str	r2, [sp, #12]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002878:	f7fd fd44 	bl	8000304 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800287c:	9a03      	ldr	r2, [sp, #12]
 800287e:	68e1      	ldr	r1, [r4, #12]
 8002880:	18a8      	adds	r0, r5, r2
 8002882:	465a      	mov	r2, fp
 8002884:	f7fd fd3e 	bl	8000304 <memcpy>
  iqp->q_counter -= n;
 8002888:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 800288a:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 800288c:	1b92      	subs	r2, r2, r6
    iqp->q_rdptr = iqp->q_buffer + s2;
 800288e:	4459      	add	r1, fp
 8002890:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 8002892:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8002894:	f1ba 0f00 	cmp.w	sl, #0
 8002898:	d001      	beq.n	800289e <iqReadTimeout+0xbe>
        nfy(iqp);
 800289a:	4620      	mov	r0, r4
 800289c:	47d0      	blx	sl
  _dbg_check_unlock();
 800289e:	f7fe fcbf 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80028a2:	f7fe fc7d 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80028a6:	f8d9 2000 	ldr.w	r2, [r9]
 80028aa:	454a      	cmp	r2, r9
 80028ac:	d005      	beq.n	80028ba <iqReadTimeout+0xda>
 80028ae:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80028b2:	6892      	ldr	r2, [r2, #8]
 80028b4:	6889      	ldr	r1, [r1, #8]
 80028b6:	4291      	cmp	r1, r2
 80028b8:	d31b      	bcc.n	80028f2 <iqReadTimeout+0x112>
 80028ba:	2300      	movs	r3, #0
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 80028c2:	1bbf      	subs	r7, r7, r6
      bp += done;
 80028c4:	4435      	add	r5, r6
 80028c6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80028ca:	f7fe fc71 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80028ce:	f7fe fcd7 	bl	8001280 <_dbg_check_lock>
  while (n > 0U) {
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d19b      	bne.n	800280e <iqReadTimeout+0x2e>
 80028d6:	e7b5      	b.n	8002844 <iqReadTimeout+0x64>
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <iqReadTimeout+0x128>)
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <iqReadTimeout+0x12c>)
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80028e0:	e7fe      	b.n	80028e0 <iqReadTimeout+0x100>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80028e2:	4632      	mov	r2, r6
 80028e4:	4628      	mov	r0, r5
 80028e6:	f7fd fd0d 	bl	8000304 <memcpy>
    iqp->q_rdptr += n;
 80028ea:	69a2      	ldr	r2, [r4, #24]
 80028ec:	4432      	add	r2, r6
 80028ee:	61a2      	str	r2, [r4, #24]
 80028f0:	e79e      	b.n	8002830 <iqReadTimeout+0x50>
 80028f2:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <iqReadTimeout+0x130>)
 80028f6:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (true) {
 80028fa:	e7fe      	b.n	80028fa <iqReadTimeout+0x11a>
 80028fc:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <iqReadTimeout+0x130>)
 8002900:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (true) {
 8002904:	e7fe      	b.n	8002904 <iqReadTimeout+0x124>
 8002906:	bf00      	nop
 8002908:	20000968 	.word	0x20000968
 800290c:	08003754 	.word	0x08003754
 8002910:	080035bc 	.word	0x080035bc
	...

08002920 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002920:	300c      	adds	r0, #12
 8002922:	f7ff bf5d 	b.w	80027e0 <iqReadTimeout>
 8002926:	bf00      	nop
	...

08002930 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, TIME_INFINITE);
 8002930:	300c      	adds	r0, #12
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	f7ff bf53 	b.w	80027e0 <iqReadTimeout>
 800293a:	bf00      	nop
 800293c:	0000      	movs	r0, r0
	...

08002940 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002940:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002942:	2320      	movs	r3, #32
 8002944:	4605      	mov	r5, r0
 8002946:	460e      	mov	r6, r1
 8002948:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800294c:	f7fe fc30 	bl	80011b0 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002950:	f7fe fc96 	bl	8001280 <_dbg_check_lock>
 8002954:	e003      	b.n	800295e <iqGetTimeout+0x1e>
 8002956:	f7fe fbfb 	bl	8001150 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800295a:	1e04      	subs	r4, r0, #0
 800295c:	db27      	blt.n	80029ae <iqGetTimeout+0x6e>
  while (iqIsEmptyI(iqp)) {
 800295e:	68ab      	ldr	r3, [r5, #8]
 8002960:	4631      	mov	r1, r6
 8002962:	4628      	mov	r0, r5
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f6      	beq.n	8002956 <iqGetTimeout+0x16>
  b = *iqp->q_rdptr++;
 8002968:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 800296a:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800296c:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 800296e:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8002970:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8002972:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8002974:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8002976:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8002978:	bf28      	it	cs
 800297a:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 800297c:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800297e:	bf28      	it	cs
 8002980:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8002982:	69eb      	ldr	r3, [r5, #28]
 8002984:	b10b      	cbz	r3, 800298a <iqGetTimeout+0x4a>
    iqp->q_notify(iqp);
 8002986:	4628      	mov	r0, r5
 8002988:	4798      	blx	r3
  _dbg_check_unlock();
 800298a:	f7fe fc49 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800298e:	f7fe fc07 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <iqGetTimeout+0x98>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d004      	beq.n	80029a4 <iqGetTimeout+0x64>
 800299a:	6999      	ldr	r1, [r3, #24]
 800299c:	6892      	ldr	r2, [r2, #8]
 800299e:	6889      	ldr	r1, [r1, #8]
 80029a0:	4291      	cmp	r1, r2
 80029a2:	d315      	bcc.n	80029d0 <iqGetTimeout+0x90>
 80029a4:	2300      	movs	r3, #0
 80029a6:	f383 8811 	msr	BASEPRI, r3
}
 80029aa:	4620      	mov	r0, r4
 80029ac:	bd70      	pop	{r4, r5, r6, pc}
  _dbg_check_unlock();
 80029ae:	f7fe fc37 	bl	8001220 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80029b2:	f7fe fbf5 	bl	80011a0 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <iqGetTimeout+0x98>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d0f2      	beq.n	80029a4 <iqGetTimeout+0x64>
 80029be:	6999      	ldr	r1, [r3, #24]
 80029c0:	6892      	ldr	r2, [r2, #8]
 80029c2:	6889      	ldr	r1, [r1, #8]
 80029c4:	4291      	cmp	r1, r2
 80029c6:	d2ed      	bcs.n	80029a4 <iqGetTimeout+0x64>
  __ASM volatile ("cpsid i" : : : "memory");
 80029c8:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80029ca:	4a04      	ldr	r2, [pc, #16]	; (80029dc <iqGetTimeout+0x9c>)
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80029ce:	e7fe      	b.n	80029ce <iqGetTimeout+0x8e>
 80029d0:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80029d2:	4a02      	ldr	r2, [pc, #8]	; (80029dc <iqGetTimeout+0x9c>)
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c
  while (true) {
 80029d6:	e7fe      	b.n	80029d6 <iqGetTimeout+0x96>
 80029d8:	20000968 	.word	0x20000968
 80029dc:	080035bc 	.word	0x080035bc

080029e0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80029e0:	300c      	adds	r0, #12
 80029e2:	f7ff bfad 	b.w	8002940 <iqGetTimeout>
 80029e6:	bf00      	nop
	...

080029f0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80029f0:	300c      	adds	r0, #12
 80029f2:	f04f 31ff 	mov.w	r1, #4294967295
 80029f6:	f7ff bfa3 	b.w	8002940 <iqGetTimeout>
 80029fa:	bf00      	nop
 80029fc:	0000      	movs	r0, r0
	...

08002a00 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002a00:	4a7e      	ldr	r2, [pc, #504]	; (8002bfc <__early_init+0x1fc>)
  gpiop->OTYPER  = config->otyper;
 8002a02:	487f      	ldr	r0, [pc, #508]	; (8002c00 <__early_init+0x200>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002a04:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8002a06:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8002c54 <__early_init+0x254>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002a0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a0e:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8002a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002a14:	6113      	str	r3, [r2, #16]
 8002a16:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8002a18:	4e7a      	ldr	r6, [pc, #488]	; (8002c04 <__early_init+0x204>)
  gpiop->PUPDR   = config->pupdr;
 8002a1a:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8002c58 <__early_init+0x258>
  gpiop->AFRL    = config->afrl;
 8002a1e:	4f7a      	ldr	r7, [pc, #488]	; (8002c08 <__early_init+0x208>)
  gpiop->OTYPER  = config->otyper;
 8002a20:	4d7a      	ldr	r5, [pc, #488]	; (8002c0c <__early_init+0x20c>)
 8002a22:	4c7b      	ldr	r4, [pc, #492]	; (8002c10 <__early_init+0x210>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002a24:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6113      	str	r3, [r2, #16]
 8002a2e:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002a30:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a32:	430b      	orrs	r3, r1
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8002a3c:	f46f 41a8 	mvn.w	r1, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8002a40:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002a42:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8002a46:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002a48:	6081      	str	r1, [r0, #8]
  gpiop->ODR     = config->odr;
 8002a4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
 8002a4e:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->AFRH    = config->afrh;
 8002a52:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8002c5c <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 8002a56:	6141      	str	r1, [r0, #20]
  gpiop->MODER   = config->moder;
 8002a58:	f8df e204 	ldr.w	lr, [pc, #516]	; 8002c60 <__early_init+0x260>
  gpiop->AFRL    = config->afrl;
 8002a5c:	6207      	str	r7, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 8002a5e:	f44f 7710 	mov.w	r7, #576	; 0x240
  gpiop->AFRH    = config->afrh;
 8002a62:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002a66:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 8002a6a:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8002a70:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8002c64 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 8002a74:	60b0      	str	r0, [r6, #8]
  gpiop->AFRL    = config->afrl;
 8002a76:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 8002a7a:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->ODR     = config->odr;
 8002a7e:	6171      	str	r1, [r6, #20]
  gpiop->AFRH    = config->afrh;
 8002a80:	f04f 0e40 	mov.w	lr, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 8002a84:	6237      	str	r7, [r6, #32]
  gpiop->MODER   = config->moder;
 8002a86:	4f63      	ldr	r7, [pc, #396]	; (8002c14 <__early_init+0x214>)
  gpiop->AFRH    = config->afrh;
 8002a88:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002a8c:	6037      	str	r7, [r6, #0]
  gpiop->PUPDR   = config->pupdr;
 8002a8e:	f106 56a2 	add.w	r6, r6, #339738624	; 0x14400000
 8002a92:	f506 3644 	add.w	r6, r6, #200704	; 0x31000
 8002a96:	f506 76aa 	add.w	r6, r6, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 8002a9a:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002a9c:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002a9e:	60ee      	str	r6, [r5, #12]
  gpiop->AFRL    = config->afrl;
 8002aa0:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8002aa4:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8002aa6:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8002aa8:	4e5b      	ldr	r6, [pc, #364]	; (8002c18 <__early_init+0x218>)
 8002aaa:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002aac:	4e5b      	ldr	r6, [pc, #364]	; (8002c1c <__early_init+0x21c>)
 8002aae:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 8002ab0:	4d5b      	ldr	r5, [pc, #364]	; (8002c20 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 8002ab2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002ab4:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8002ab6:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8002ab8:	f640 75ff 	movw	r5, #4095	; 0xfff
 8002abc:	6165      	str	r5, [r4, #20]
  gpiop->OTYPER  = config->otyper;
 8002abe:	4f59      	ldr	r7, [pc, #356]	; (8002c24 <__early_init+0x224>)
 8002ac0:	4e59      	ldr	r6, [pc, #356]	; (8002c28 <__early_init+0x228>)
  gpiop->MODER   = config->moder;
 8002ac2:	4d5a      	ldr	r5, [pc, #360]	; (8002c2c <__early_init+0x22c>)
  gpiop->AFRL    = config->afrl;
 8002ac4:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8002ac6:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002ac8:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8002aca:	f8cc 3004 	str.w	r3, [ip, #4]
 8002ace:	4d58      	ldr	r5, [pc, #352]	; (8002c30 <__early_init+0x230>)
  gpiop->OSPEEDR = config->ospeedr;
 8002ad0:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->OTYPER  = config->otyper;
 8002ad4:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8002ad8:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 8002adc:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8002ae0:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8002ae4:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002ae8:	f8cc e000 	str.w	lr, [ip]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002aec:	f5ac 3cd0 	sub.w	ip, ip, #106496	; 0x1a000
  gpiop->OTYPER  = config->otyper;
 8002af0:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002af2:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8002af4:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8002af6:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8002af8:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002afc:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 8002afe:	6073      	str	r3, [r6, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002b00:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8002b04:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8002b06:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8002b08:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8002b0a:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8002b0c:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002b0e:	6033      	str	r3, [r6, #0]
  PWR->CR = STM32_VOS;
 8002b10:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 8002b14:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002b16:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002b18:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8002b1a:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8002b1c:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8002b1e:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002b20:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8002b22:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002b24:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8002b26:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8002b28:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8002b2a:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8002b2c:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002b2e:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002b30:	6417      	str	r7, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8002b32:	f8cc 6000 	str.w	r6, [ip]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002b36:	6813      	ldr	r3, [r2, #0]
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	079e      	lsls	r6, r3, #30
 8002b42:	d5fc      	bpl.n	8002b3e <__early_init+0x13e>
  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
 // RCC->CFGR |= RCC_CFGR_SW_HSE;//HSE selected
//  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8002b44:	6891      	ldr	r1, [r2, #8]
 while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <__early_init+0x1fc>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8002b48:	f021 0103 	bic.w	r1, r1, #3
 8002b4c:	6091      	str	r1, [r2, #8]
 while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	f012 020c 	ands.w	r2, r2, #12
 8002b54:	d1fb      	bne.n	8002b4e <__early_init+0x14e>
                                      /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002b56:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002b58:	4928      	ldr	r1, [pc, #160]	; (8002bfc <__early_init+0x1fc>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002b5a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8002b5e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002b60:	609a      	str	r2, [r3, #8]
  RCC->CR |= RCC_CR_HSEON;
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b68:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002b6a:	680b      	ldr	r3, [r1, #0]
 8002b6c:	039d      	lsls	r5, r3, #14
 8002b6e:	d5fc      	bpl.n	8002b6a <__early_init+0x16a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8002b70:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <__early_init+0x1fc>)
  RCC->CSR |= RCC_CSR_LSION;
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002b7a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002b7c:	0794      	lsls	r4, r2, #30
 8002b7e:	d5fc      	bpl.n	8002b7a <__early_init+0x17a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8002b80:	4a2c      	ldr	r2, [pc, #176]	; (8002c34 <__early_init+0x234>)
 8002b82:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002b84:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002b86:	492c      	ldr	r1, [pc, #176]	; (8002c38 <__early_init+0x238>)
  RCC->CR |= RCC_CR_PLLON;
 8002b88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002b8c:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002b8e:	684b      	ldr	r3, [r1, #4]
 8002b90:	0458      	lsls	r0, r3, #17
 8002b92:	d5fc      	bpl.n	8002b8e <__early_init+0x18e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <__early_init+0x1fc>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	0192      	lsls	r2, r2, #6
 8002b9a:	d5fc      	bpl.n	8002b96 <__early_init+0x196>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002b9c:	4927      	ldr	r1, [pc, #156]	; (8002c3c <__early_init+0x23c>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002b9e:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <__early_init+0x240>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002ba0:	6099      	str	r1, [r3, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <__early_init+0x244>)
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d01e      	beq.n	8002be8 <__early_init+0x1e8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <__early_init+0x248>)
 8002bac:	f240 7205 	movw	r2, #1797	; 0x705
 8002bb0:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8002bb2:	4a25      	ldr	r2, [pc, #148]	; (8002c48 <__early_init+0x248>)
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d1fa      	bne.n	8002bb4 <__early_init+0x1b4>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <__early_init+0x1fc>)
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	f042 0202 	orr.w	r2, r2, #2
 8002bc6:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	f002 020c 	and.w	r2, r2, #12
 8002bce:	2a08      	cmp	r2, #8
 8002bd0:	d1fa      	bne.n	8002bc8 <__early_init+0x1c8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8002bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
 8002bda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be0:	665a      	str	r2, [r3, #100]	; 0x64
 8002be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8002be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002be8:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <__early_init+0x24c>)
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <__early_init+0x250>)
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d1db      	bne.n	8002baa <__early_init+0x1aa>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <__early_init+0x248>)
 8002bf4:	f240 1205 	movw	r2, #261	; 0x105
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e7da      	b.n	8002bb2 <__early_init+0x1b2>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400
 8002c08:	55560000 	.word	0x55560000
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	00082080 	.word	0x00082080
 8002c18:	00060600 	.word	0x00060600
 8002c1c:	02208001 	.word	0x02208001
 8002c20:	00555055 	.word	0x00555055
 8002c24:	40021400 	.word	0x40021400
 8002c28:	40021800 	.word	0x40021800
 8002c2c:	55000100 	.word	0x55000100
 8002c30:	40021c00 	.word	0x40021c00
 8002c34:	07405408 	.word	0x07405408
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	38889400 	.word	0x38889400
 8002c40:	e0042000 	.word	0xe0042000
 8002c44:	20006411 	.word	0x20006411
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	e000ed00 	.word	0xe000ed00
 8002c50:	410fc241 	.word	0x410fc241
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40010054 	.word	0x40010054
 8002c5c:	000aaa00 	.word	0x000aaa00
 8002c60:	2aa0aa00 	.word	0x2aa0aa00
 8002c64:	55514515 	.word	0x55514515
	...

08002c70 <Vector110>:
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8002c70:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002c72:	f7fd fca5 	bl	80005c0 <_stats_increase_irq>
 8002c76:	f7fd fe43 	bl	8000900 <_dbg_check_enter_isr>
  serve_interrupt(&SD4);
 8002c7a:	4804      	ldr	r0, [pc, #16]	; (8002c8c <Vector110+0x1c>)
 8002c7c:	f7fd fec0 	bl	8000a00 <serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8002c80:	f7fd fe26 	bl	80008d0 <_dbg_check_leave_isr>
}
 8002c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002c88:	f7fd bc72 	b.w	8000570 <_port_irq_epilogue>
 8002c8c:	200008bc 	.word	0x200008bc

08002c90 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8002c90:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002c92:	f7fd fc95 	bl	80005c0 <_stats_increase_irq>
 8002c96:	f7fd fe33 	bl	8000900 <_dbg_check_enter_isr>
  serve_interrupt(&SD2);
 8002c9a:	4804      	ldr	r0, [pc, #16]	; (8002cac <VectorD8+0x1c>)
 8002c9c:	f7fd feb0 	bl	8000a00 <serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8002ca0:	f7fd fe16 	bl	80008d0 <_dbg_check_leave_isr>
}
 8002ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002ca8:	f7fd bc62 	b.w	8000570 <_port_irq_epilogue>
 8002cac:	20000840 	.word	0x20000840

08002cb0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8002cb4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 8002cb8:	f7fd fc82 	bl	80005c0 <_stats_increase_irq>
 8002cbc:	f7fd fe20 	bl	8000900 <_dbg_check_enter_isr>
  sr  = timp->SR;
 8002cc0:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002cc2:	68ea      	ldr	r2, [r5, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8002cc8:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002cca:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8002ccc:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8002cce:	d405      	bmi.n	8002cdc <VectorB0+0x2c>
  OSAL_IRQ_EPILOGUE();
 8002cd0:	f7fd fdfe 	bl	80008d0 <_dbg_check_leave_isr>
}
 8002cd4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8002cd8:	f7fd bc4a 	b.w	8000570 <_port_irq_epilogue>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002cdc:	2320      	movs	r3, #32
 8002cde:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8002ce2:	4e32      	ldr	r6, [pc, #200]	; (8002dac <VectorB0+0xfc>)
  _stats_start_measure_crit_isr();
 8002ce4:	f7fd fcd4 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002ce8:	f7fd fe3a 	bl	8000960 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 8002cec:	f7fd fce8 	bl	80006c0 <chDbgCheckClassI>
  chDbgCheckClassI();
 8002cf0:	f7fd fce6 	bl	80006c0 <chDbgCheckClassI>
  vtp = ch.vtlist.next;
 8002cf4:	69f4      	ldr	r4, [r6, #28]
 8002cf6:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8002cf8:	6ab3      	ldr	r3, [r6, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8002cfa:	68a2      	ldr	r2, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8002cfc:	eba0 0903 	sub.w	r9, r0, r3
 8002d00:	454a      	cmp	r2, r9
 8002d02:	f106 0a1c 	add.w	sl, r6, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8002d06:	bf98      	it	ls
 8002d08:	2700      	movls	r7, #0
    if (nowdelta < vtp->delta) {
 8002d0a:	d829      	bhi.n	8002d60 <VectorB0+0xb0>
 8002d0c:	f04f 0820 	mov.w	r8, #32
 8002d10:	e000      	b.n	8002d14 <VectorB0+0x64>
 8002d12:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002d14:	6821      	ldr	r1, [r4, #0]
      fn = vtp->func;
 8002d16:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 8002d1a:	4413      	add	r3, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002d1c:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8002d1e:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002d20:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 8002d24:	61f1      	str	r1, [r6, #28]
      vtp->func = NULL;
 8002d26:	60e7      	str	r7, [r4, #12]
  STM32_ST_TIM->DIER = 0U;
 8002d28:	bf08      	it	eq
 8002d2a:	60ef      	streq	r7, [r5, #12]
      nowdelta -= vtp->delta;
 8002d2c:	eba9 0902 	sub.w	r9, r9, r2
  _dbg_check_unlock_from_isr();
 8002d30:	f7fd fdfe 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002d34:	f7fd fc9c 	bl	8000670 <_stats_stop_measure_crit_isr>
 8002d38:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8002d3c:	6920      	ldr	r0, [r4, #16]
 8002d3e:	47d8      	blx	fp
 8002d40:	f388 8811 	msr	BASEPRI, r8
  _stats_start_measure_crit_isr();
 8002d44:	f7fd fca4 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002d48:	f7fd fe0a 	bl	8000960 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8002d4c:	69f4      	ldr	r4, [r6, #28]
    }
    while (vtp->delta <= nowdelta);
 8002d4e:	68a2      	ldr	r2, [r4, #8]
 8002d50:	4591      	cmp	r9, r2
 8002d52:	d2de      	bcs.n	8002d12 <VectorB0+0x62>
  return (systime_t)STM32_ST_TIM->CNT;
 8002d54:	6a68      	ldr	r0, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8002d56:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002d58:	eba0 0903 	sub.w	r9, r0, r3
    if (nowdelta < vtp->delta) {
 8002d5c:	4591      	cmp	r9, r2
 8002d5e:	d2d5      	bcs.n	8002d0c <VectorB0+0x5c>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002d60:	4554      	cmp	r4, sl
 8002d62:	d016      	beq.n	8002d92 <VectorB0+0xe2>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8002d64:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.lasttime += nowdelta;
 8002d66:	62b0      	str	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8002d68:	1a12      	subs	r2, r2, r0
 8002d6a:	4413      	add	r3, r2
  return systime + (systime_t)interval;
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	bf2c      	ite	cs
 8002d70:	18c0      	addcs	r0, r0, r3
 8002d72:	3002      	addcc	r0, #2
 8002d74:	60a3      	str	r3, [r4, #8]
 8002d76:	f7fe f883 	bl	8000e80 <stSetAlarm>
 8002d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 8002d7e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002d82:	1a80      	subs	r0, r0, r2
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	4283      	cmp	r3, r0
 8002d88:	d903      	bls.n	8002d92 <VectorB0+0xe2>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d8a:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <VectorB0+0x100>)
 8002d8e:	62f3      	str	r3, [r6, #44]	; 0x2c
  while (true) {
 8002d90:	e7fe      	b.n	8002d90 <VectorB0+0xe0>
  _dbg_check_unlock_from_isr();
 8002d92:	f7fd fdcd 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002d96:	f7fd fc6b 	bl	8000670 <_stats_stop_measure_crit_isr>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f7fd fd96 	bl	80008d0 <_dbg_check_leave_isr>
}
 8002da4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8002da8:	f7fd bbe2 	b.w	8000570 <_port_irq_epilogue>
 8002dac:	20000968 	.word	0x20000968
 8002db0:	0800359c 	.word	0x0800359c
	...

08002dc0 <Vector164>:
  uint16_t sr = I2CD3.i2c->SR1;
 8002dc0:	483e      	ldr	r0, [pc, #248]	; (8002ebc <Vector164+0xfc>)
OSAL_IRQ_HANDLER(STM32_I2C3_ERROR_HANDLER) {
 8002dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD3.i2c->SR1;
 8002dc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dc6:	695c      	ldr	r4, [r3, #20]
  OSAL_IRQ_PROLOGUE();
 8002dc8:	f7fd fbfa 	bl	80005c0 <_stats_increase_irq>
 8002dcc:	f7fd fd98 	bl	8000900 <_dbg_check_enter_isr>
  I2CD3.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002dd0:	e9d0 510c 	ldrd	r5, r1, [r0, #48]	; 0x30
 8002dd4:	f404 425f 	and.w	r2, r4, #57088	; 0xdf00
  dmaStreamDisable(i2cp->dmatx);
 8002dd8:	682b      	ldr	r3, [r5, #0]
  I2CD3.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002dda:	43d2      	mvns	r2, r2
 8002ddc:	614a      	str	r2, [r1, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	f022 021f 	bic.w	r2, r2, #31
 8002de4:	601a      	str	r2, [r3, #0]
  uint16_t sr = I2CD3.i2c->SR1;
 8002de6:	b2a2      	uxth	r2, r4
  dmaStreamDisable(i2cp->dmatx);
 8002de8:	681e      	ldr	r6, [r3, #0]
 8002dea:	07f6      	lsls	r6, r6, #31
 8002dec:	d4fc      	bmi.n	8002de8 <Vector164+0x28>
 8002dee:	f895 c009 	ldrb.w	ip, [r5, #9]
  dmaStreamDisable(i2cp->dmarx);
 8002df2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8002df4:	686f      	ldr	r7, [r5, #4]
  dmaStreamDisable(i2cp->dmarx);
 8002df6:	6835      	ldr	r5, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 8002df8:	233d      	movs	r3, #61	; 0x3d
 8002dfa:	fa03 f30c 	lsl.w	r3, r3, ip
 8002dfe:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	f023 031f 	bic.w	r3, r3, #31
 8002e06:	602b      	str	r3, [r5, #0]
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	f013 0301 	ands.w	r3, r3, #1
 8002e0e:	d1fb      	bne.n	8002e08 <Vector164+0x48>
 8002e10:	7a77      	ldrb	r7, [r6, #9]
 8002e12:	6876      	ldr	r6, [r6, #4]
 8002e14:	253d      	movs	r5, #61	; 0x3d
 8002e16:	40bd      	lsls	r5, r7
 8002e18:	6035      	str	r5, [r6, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8002e1a:	05d7      	lsls	r7, r2, #23
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8002e1c:	bf41      	itttt	mi
 8002e1e:	694d      	ldrmi	r5, [r1, #20]
 8002e20:	f425 7580 	bicmi.w	r5, r5, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 8002e24:	2301      	movmi	r3, #1
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8002e26:	614d      	strmi	r5, [r1, #20]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8002e28:	0596      	lsls	r6, r2, #22
    i2cp->errors |= I2C_BUS_ERROR;
 8002e2a:	6083      	str	r3, [r0, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8002e2c:	bf44      	itt	mi
 8002e2e:	f043 0302 	orrmi.w	r3, r3, #2
 8002e32:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8002e34:	0555      	lsls	r5, r2, #21
 8002e36:	d50a      	bpl.n	8002e4e <Vector164+0x8e>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e38:	684d      	ldr	r5, [r1, #4]
 8002e3a:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8002e3e:	604d      	str	r5, [r1, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002e40:	680d      	ldr	r5, [r1, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002e42:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002e46:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8002e4a:	600d      	str	r5, [r1, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002e4c:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8002e4e:	0517      	lsls	r7, r2, #20
    i2cp->errors |= I2C_OVERRUN;
 8002e50:	bf44      	itt	mi
 8002e52:	f043 0308 	orrmi.w	r3, r3, #8
 8002e56:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8002e58:	0456      	lsls	r6, r2, #17
    i2cp->errors |= I2C_TIMEOUT;
 8002e5a:	bf44      	itt	mi
 8002e5c:	f043 0320 	orrmi.w	r3, r3, #32
 8002e60:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8002e62:	04d5      	lsls	r5, r2, #19
 8002e64:	d520      	bpl.n	8002ea8 <Vector164+0xe8>
    i2cp->errors |= I2C_PEC_ERROR;
 8002e66:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002e6a:	0421      	lsls	r1, r4, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8002e6c:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002e6e:	d502      	bpl.n	8002e76 <Vector164+0xb6>
    i2cp->errors |= I2C_SMB_ALERT;
 8002e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e74:	6083      	str	r3, [r0, #8]
 8002e76:	2320      	movs	r3, #32
 8002e78:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8002e7c:	f7fd fc08 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002e80:	f7fd fd6e 	bl	8000960 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 8002e84:	480e      	ldr	r0, [pc, #56]	; (8002ec0 <Vector164+0x100>)
 8002e86:	f06f 0101 	mvn.w	r1, #1
 8002e8a:	f7fd fd09 	bl	80008a0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8002e8e:	f7fd fd4f 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002e92:	f7fd fbed 	bl	8000670 <_stats_stop_measure_crit_isr>
 8002e96:	2300      	movs	r3, #0
 8002e98:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 8002e9c:	f7fd fd18 	bl	80008d0 <_dbg_check_leave_isr>
}
 8002ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8002ea4:	f7fd bb64 	b.w	8000570 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002ea8:	0422      	lsls	r2, r4, #16
 8002eaa:	d4e1      	bmi.n	8002e70 <Vector164+0xb0>
  if (i2cp->errors != I2C_NO_ERROR)
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e2      	bne.n	8002e76 <Vector164+0xb6>
  OSAL_IRQ_EPILOGUE();
 8002eb0:	f7fd fd0e 	bl	80008d0 <_dbg_check_leave_isr>
}
 8002eb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8002eb8:	f7fd bb5a 	b.w	8000570 <_port_irq_epilogue>
 8002ebc:	20000808 	.word	0x20000808
 8002ec0:	20000824 	.word	0x20000824
	...

08002ed0 <Vector160>:
OSAL_IRQ_HANDLER(STM32_I2C3_EVENT_HANDLER) {
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8002ed2:	4e4b      	ldr	r6, [pc, #300]	; (8003000 <Vector160+0x130>)
  OSAL_IRQ_PROLOGUE();
 8002ed4:	f7fd fb74 	bl	80005c0 <_stats_increase_irq>
 8002ed8:	f7fd fd12 	bl	8000900 <_dbg_check_enter_isr>
  I2C_TypeDef *dp = i2cp->i2c;
 8002edc:	6b74      	ldr	r4, [r6, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002ede:	4a49      	ldr	r2, [pc, #292]	; (8003004 <Vector160+0x134>)
  uint32_t regSR2 = dp->SR2;
 8002ee0:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8002ee2:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002ee4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002ee8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d06a      	beq.n	8002fc6 <Vector160+0xf6>
 8002ef0:	d835      	bhi.n	8002f5e <Vector160+0x8e>
 8002ef2:	3a07      	subs	r2, #7
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d026      	beq.n	8002f46 <Vector160+0x76>
 8002ef8:	3201      	adds	r2, #1
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d120      	bne.n	8002f40 <Vector160+0x70>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002efe:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002f00:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002f02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8002f06:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002f08:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8002f12:	6862      	ldr	r2, [r4, #4]
 8002f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f18:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d94d      	bls.n	8002fbc <Vector160+0xec>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002f20:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8002f24:	bf18      	it	ne
 8002f26:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8002f28:	05eb      	lsls	r3, r5, #23
 8002f2a:	d503      	bpl.n	8002f34 <Vector160+0x64>
    dp->SR1 &= ~I2C_SR1_BERR;
 8002f2c:	6963      	ldr	r3, [r4, #20]
 8002f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f32:	6163      	str	r3, [r4, #20]
  OSAL_IRQ_EPILOGUE();
 8002f34:	f7fd fccc 	bl	80008d0 <_dbg_check_leave_isr>
}
 8002f38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8002f3c:	f7fd bb18 	b.w	8000570 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002f40:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8002f44:	d1ec      	bne.n	8002f20 <Vector160+0x50>
    if ((i2cp->addr >> 8) > 0) {
 8002f46:	8c33      	ldrh	r3, [r6, #32]
 8002f48:	0a1a      	lsrs	r2, r3, #8
 8002f4a:	d03f      	beq.n	8002fcc <Vector160+0xfc>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8002f4c:	f002 0206 	and.w	r2, r2, #6
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002f5a:	6123      	str	r3, [r4, #16]
 8002f5c:	e7e0      	b.n	8002f20 <Vector160+0x50>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <Vector160+0x138>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d03b      	beq.n	8002fdc <Vector160+0x10c>
 8002f64:	3202      	adds	r2, #2
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d1da      	bne.n	8002f20 <Vector160+0x50>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002f6a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    (void)dp->DR; /* clear BTF.*/
 8002f6c:	6922      	ldr	r2, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685f      	ldr	r7, [r3, #4]
 8002f72:	b147      	cbz	r7, 8002f86 <Vector160+0xb6>
      i2cp->addr |= 0x01;
 8002f74:	8c32      	ldrh	r2, [r6, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002f76:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 8002f78:	f042 0201 	orr.w	r2, r2, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002f7c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8002f80:	8432      	strh	r2, [r6, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	e7d6      	b.n	8002f34 <Vector160+0x64>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f8c:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f94:	6023      	str	r3, [r4, #0]
 8002f96:	2320      	movs	r3, #32
 8002f98:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8002f9c:	f7fd fb78 	bl	8000690 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8002fa0:	f7fd fcde 	bl	8000960 <_dbg_check_lock_from_isr>
 8002fa4:	4639      	mov	r1, r7
 8002fa6:	f106 001c 	add.w	r0, r6, #28
 8002faa:	f7fd fc79 	bl	80008a0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8002fae:	f7fd fcbf 	bl	8000930 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8002fb2:	f7fd fb5d 	bl	8000670 <_stats_stop_measure_crit_isr>
 8002fb6:	f387 8811 	msr	BASEPRI, r7
 8002fba:	e7b1      	b.n	8002f20 <Vector160+0x50>
      dp->CR1 &= ~I2C_CR1_ACK;
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc2:	6023      	str	r3, [r4, #0]
 8002fc4:	e7ac      	b.n	8002f20 <Vector160+0x50>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8002fc6:	8c33      	ldrh	r3, [r6, #32]
 8002fc8:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8002fcc:	6123      	str	r3, [r4, #16]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002fce:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8002fd2:	bf18      	it	ne
 8002fd4:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8002fd6:	05eb      	lsls	r3, r5, #23
 8002fd8:	d5ac      	bpl.n	8002f34 <Vector160+0x64>
 8002fda:	e7a7      	b.n	8002f2c <Vector160+0x5c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002fdc:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002fde:	6b32      	ldr	r2, [r6, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8002fe4:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002fe6:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002fe8:	6813      	ldr	r3, [r2, #0]
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6013      	str	r3, [r2, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002ff0:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8002ff4:	bf18      	it	ne
 8002ff6:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8002ff8:	05eb      	lsls	r3, r5, #23
 8002ffa:	d59b      	bpl.n	8002f34 <Vector160+0x64>
 8002ffc:	e796      	b.n	8002f2c <Vector160+0x5c>
 8002ffe:	bf00      	nop
 8003000:	20000808 	.word	0x20000808
 8003004:	00030008 	.word	0x00030008
 8003008:	00070082 	.word	0x00070082
 800300c:	00000000 	.word	0x00000000

08003010 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8003010:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003012:	f7fd fad5 	bl	80005c0 <_stats_increase_irq>
 8003016:	f7fd fc73 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <Vector158+0x30>)
  if (dma.streams[15].func)
 800301c:	4809      	ldr	r0, [pc, #36]	; (8003044 <Vector158+0x34>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800301e:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8003020:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003022:	0d89      	lsrs	r1, r1, #22
 8003024:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8003028:	058c      	lsls	r4, r1, #22
 800302a:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 800302c:	b112      	cbz	r2, 8003034 <Vector158+0x24>
    dma.streams[15].func(dma.streams[15].param, flags);
 800302e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8003032:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8003034:	f7fd fc4c 	bl	80008d0 <_dbg_check_leave_isr>
}
 8003038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800303c:	f7fd ba98 	b.w	8000570 <_port_irq_epilogue>
 8003040:	40026400 	.word	0x40026400
 8003044:	20000ba4 	.word	0x20000ba4
	...

08003050 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8003050:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003052:	f7fd fab5 	bl	80005c0 <_stats_increase_irq>
 8003056:	f7fd fc53 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <Vector154+0x30>)
  if (dma.streams[14].func)
 800305c:	4809      	ldr	r0, [pc, #36]	; (8003084 <Vector154+0x34>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800305e:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8003060:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003062:	0c09      	lsrs	r1, r1, #16
 8003064:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8003068:	040c      	lsls	r4, r1, #16
 800306a:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 800306c:	b10a      	cbz	r2, 8003072 <Vector154+0x22>
    dma.streams[14].func(dma.streams[14].param, flags);
 800306e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003070:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8003072:	f7fd fc2d 	bl	80008d0 <_dbg_check_leave_isr>
}
 8003076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800307a:	f7fd ba79 	b.w	8000570 <_port_irq_epilogue>
 800307e:	bf00      	nop
 8003080:	40026400 	.word	0x40026400
 8003084:	20000ba4 	.word	0x20000ba4
	...

08003090 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8003090:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003092:	f7fd fa95 	bl	80005c0 <_stats_increase_irq>
 8003096:	f7fd fc33 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <Vector150+0x30>)
  if (dma.streams[13].func)
 800309c:	4809      	ldr	r0, [pc, #36]	; (80030c4 <Vector150+0x34>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800309e:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 80030a0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80030a2:	0989      	lsrs	r1, r1, #6
 80030a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 80030a8:	018c      	lsls	r4, r1, #6
 80030aa:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80030ac:	b10a      	cbz	r2, 80030b2 <Vector150+0x22>
    dma.streams[13].func(dma.streams[13].param, flags);
 80030ae:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80030b0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80030b2:	f7fd fc0d 	bl	80008d0 <_dbg_check_leave_isr>
}
 80030b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80030ba:	f7fd ba59 	b.w	8000570 <_port_irq_epilogue>
 80030be:	bf00      	nop
 80030c0:	40026400 	.word	0x40026400
 80030c4:	20000ba4 	.word	0x20000ba4
	...

080030d0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80030d0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80030d2:	f7fd fa75 	bl	80005c0 <_stats_increase_irq>
 80030d6:	f7fd fc13 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <Vector130+0x2c>)
  if (dma.streams[12].func)
 80030dc:	4808      	ldr	r0, [pc, #32]	; (8003100 <Vector130+0x30>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80030de:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 80030e0:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80030e2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80030e6:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 80030e8:	b10a      	cbz	r2, 80030ee <Vector130+0x1e>
    dma.streams[12].func(dma.streams[12].param, flags);
 80030ea:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80030ec:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80030ee:	f7fd fbef 	bl	80008d0 <_dbg_check_leave_isr>
}
 80030f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80030f6:	f7fd ba3b 	b.w	8000570 <_port_irq_epilogue>
 80030fa:	bf00      	nop
 80030fc:	40026400 	.word	0x40026400
 8003100:	20000ba4 	.word	0x20000ba4
	...

08003110 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8003110:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003112:	f7fd fa55 	bl	80005c0 <_stats_increase_irq>
 8003116:	f7fd fbf3 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <Vector12C+0x30>)
  if (dma.streams[11].func)
 800311c:	4809      	ldr	r0, [pc, #36]	; (8003144 <Vector12C+0x34>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800311e:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 8003120:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003122:	0d89      	lsrs	r1, r1, #22
 8003124:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8003128:	058c      	lsls	r4, r1, #22
 800312a:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 800312c:	b10a      	cbz	r2, 8003132 <Vector12C+0x22>
    dma.streams[11].func(dma.streams[11].param, flags);
 800312e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8003130:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8003132:	f7fd fbcd 	bl	80008d0 <_dbg_check_leave_isr>
}
 8003136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800313a:	f7fd ba19 	b.w	8000570 <_port_irq_epilogue>
 800313e:	bf00      	nop
 8003140:	40026400 	.word	0x40026400
 8003144:	20000ba4 	.word	0x20000ba4
	...

08003150 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8003150:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003152:	f7fd fa35 	bl	80005c0 <_stats_increase_irq>
 8003156:	f7fd fbd3 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <Vector128+0x30>)
  if (dma.streams[10].func)
 800315c:	4809      	ldr	r0, [pc, #36]	; (8003184 <Vector128+0x34>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800315e:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8003160:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003162:	0c09      	lsrs	r1, r1, #16
 8003164:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8003168:	040c      	lsls	r4, r1, #16
 800316a:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 800316c:	b10a      	cbz	r2, 8003172 <Vector128+0x22>
    dma.streams[10].func(dma.streams[10].param, flags);
 800316e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003170:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8003172:	f7fd fbad 	bl	80008d0 <_dbg_check_leave_isr>
}
 8003176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800317a:	f7fd b9f9 	b.w	8000570 <_port_irq_epilogue>
 800317e:	bf00      	nop
 8003180:	40026400 	.word	0x40026400
 8003184:	20000ba4 	.word	0x20000ba4
	...

08003190 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8003190:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003192:	f7fd fa15 	bl	80005c0 <_stats_increase_irq>
 8003196:	f7fd fbb3 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <Vector124+0x30>)
  if (dma.streams[9].func)
 800319c:	4809      	ldr	r0, [pc, #36]	; (80031c4 <Vector124+0x34>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800319e:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 80031a0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80031a2:	0989      	lsrs	r1, r1, #6
 80031a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 80031a8:	018c      	lsls	r4, r1, #6
 80031aa:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 80031ac:	b10a      	cbz	r2, 80031b2 <Vector124+0x22>
    dma.streams[9].func(dma.streams[9].param, flags);
 80031ae:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80031b0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80031b2:	f7fd fb8d 	bl	80008d0 <_dbg_check_leave_isr>
}
 80031b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80031ba:	f7fd b9d9 	b.w	8000570 <_port_irq_epilogue>
 80031be:	bf00      	nop
 80031c0:	40026400 	.word	0x40026400
 80031c4:	20000ba4 	.word	0x20000ba4
	...

080031d0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80031d0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80031d2:	f7fd f9f5 	bl	80005c0 <_stats_increase_irq>
 80031d6:	f7fd fb93 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <Vector120+0x2c>)
  if (dma.streams[8].func)
 80031dc:	4808      	ldr	r0, [pc, #32]	; (8003200 <Vector120+0x30>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80031de:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 80031e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80031e2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80031e6:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 80031e8:	b10a      	cbz	r2, 80031ee <Vector120+0x1e>
    dma.streams[8].func(dma.streams[8].param, flags);
 80031ea:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80031ec:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80031ee:	f7fd fb6f 	bl	80008d0 <_dbg_check_leave_isr>
}
 80031f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80031f6:	f7fd b9bb 	b.w	8000570 <_port_irq_epilogue>
 80031fa:	bf00      	nop
 80031fc:	40026400 	.word	0x40026400
 8003200:	20000ba4 	.word	0x20000ba4
	...

08003210 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8003210:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003212:	f7fd f9d5 	bl	80005c0 <_stats_increase_irq>
 8003216:	f7fd fb73 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <VectorFC+0x30>)
  if (dma.streams[7].func)
 800321c:	4809      	ldr	r0, [pc, #36]	; (8003244 <VectorFC+0x34>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800321e:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 8003220:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003222:	0d89      	lsrs	r1, r1, #22
 8003224:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 8003228:	058c      	lsls	r4, r1, #22
 800322a:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 800322c:	b10a      	cbz	r2, 8003232 <VectorFC+0x22>
    dma.streams[7].func(dma.streams[7].param, flags);
 800322e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003230:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8003232:	f7fd fb4d 	bl	80008d0 <_dbg_check_leave_isr>
}
 8003236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800323a:	f7fd b999 	b.w	8000570 <_port_irq_epilogue>
 800323e:	bf00      	nop
 8003240:	40026000 	.word	0x40026000
 8003244:	20000ba4 	.word	0x20000ba4
	...

08003250 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8003250:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003252:	f7fd f9b5 	bl	80005c0 <_stats_increase_irq>
 8003256:	f7fd fb53 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <Vector84+0x30>)
  if (dma.streams[6].func)
 800325c:	4809      	ldr	r0, [pc, #36]	; (8003284 <Vector84+0x34>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800325e:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8003260:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003262:	0c09      	lsrs	r1, r1, #16
 8003264:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 8003268:	040c      	lsls	r4, r1, #16
 800326a:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 800326c:	b10a      	cbz	r2, 8003272 <Vector84+0x22>
    dma.streams[6].func(dma.streams[6].param, flags);
 800326e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003270:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8003272:	f7fd fb2d 	bl	80008d0 <_dbg_check_leave_isr>
}
 8003276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800327a:	f7fd b979 	b.w	8000570 <_port_irq_epilogue>
 800327e:	bf00      	nop
 8003280:	40026000 	.word	0x40026000
 8003284:	20000ba4 	.word	0x20000ba4
	...

08003290 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003290:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003292:	f7fd f995 	bl	80005c0 <_stats_increase_irq>
 8003296:	f7fd fb33 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <Vector80+0x30>)
  if (dma.streams[5].func)
 800329c:	4809      	ldr	r0, [pc, #36]	; (80032c4 <Vector80+0x34>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800329e:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 80032a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80032a2:	0989      	lsrs	r1, r1, #6
 80032a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 80032a8:	018c      	lsls	r4, r1, #6
 80032aa:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 80032ac:	b10a      	cbz	r2, 80032b2 <Vector80+0x22>
    dma.streams[5].func(dma.streams[5].param, flags);
 80032ae:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80032b0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80032b2:	f7fd fb0d 	bl	80008d0 <_dbg_check_leave_isr>
}
 80032b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80032ba:	f7fd b959 	b.w	8000570 <_port_irq_epilogue>
 80032be:	bf00      	nop
 80032c0:	40026000 	.word	0x40026000
 80032c4:	20000ba4 	.word	0x20000ba4
	...

080032d0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80032d0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80032d2:	f7fd f975 	bl	80005c0 <_stats_increase_irq>
 80032d6:	f7fd fb13 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <Vector7C+0x2c>)
  if (dma.streams[4].func)
 80032dc:	4808      	ldr	r0, [pc, #32]	; (8003300 <Vector7C+0x30>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80032de:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80032e0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80032e2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80032e6:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80032e8:	b10a      	cbz	r2, 80032ee <Vector7C+0x1e>
    dma.streams[4].func(dma.streams[4].param, flags);
 80032ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80032ec:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80032ee:	f7fd faef 	bl	80008d0 <_dbg_check_leave_isr>
}
 80032f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80032f6:	f7fd b93b 	b.w	8000570 <_port_irq_epilogue>
 80032fa:	bf00      	nop
 80032fc:	40026000 	.word	0x40026000
 8003300:	20000ba4 	.word	0x20000ba4
	...

08003310 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8003310:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003312:	f7fd f955 	bl	80005c0 <_stats_increase_irq>
 8003316:	f7fd faf3 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <Vector78+0x30>)
  if (dma.streams[3].func)
 800331c:	4809      	ldr	r0, [pc, #36]	; (8003344 <Vector78+0x34>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800331e:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8003320:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003322:	0d89      	lsrs	r1, r1, #22
 8003324:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 8003328:	058c      	lsls	r4, r1, #22
 800332a:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 800332c:	b10a      	cbz	r2, 8003332 <Vector78+0x22>
    dma.streams[3].func(dma.streams[3].param, flags);
 800332e:	6a00      	ldr	r0, [r0, #32]
 8003330:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8003332:	f7fd facd 	bl	80008d0 <_dbg_check_leave_isr>
}
 8003336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800333a:	f7fd b919 	b.w	8000570 <_port_irq_epilogue>
 800333e:	bf00      	nop
 8003340:	40026000 	.word	0x40026000
 8003344:	20000ba4 	.word	0x20000ba4
	...

08003350 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8003350:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003352:	f7fd f935 	bl	80005c0 <_stats_increase_irq>
 8003356:	f7fd fad3 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <Vector74+0x30>)
  if (dma.streams[2].func)
 800335c:	4809      	ldr	r0, [pc, #36]	; (8003384 <Vector74+0x34>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800335e:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 8003360:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003362:	0c09      	lsrs	r1, r1, #16
 8003364:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 8003368:	040c      	lsls	r4, r1, #16
 800336a:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 800336c:	b10a      	cbz	r2, 8003372 <Vector74+0x22>
    dma.streams[2].func(dma.streams[2].param, flags);
 800336e:	6980      	ldr	r0, [r0, #24]
 8003370:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8003372:	f7fd faad 	bl	80008d0 <_dbg_check_leave_isr>
}
 8003376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800337a:	f7fd b8f9 	b.w	8000570 <_port_irq_epilogue>
 800337e:	bf00      	nop
 8003380:	40026000 	.word	0x40026000
 8003384:	20000ba4 	.word	0x20000ba4
	...

08003390 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8003390:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003392:	f7fd f915 	bl	80005c0 <_stats_increase_irq>
 8003396:	f7fd fab3 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <Vector70+0x30>)
  if (dma.streams[1].func)
 800339c:	4809      	ldr	r0, [pc, #36]	; (80033c4 <Vector70+0x34>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800339e:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 80033a0:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80033a2:	0989      	lsrs	r1, r1, #6
 80033a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 80033a8:	018c      	lsls	r4, r1, #6
 80033aa:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 80033ac:	b10a      	cbz	r2, 80033b2 <Vector70+0x22>
    dma.streams[1].func(dma.streams[1].param, flags);
 80033ae:	6900      	ldr	r0, [r0, #16]
 80033b0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80033b2:	f7fd fa8d 	bl	80008d0 <_dbg_check_leave_isr>
}
 80033b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80033ba:	f7fd b8d9 	b.w	8000570 <_port_irq_epilogue>
 80033be:	bf00      	nop
 80033c0:	40026000 	.word	0x40026000
 80033c4:	20000ba4 	.word	0x20000ba4
	...

080033d0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80033d0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80033d2:	f7fd f8f5 	bl	80005c0 <_stats_increase_irq>
 80033d6:	f7fd fa93 	bl	8000900 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <Vector6C+0x2c>)
  if (dma.streams[0].func)
 80033dc:	4808      	ldr	r0, [pc, #32]	; (8003400 <Vector6C+0x30>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80033de:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 80033e0:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80033e2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80033e6:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 80033e8:	b10a      	cbz	r2, 80033ee <Vector6C+0x1e>
    dma.streams[0].func(dma.streams[0].param, flags);
 80033ea:	6880      	ldr	r0, [r0, #8]
 80033ec:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80033ee:	f7fd fa6f 	bl	80008d0 <_dbg_check_leave_isr>
}
 80033f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80033f6:	f7fd b8bb 	b.w	8000570 <_port_irq_epilogue>
 80033fa:	bf00      	nop
 80033fc:	40026000 	.word	0x40026000
 8003400:	20000ba4 	.word	0x20000ba4
	...

08003410 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003410:	b4f0      	push	{r4, r5, r6, r7}
 8003412:	4f14      	ldr	r7, [pc, #80]	; (8003464 <__init_ram_areas+0x54>)
 8003414:	4d14      	ldr	r5, [pc, #80]	; (8003468 <__init_ram_areas+0x58>)
 8003416:	4815      	ldr	r0, [pc, #84]	; (800346c <__init_ram_areas+0x5c>)
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <__init_ram_areas+0x60>)
 800341a:	4916      	ldr	r1, [pc, #88]	; (8003474 <__init_ram_areas+0x64>)
 800341c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8003420:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8003422:	4298      	cmp	r0, r3
 8003424:	d911      	bls.n	800344a <__init_ram_areas+0x3a>
 8003426:	3904      	subs	r1, #4
 8003428:	461a      	mov	r2, r3
      *p = *tp;
 800342a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800342e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8003432:	4290      	cmp	r0, r2
 8003434:	d8f9      	bhi.n	800342a <__init_ram_areas+0x1a>
 8003436:	1e42      	subs	r2, r0, #1
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	f022 0203 	bic.w	r2, r2, #3
 800343e:	3204      	adds	r2, #4
 8003440:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8003442:	429d      	cmp	r5, r3
 8003444:	d903      	bls.n	800344e <__init_ram_areas+0x3e>
      *p = 0;
 8003446:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800344a:	429d      	cmp	r5, r3
 800344c:	d8fb      	bhi.n	8003446 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800344e:	4567      	cmp	r7, ip
 8003450:	d005      	beq.n	800345e <__init_ram_areas+0x4e>
 8003452:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8003456:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800345a:	3710      	adds	r7, #16
 800345c:	e7e1      	b.n	8003422 <__init_ram_areas+0x12>
#endif
}
 800345e:	bcf0      	pop	{r4, r5, r6, r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	08003858 	.word	0x08003858
 8003468:	20000c2c 	.word	0x20000c2c
 800346c:	20000c2c 	.word	0x20000c2c
 8003470:	20000c2c 	.word	0x20000c2c
 8003474:	08003908 	.word	0x08003908
	...

08003480 <__default_exit>:
  while (true) {
 8003480:	e7fe      	b.n	8003480 <__default_exit>
 8003482:	bf00      	nop
	...

08003490 <__late_init>:
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
	...

080034a0 <__core_init>:
}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
